#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 337)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    43,   204,   245,    74,   223,    69,    94,    94,   106,    28,
   234,    66,    93,    93,    55,     7,   235,   137,     8,    56,
    43,   225,   168,   226,   227,    85,    84,    71,   169,   228,
    71,    72,    73,   170,   189,   130,   131,    75,   171,    20,
    43,   172,   173,   -85,   -85,    71,    71,    45,    46,    28,
    33,   174,    37,    39,    40,    41,    42,    44,    47,   206,
    49,    50,    52,   175,    63,   177,   178,    45,    46,   135,
    33,    63,    37,    39,    40,    41,    42,    44,    47,    20,
    49,    50,    52,    63,   184,   185,    98,    45,    46,   189,
    33,   140,    37,    39,    40,    41,    42,    44,    47,    43,
    49,    50,    52,   201,    99,   128,   205,   127,    28,   208,
   209,   126,   211,    99,   212,   125,    71,    20,   100,    43,
   102,   103,   222,   104,   105,   216,   217,   100,    28,   102,
   103,   117,   104,   105,    14,    16,   117,   139,    20,    43,
   144,    71,   230,    63,   109,    88,    45,    46,   228,    33,
    87,    37,    39,    40,    41,    42,    44,    47,    20,    49,
    50,    52,    86,    71,    83,    82,    45,    46,     8,    33,
    81,    37,    39,    40,    41,    42,    44,    47,   206,    49,
    50,    52,    80,    79,   246,    78,    45,    46,   141,    33,
   249,    37,    39,    40,    41,    42,    44,    47,    43,    49,
    50,    52,   189,   250,   205,    99,   -85,    28,   230,    97,
    68,   138,   254,    98,    63,   256,   257,   258,    43,   100,
    57,   102,   103,   260,   104,   105,   189,    28,   190,   191,
    71,   192,   193,   194,    20,   265,    53,    20,   195,   196,
   197,   198,   199,   200,   267,    45,    46,    12,    33,    11,
    37,    39,    40,    41,    42,    44,    47,    20,    49,    50,
    52,   269,   270,   271,   272,    45,    46,     9,    33,    71,
    37,    39,    40,    41,    42,    44,    47,    43,    49,    50,
    52,   nil,   nil,   nil,   nil,   nil,    28,   nil,   nil,  -141,
  -141,     8,  -141,  -141,  -141,   nil,   nil,    43,   nil,  -141,
  -141,  -141,  -141,  -141,  -141,   nil,    28,   nil,   nil,   nil,
   nil,     8,   nil,   nil,   nil,   nil,    20,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    45,    46,   nil,    33,   nil,    37,
    39,    40,    41,    42,    44,    47,    20,    49,    50,    52,
   nil,   nil,   nil,   nil,    45,    46,   nil,    33,   nil,    37,
    39,    40,    41,    42,    44,    47,    43,    49,    50,    52,
   nil,   nil,   nil,   nil,   nil,    28,   nil,   nil,   nil,   nil,
   nil,    14,   nil,   nil,   nil,   nil,    43,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   228,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    20,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    45,    46,   nil,    33,   nil,    37,    39,
    40,    41,    42,    44,    47,   206,    49,    50,    52,   nil,
   nil,   nil,   nil,    45,    46,   nil,    33,   nil,    37,    39,
    40,    41,    42,    44,    47,    43,    49,    50,    52,   nil,
   nil,   nil,   nil,   nil,   145,   nil,   nil,   nil,   nil,     8,
   nil,   nil,   nil,   nil,   nil,    43,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   228,   nil,   153,   nil,   nil,   nil,
   nil,   nil,   nil,   149,   150,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    45,    46,   nil,    33,   nil,    37,    39,    40,
    41,    42,    44,    47,   206,    49,    50,    52,   nil,   nil,
   nil,   nil,    45,    46,   nil,    33,   nil,    37,    39,    40,
    41,    42,    44,    47,    43,    49,    50,    52,   nil,   nil,
   nil,   nil,   nil,   145,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,
   nil,   nil,   nil,   nil,   nil,   153,   nil,   nil,   145,   nil,
   nil,   nil,   149,   150,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    45,    46,   nil,    33,   nil,    37,    39,    40,    41,
    42,    44,    47,    43,    49,    50,    52,   149,   206,   nil,
   nil,   nil,    28,   nil,   nil,   nil,    45,    46,   nil,    33,
   nil,    37,    39,    40,    41,    42,    44,    47,    43,    49,
    50,    52,   nil,   nil,   nil,   nil,   nil,    28,   nil,   nil,
   nil,   nil,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    33,   nil,    37,    39,    40,    41,    42,
    44,    47,    43,    49,    50,    52,   nil,    20,   nil,   nil,
   nil,    28,   nil,   nil,   nil,    45,    46,   nil,    33,   nil,
    37,    39,    40,    41,    42,    44,    47,    43,    49,    50,
    52,   nil,   nil,   nil,   nil,   nil,    28,   nil,   nil,   nil,
   nil,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,
    46,   nil,    33,   nil,    37,    39,    40,    41,    42,    44,
    47,    43,    49,    50,    52,   nil,    20,   nil,   nil,   nil,
   145,   nil,   nil,   nil,    45,    46,   nil,    33,   nil,    37,
    39,    40,    41,    42,    44,    47,    43,    49,    50,    52,
   nil,   nil,   153,   nil,   nil,    28,   nil,   nil,   nil,   149,
   150,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,
   nil,    33,   nil,    37,    39,    40,    41,    42,    44,    47,
    43,    49,    50,    52,   nil,    20,   nil,   nil,   nil,   228,
   nil,   nil,   nil,    45,    46,   nil,    33,   nil,    37,    39,
    40,    41,    42,    44,    47,    43,    49,    50,    52,   nil,
   nil,   nil,   nil,   nil,   228,   nil,   nil,   nil,   nil,   206,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,   nil,
    33,   nil,    37,    39,    40,    41,    42,    44,    47,    43,
    49,    50,    52,   nil,   206,   nil,   nil,   nil,   228,   nil,
   nil,   nil,    45,    46,   nil,    33,   nil,    37,    39,    40,
    41,    42,    44,    47,    43,    49,    50,    52,   nil,   nil,
   nil,   nil,   nil,   228,   nil,   nil,   nil,   nil,   206,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,   nil,    33,
   nil,    37,    39,    40,    41,    42,    44,    47,    43,    49,
    50,    52,   nil,   206,   nil,   nil,   nil,   228,   nil,   nil,
   nil,    45,    46,   nil,    33,   nil,    37,    39,    40,    41,
    42,    44,    47,    43,    49,    50,    52,   nil,   nil,   nil,
   nil,   nil,   228,   nil,   nil,   nil,   nil,   206,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    45,    46,   nil,    33,   nil,
    37,    39,    40,    41,    42,    44,    47,    43,    49,    50,
    52,   nil,   206,   nil,   nil,   nil,    28,   nil,   nil,   nil,
    45,    46,   119,    33,   nil,    37,    39,    40,    41,    42,
    44,    47,    43,    49,    50,    52,   nil,   nil,   nil,   nil,
   nil,    28,   nil,   nil,   nil,   nil,    20,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    45,    46,   nil,    33,   nil,    37,
    39,    40,    41,    42,    44,    47,    43,    49,    50,    52,
   nil,    20,   nil,   nil,   nil,    28,   nil,   nil,   nil,    45,
    46,   nil,    33,   nil,    37,    39,    40,    41,    42,    44,
    47,    43,    49,    50,    52,   nil,   nil,   nil,   nil,   nil,
    28,   nil,   nil,   nil,   nil,    20,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    45,    46,   nil,    33,   nil,    37,    39,
    40,    41,    42,    44,    47,    43,    49,    50,    52,   nil,
    20,   nil,   nil,   nil,   228,   nil,   nil,   nil,    45,    46,
   nil,    33,   nil,    37,    39,    40,    41,    42,    44,    47,
    43,    49,    50,    52,   nil,   nil,   nil,   nil,   nil,    28,
   nil,   nil,   nil,   nil,   206,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    45,    46,   nil,    33,   nil,    37,    39,    40,
    41,    42,    44,    47,    43,    49,    50,    52,   nil,    20,
   nil,   nil,   nil,   228,   nil,   nil,   nil,    45,    46,   nil,
    33,   nil,    37,    39,    40,    41,    42,    44,    47,    43,
    49,    50,    52,   nil,   nil,   nil,   nil,   nil,    28,   nil,
   nil,   nil,   nil,   206,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    45,    46,   nil,    33,   nil,    37,    39,    40,    41,
    42,    44,    47,    43,    49,    50,    52,   nil,    20,   nil,
   nil,   nil,   145,   nil,   nil,   nil,    45,    46,   nil,    33,
   nil,    37,    39,    40,    41,    42,    44,    47,    43,    49,
    50,    52,   nil,   nil,   153,   nil,   nil,    28,   nil,   nil,
   nil,   149,   150,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    45,    46,   nil,    33,   nil,    37,    39,    40,    41,    42,
    44,    47,    43,    49,    50,    52,   nil,    20,   nil,   nil,
   nil,    28,   nil,   nil,   nil,    45,    46,   nil,    33,   nil,
    37,    39,    40,    41,    42,    44,    47,    43,    49,    50,
    52,   nil,   nil,   nil,   nil,   nil,    28,   nil,   nil,   nil,
   nil,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,
    46,   nil,    33,   nil,    37,    39,    40,    41,    42,    44,
    47,    43,    49,    50,    52,   nil,    20,   nil,   nil,   nil,
   145,   nil,   nil,   nil,    45,    46,   nil,    33,   nil,    37,
    39,    40,    41,    42,    44,    47,   nil,    49,    50,    52,
   nil,   nil,   153,    43,   nil,   nil,   nil,   nil,   nil,   149,
   150,   nil,   145,   nil,   nil,   nil,   nil,   nil,    45,    46,
   nil,    33,   nil,    37,    39,    40,    41,    42,    44,    47,
   nil,    49,    50,    52,   153,   nil,   nil,   nil,   nil,   nil,
   nil,   149,   150,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    45,    46,   nil,    33,   nil,    37,    39,    40,    41,    42,
    44,    47,   nil,    49,    50,    52 ]

racc_action_check = [
    73,   150,   206,    22,   187,    19,   128,    57,    59,    73,
   194,    13,   128,    57,    10,     0,   194,   100,     0,    10,
   265,   190,   119,   190,   190,    47,    47,    19,   120,   265,
    59,    21,    21,   121,   187,    91,    91,    22,   122,    73,
   258,   123,   124,   150,   206,   128,    57,    73,    73,   258,
    73,   126,    73,    73,    73,    73,    73,    73,    73,   265,
    73,    73,    73,   127,    99,   133,   134,   265,   265,    98,
   265,   137,   265,   265,   265,   265,   265,   265,   265,   258,
   265,   265,   265,   138,   143,   144,    96,   258,   258,   146,
   258,   104,   258,   258,   258,   258,   258,   258,   258,   135,
   258,   258,   258,   149,   182,    89,   151,    88,   135,   174,
   175,    87,   179,   110,   180,    84,    78,   185,   182,     8,
   182,   182,   186,   182,   182,   182,   182,   110,     8,   110,
   110,    77,   110,   110,     8,     8,   188,   103,   135,   254,
   108,    69,   192,    66,    65,    56,   135,   135,   254,   135,
    55,   135,   135,   135,   135,   135,   135,   135,     8,   135,
   135,   135,    52,   106,    42,    41,     8,     8,   201,     8,
    40,     8,     8,     8,     8,     8,     8,     8,   254,     8,
     8,     8,    39,    37,   209,    34,   254,   254,   105,   254,
   217,   254,   254,   254,   254,   254,   254,   254,    97,   254,
   254,   254,   218,   219,   224,    58,    20,    97,   226,    58,
    18,   101,   229,    58,    12,   234,   242,   243,   245,    58,
    11,    58,    58,   246,    58,    58,   248,   245,   148,   148,
   249,   148,   148,   148,   250,   251,     9,    97,   148,   148,
   148,   148,   148,   148,   255,    97,    97,     7,    97,     5,
    97,    97,    97,    97,    97,    97,    97,   245,    97,    97,
    97,   259,   260,   261,   262,   245,   245,     1,   245,   272,
   245,   245,   245,   245,   245,   245,   245,   230,   245,   245,
   245,   nil,   nil,   nil,   nil,   nil,   230,   nil,   nil,   257,
   257,   230,   257,   257,   257,   nil,   nil,   228,   nil,   257,
   257,   257,   257,   257,   257,   nil,   228,   nil,   nil,   nil,
   nil,   228,   nil,   nil,   nil,   nil,   230,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   230,   230,   nil,   230,   nil,   230,
   230,   230,   230,   230,   230,   230,   228,   230,   230,   230,
   nil,   nil,   nil,   nil,   228,   228,   nil,   228,   nil,   228,
   228,   228,   228,   228,   228,   228,    16,   228,   228,   228,
   nil,   nil,   nil,   nil,   nil,    16,   nil,   nil,   nil,   nil,
   nil,    16,   nil,   nil,   nil,   nil,   227,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   227,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    16,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    16,    16,   nil,    16,   nil,    16,    16,
    16,    16,    16,    16,    16,   227,    16,    16,    16,   nil,
   nil,   nil,   nil,   227,   227,   nil,   227,   nil,   227,   227,
   227,   227,   227,   227,   227,   145,   227,   227,   227,   nil,
   nil,   nil,   nil,   nil,   145,   nil,   nil,   nil,   nil,   145,
   nil,   nil,   nil,   nil,   nil,   225,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   225,   nil,   145,   nil,   nil,   nil,
   nil,   nil,   nil,   145,   145,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   145,   145,   nil,   145,   nil,   145,   145,   145,
   145,   145,   145,   145,   225,   145,   145,   145,   nil,   nil,
   nil,   nil,   225,   225,   nil,   225,   nil,   225,   225,   225,
   225,   225,   225,   225,   216,   225,   225,   225,   nil,   nil,
   nil,   nil,   nil,   216,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   153,
   nil,   nil,   nil,   nil,   nil,   216,   nil,   nil,   153,   nil,
   nil,   nil,   216,   216,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   216,   216,   nil,   216,   nil,   216,   216,   216,   216,
   216,   216,   216,    23,   216,   216,   216,   153,   153,   nil,
   nil,   nil,    23,   nil,   nil,   nil,   153,   153,   nil,   153,
   nil,   153,   153,   153,   153,   153,   153,   153,    28,   153,
   153,   153,   nil,   nil,   nil,   nil,   nil,    28,   nil,   nil,
   nil,   nil,    23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    23,   nil,    23,    23,    23,    23,    23,
    23,    23,   212,    23,    23,    23,   nil,    28,   nil,   nil,
   nil,   212,   nil,   nil,   nil,    28,    28,   nil,    28,   nil,
    28,    28,    28,    28,    28,    28,    28,   178,    28,    28,
    28,   nil,   nil,   nil,   nil,   nil,   178,   nil,   nil,   nil,
   nil,   212,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   212,
   212,   nil,   212,   nil,   212,   212,   212,   212,   212,   212,
   212,   205,   212,   212,   212,   nil,   178,   nil,   nil,   nil,
   205,   nil,   nil,   nil,   178,   178,   nil,   178,   nil,   178,
   178,   178,   178,   178,   178,   178,   204,   178,   178,   178,
   nil,   nil,   205,   nil,   nil,   204,   nil,   nil,   nil,   205,
   205,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   205,   205,
   nil,   205,   nil,   205,   205,   205,   205,   205,   205,   205,
   200,   205,   205,   205,   nil,   204,   nil,   nil,   nil,   200,
   nil,   nil,   nil,   204,   204,   nil,   204,   nil,   204,   204,
   204,   204,   204,   204,   204,   199,   204,   204,   204,   nil,
   nil,   nil,   nil,   nil,   199,   nil,   nil,   nil,   nil,   200,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   200,   200,   nil,
   200,   nil,   200,   200,   200,   200,   200,   200,   200,   198,
   200,   200,   200,   nil,   199,   nil,   nil,   nil,   198,   nil,
   nil,   nil,   199,   199,   nil,   199,   nil,   199,   199,   199,
   199,   199,   199,   199,   197,   199,   199,   199,   nil,   nil,
   nil,   nil,   nil,   197,   nil,   nil,   nil,   nil,   198,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   198,   198,   nil,   198,
   nil,   198,   198,   198,   198,   198,   198,   198,   196,   198,
   198,   198,   nil,   197,   nil,   nil,   nil,   196,   nil,   nil,
   nil,   197,   197,   nil,   197,   nil,   197,   197,   197,   197,
   197,   197,   197,   195,   197,   197,   197,   nil,   nil,   nil,
   nil,   nil,   195,   nil,   nil,   nil,   nil,   196,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   196,   196,   nil,   196,   nil,
   196,   196,   196,   196,   196,   196,   196,    79,   196,   196,
   196,   nil,   195,   nil,   nil,   nil,    79,   nil,   nil,   nil,
   195,   195,    79,   195,   nil,   195,   195,   195,   195,   195,
   195,   195,    83,   195,   195,   195,   nil,   nil,   nil,   nil,
   nil,    83,   nil,   nil,   nil,   nil,    79,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    79,    79,   nil,    79,   nil,    79,
    79,    79,    79,    79,    79,    79,    82,    79,    79,    79,
   nil,    83,   nil,   nil,   nil,    82,   nil,   nil,   nil,    83,
    83,   nil,    83,   nil,    83,    83,    83,    83,    83,    83,
    83,    81,    83,    83,    83,   nil,   nil,   nil,   nil,   nil,
    81,   nil,   nil,   nil,   nil,    82,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    82,    82,   nil,    82,   nil,    82,    82,
    82,    82,    82,    82,    82,   193,    82,    82,    82,   nil,
    81,   nil,   nil,   nil,   193,   nil,   nil,   nil,    81,    81,
   nil,    81,   nil,    81,    81,    81,    81,    81,    81,    81,
    68,    81,    81,    81,   nil,   nil,   nil,   nil,   nil,    68,
   nil,   nil,   nil,   nil,   193,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   193,   193,   nil,   193,   nil,   193,   193,   193,
   193,   193,   193,   193,   191,   193,   193,   193,   nil,    68,
   nil,   nil,   nil,   191,   nil,   nil,   nil,    68,    68,   nil,
    68,   nil,    68,    68,    68,    68,    68,    68,    68,    72,
    68,    68,    68,   nil,   nil,   nil,   nil,   nil,    72,   nil,
   nil,   nil,   nil,   191,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   191,   191,   nil,   191,   nil,   191,   191,   191,   191,
   191,   191,   191,   189,   191,   191,   191,   nil,    72,   nil,
   nil,   nil,   189,   nil,   nil,   nil,    72,    72,   nil,    72,
   nil,    72,    72,    72,    72,    72,    72,    72,    74,    72,
    72,    72,   nil,   nil,   189,   nil,   nil,    74,   nil,   nil,
   nil,   189,   189,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   189,   189,   nil,   189,   nil,   189,   189,   189,   189,   189,
   189,   189,    75,   189,   189,   189,   nil,    74,   nil,   nil,
   nil,    75,   nil,   nil,   nil,    74,    74,   nil,    74,   nil,
    74,    74,    74,    74,    74,    74,    74,    80,    74,    74,
    74,   nil,   nil,   nil,   nil,   nil,    80,   nil,   nil,   nil,
   nil,    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    75,
    75,   nil,    75,   nil,    75,    75,    75,    75,    75,    75,
    75,   184,    75,    75,    75,   nil,    80,   nil,   nil,   nil,
   184,   nil,   nil,   nil,    80,    80,   nil,    80,   nil,    80,
    80,    80,    80,    80,    80,    80,   nil,    80,    80,    80,
   nil,   nil,   184,   109,   nil,   nil,   nil,   nil,   nil,   184,
   184,   nil,   109,   nil,   nil,   nil,   nil,   nil,   184,   184,
   nil,   184,   nil,   184,   184,   184,   184,   184,   184,   184,
   nil,   184,   184,   184,   109,   nil,   nil,   nil,   nil,   nil,
   nil,   109,   109,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   109,   109,   nil,   109,   nil,   109,   109,   109,   109,   109,
   109,   109,   nil,   109,   109,   109 ]

racc_action_pointer = [
    -2,   267,   nil,   nil,   nil,   247,   nil,   229,   113,   236,
    10,   217,   169,   -13,   nil,   nil,   350,   nil,   199,   -18,
   149,   -22,   -18,   567,   nil,   nil,   nil,   nil,   592,   nil,
   nil,   nil,   nil,   nil,   128,   nil,   nil,   168,   nil,   167,
   155,   150,   149,   nil,   nil,   nil,   nil,   -39,   nil,   nil,
   nil,   nil,    93,   nil,   nil,   145,   139,     1,   194,   -15,
   nil,   nil,   nil,   nil,   nil,   110,    98,   nil,  1064,    96,
   nil,   nil,  1123,    -6,  1182,  1216,   nil,   115,    71,   921,
  1241,  1005,   980,   946,    51,   nil,   nil,   105,   100,    94,
   nil,    22,   nil,   nil,   nil,   nil,    67,   192,    54,    19,
    -9,   185,   nil,   108,    62,   159,   118,   nil,   105,  1307,
   102,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,
    12,    17,    22,    25,    26,   nil,    44,    59,     0,   nil,
   nil,   nil,   nil,    49,    55,    93,   nil,    26,    38,   nil,
   nil,   nil,   nil,    48,    82,   429,    43,   nil,   191,    88,
   -14,    67,   nil,   533,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   101,   100,   nil,   nil,   651,    96,
   103,   nil,    93,   nil,  1275,    72,   106,   -12,   120,  1157,
   -17,  1098,   127,  1039,   -27,   887,   862,   828,   803,   769,
   744,   148,   nil,   nil,   710,   685,   -13,   nil,   nil,   178,
   nil,   nil,   626,   nil,   nil,   nil,   508,   175,   156,   192,
   nil,   nil,   nil,   nil,   165,   449,   193,   370,   291,   173,
   271,   nil,   nil,   nil,   172,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   200,   206,   nil,   212,   216,   nil,   180,   185,
   189,   196,   nil,   nil,   133,   228,   nil,   252,    34,   245,
   254,   247,   253,   nil,   nil,    14,   nil,   nil,   nil,   nil,
   nil,   nil,   224,   nil,   nil ]

racc_action_default = [
  -157,  -157,    -1,    -2,    -3,    -5,   -20,  -157,  -157,  -157,
    -7,  -157,  -157,   -28,   -29,   -30,  -157,   -32,   -34,   -37,
  -149,  -116,  -119,  -157,  -121,  -122,  -123,  -124,  -157,  -126,
  -127,  -128,  -129,  -130,  -157,  -132,  -133,  -157,  -135,  -157,
  -157,  -157,  -157,  -145,  -146,  -147,  -148,  -157,  -152,  -153,
  -154,  -155,  -157,   275,    -4,  -157,  -157,  -157,  -157,   -42,
   -43,   -45,   -46,   -85,   -27,   -62,  -157,   -31,  -157,  -157,
   -36,  -149,  -157,  -157,  -157,  -157,  -120,  -157,  -157,  -157,
  -157,  -157,  -157,  -157,  -157,  -151,  -156,  -157,  -157,    -6,
   -11,   -16,   -13,   -14,   -15,   -21,  -157,  -157,  -157,  -157,
  -157,  -157,   -50,   -52,   -54,   -55,  -157,   -41,   -64,  -157,
   -39,   -33,   -35,  -114,  -115,  -117,  -118,  -125,  -131,  -157,
  -157,  -157,  -157,  -157,  -157,  -150,  -157,  -157,  -157,   -12,
   -17,   -18,   -22,  -157,   -25,  -157,   -47,  -157,  -157,   -51,
   -53,   -56,   -40,   -69,  -157,  -157,   -63,   -71,  -157,  -157,
  -149,   -88,   -90,  -157,   -93,   -94,   -95,   -96,   -98,   -99,
  -100,  -101,  -102,  -103,  -110,  -111,  -112,  -113,  -134,  -136,
  -137,  -138,  -139,  -140,  -157,  -157,   -10,   -23,  -157,  -157,
   -79,   -48,  -157,   -38,  -157,  -157,  -157,  -157,  -112,  -157,
  -157,  -157,  -157,  -157,  -157,  -157,  -157,  -157,  -157,  -157,
  -157,  -157,   -44,   -84,  -157,  -157,  -149,   -92,    -8,  -157,
   -24,   -26,  -157,   -49,   -57,   -58,  -157,  -157,   -70,   -65,
   -67,   -68,   -19,   -97,   -89,  -157,  -157,  -157,  -157,  -157,
  -157,   -75,   -76,   -81,  -157,   -83,  -104,  -105,  -106,  -107,
  -108,  -109,  -157,  -143,   -91,  -157,  -157,   -78,   -59,  -157,
  -157,  -157,   -74,   -80,  -157,  -157,   -82,  -142,  -157,  -157,
  -157,  -157,   -61,   -87,   -66,  -157,   -73,   -77,  -144,  -141,
    -9,   -60,  -157,   -72,   -86 ]

racc_goto_table = [
    70,    19,   179,    58,   133,   146,    59,    90,   229,    19,
   233,   202,   236,   237,   238,   239,   240,   241,   221,   220,
    95,    77,   231,   242,    17,   115,   116,    65,    13,    64,
   129,   111,    67,    96,   108,   143,   183,    89,    92,   203,
   107,   187,   251,   213,   253,   214,   215,    54,   261,   262,
   112,   219,    10,     5,   202,     4,   252,   110,   132,   118,
    59,    19,     3,   224,   259,   113,   114,   244,   207,     2,
    76,   266,   120,   121,   122,   123,   124,   268,   176,   247,
   218,     1,   273,   221,   264,   210,   nil,   142,   202,   nil,
   134,   nil,   nil,   136,   nil,   nil,   nil,   255,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    92,
   nil,   nil,   248,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   180,   182,
   nil,   181,    59,   nil,   nil,   nil,   nil,   nil,   188,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   134,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   243,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   180,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    77,   nil,   180,   nil,   nil,   nil,   nil,   nil,   nil,
   263,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   243,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   243,   nil,   274 ]

racc_goto_check = [
    12,    19,    20,    15,    18,    39,    30,     9,    47,    19,
    47,    13,    47,    47,    47,    47,    47,    47,    44,    43,
    16,    19,    49,    74,    23,    62,    62,    26,    21,    22,
    11,    24,    23,    17,    27,    28,    29,     8,    12,    32,
    12,    39,    47,    36,    47,    37,    38,     7,    40,    41,
    12,    42,     6,     5,    13,     4,    49,    15,    16,    12,
    30,    19,     3,    53,    74,    19,    19,    54,    55,     2,
    65,    47,    19,    19,    19,    19,    19,    74,     9,    20,
    39,     1,    47,    44,    43,    18,   nil,    12,    13,   nil,
    19,   nil,   nil,    30,   nil,   nil,   nil,    20,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,
   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,    15,
   nil,    30,    30,   nil,   nil,   nil,   nil,   nil,    19,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    19,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    19,   nil,    19,   nil,   nil,   nil,   nil,   nil,   nil,
    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    19,   nil,    12 ]

racc_goto_pointer = [
   nil,    81,    69,    62,    55,    53,    47,    37,   -20,   -50,
   nil,   -61,   -19,  -138,   nil,    -9,   -38,   -25,   -93,    -7,
  -133,    20,    16,    16,   -37,   nil,    14,   -31,   -73,  -107,
    -6,   nil,  -110,   nil,   nil,   nil,  -139,  -137,  -136,  -104,
  -201,  -200,  -134,  -166,  -167,   nil,   nil,  -183,   nil,  -170,
   nil,   nil,   nil,  -126,  -138,   -85,   nil,   nil,   nil,   nil,
   nil,   nil,   -49,   nil,   nil,    47,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  -181,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   186,   nil,   nil,   nil,   nil,
    91,   nil,    35,   147,     6,   nil,   nil,   nil,   nil,   166,
   nil,   nil,   nil,   nil,    15,    18,   nil,   nil,   nil,   nil,
    36,    60,   232,    61,    62,   101,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    26,   165,   159,   148,   160,   nil,
   161,   162,   163,   151,   152,   154,   155,   156,   157,   158,
   164,   167,    21,    22,    23,    24,    25,    27,    29,    30,
    31,    32,    34,    38,   nil,    48,    51 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 71, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  3, 73, :_reduce_4,
  0, 76, :_reduce_none,
  3, 76, :_reduce_6,
  0, 77, :_reduce_none,
  5, 77, :_reduce_8,
  8, 77, :_reduce_9,
  3, 78, :_reduce_10,
  1, 78, :_reduce_none,
  2, 79, :_reduce_12,
  1, 80, :_reduce_none,
  1, 80, :_reduce_14,
  1, 80, :_reduce_15,
  0, 81, :_reduce_16,
  1, 81, :_reduce_17,
  1, 81, :_reduce_18,
  3, 83, :_reduce_19,
  1, 75, :_reduce_none,
  4, 74, :_reduce_21,
  5, 74, :_reduce_22,
  3, 87, :_reduce_23,
  3, 88, :_reduce_24,
  1, 88, :_reduce_none,
  4, 86, :_reduce_26,
  3, 84, :_reduce_27,
  2, 84, :_reduce_28,
  1, 93, :_reduce_29,
  1, 93, :_reduce_30,
  2, 91, :_reduce_31,
  1, 91, :_reduce_32,
  3, 94, :_reduce_33,
  1, 94, :_reduce_none,
  3, 95, :_reduce_35,
  2, 95, :_reduce_36,
  1, 95, :_reduce_none,
  4, 92, :_reduce_38,
  2, 96, :_reduce_39,
  3, 85, :_reduce_40,
  2, 85, :_reduce_41,
  1, 85, :_reduce_none,
  1, 85, :_reduce_none,
  1, 102, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  3, 103, :_reduce_47,
  4, 103, :_reduce_48,
  5, 104, :_reduce_49,
  1, 105, :_reduce_50,
  2, 105, :_reduce_51,
  1, 105, :_reduce_52,
  2, 105, :_reduce_53,
  1, 105, :_reduce_54,
  1, 105, :_reduce_55,
  2, 105, :_reduce_56,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  2, 107, :_reduce_59,
  4, 108, :_reduce_60,
  1, 110, :_reduce_none,
  0, 97, :_reduce_none,
  2, 97, :_reduce_63,
  0, 98, :_reduce_none,
  3, 98, :_reduce_65,
  3, 112, :_reduce_66,
  1, 112, :_reduce_none,
  1, 113, :_reduce_none,
  0, 99, :_reduce_none,
  2, 99, :_reduce_70,
  1, 115, :_reduce_none,
  6, 116, :_reduce_72,
  5, 116, :_reduce_73,
  4, 118, :_reduce_74,
  3, 118, :_reduce_75,
  1, 119, :_reduce_none,
  3, 119, :_reduce_77,
  3, 90, :_reduce_78,
  1, 90, :_reduce_none,
  4, 120, :_reduce_80,
  3, 120, :_reduce_81,
  4, 121, :_reduce_82,
  3, 121, :_reduce_83,
  2, 122, :_reduce_84,
  1, 100, :_reduce_85,
  3, 111, :_reduce_86,
  1, 111, :_reduce_none,
  1, 109, :_reduce_none,
  3, 109, :_reduce_89,
  1, 123, :_reduce_none,
  3, 123, :_reduce_91,
  2, 124, :_reduce_92,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 125, :_reduce_none,
  1, 127, :_reduce_none,
  3, 127, :_reduce_97,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  3, 129, :_reduce_104,
  3, 129, :_reduce_105,
  3, 129, :_reduce_106,
  3, 129, :_reduce_107,
  3, 129, :_reduce_108,
  3, 129, :_reduce_109,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  3, 89, :_reduce_114,
  3, 89, :_reduce_115,
  1, 89, :_reduce_none,
  3, 132, :_reduce_117,
  3, 132, :_reduce_118,
  1, 132, :_reduce_none,
  2, 133, :_reduce_120,
  1, 133, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  3, 135, :_reduce_125,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 139, :_reduce_130,
  3, 114, :_reduce_131,
  1, 114, :_reduce_none,
  1, 142, :_reduce_none,
  4, 137, :_reduce_134,
  1, 137, :_reduce_none,
  4, 143, :_reduce_136,
  4, 143, :_reduce_137,
  4, 143, :_reduce_138,
  4, 143, :_reduce_139,
  4, 143, :_reduce_140,
  4, 131, :_reduce_141,
  4, 126, :_reduce_142,
  1, 144, :_reduce_none,
  3, 144, :_reduce_144,
  1, 140, :_reduce_145,
  1, 140, :_reduce_146,
  1, 134, :_reduce_147,
  1, 134, :_reduce_148,
  1, 82, :_reduce_149,
  3, 141, :_reduce_150,
  2, 141, :_reduce_151,
  1, 141, :_reduce_none,
  1, 141, :_reduce_153,
  1, 141, :_reduce_154,
  1, 145, :_reduce_none,
  2, 146, :_reduce_156 ]

racc_reduce_n = 157

racc_shift_n = 275

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :FETCH => 4,
  :FIRST => 5,
  :unsigned_integer => 6,
  :ROWS => 7,
  :ONLY => 8,
  :OFFSET => 9,
  :NEXT => 10,
  :comma => 11,
  :built_in_function => 12,
  :ASC => 13,
  :DESC => 14,
  :left_paren => 15,
  :right_paren => 16,
  :INSERT => 17,
  :INTO => 18,
  :VALUES => 19,
  :SELECT => 20,
  :asterisk => 21,
  :DISTINCT => 22,
  :AS => 23,
  :FROM => 24,
  :CROSS => 25,
  :JOIN => 26,
  :INNER => 27,
  :LEFT => 28,
  :OUTER => 29,
  :RIGHT => 30,
  :FULL => 31,
  :ON => 32,
  :USING => 33,
  :WHERE => 34,
  :GROUP => 35,
  :HAVING => 36,
  :NOT => 37,
  :BETWEEN => 38,
  :AND => 39,
  :IN => 40,
  :LIKE => 41,
  :IS => 42,
  :NULL => 43,
  :EXISTS => 44,
  :identifier => 45,
  :OR => 46,
  :equals_operator => 47,
  :not_equals_operator => 48,
  :less_than_operator => 49,
  :greater_than_operator => 50,
  :less_than_or_equals_operator => 51,
  :greater_than_or_equals_operator => 52,
  :plus_sign => 53,
  :minus_sign => 54,
  :solidus => 55,
  :CURRENT_USER => 56,
  :period => 57,
  :COUNT => 58,
  :AVG => 59,
  :MAX => 60,
  :MIN => 61,
  :SUM => 62,
  :unsigned_float => 63,
  :quote => 64,
  :character_string_literal => 65,
  :true_literal => 66,
  :false_literal => 67,
  :DATE => 68,
  :date_string => 69 }

racc_nt_base = 70

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "FETCH",
  "FIRST",
  "unsigned_integer",
  "ROWS",
  "ONLY",
  "OFFSET",
  "NEXT",
  "comma",
  "built_in_function",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "asterisk",
  "DISTINCT",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "unsigned_float",
  "quote",
  "character_string_literal",
  "true_literal",
  "false_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "fetch_only_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_name",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "distinct_select_list",
  "table_expression",
  "select_list",
  "select_sublist",
  "derived_column",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "column_reference",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_function",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "general_function",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "general_literal",
  "qualifier",
  "general_set_function",
  "argument_list",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1], val[2]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 22)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(0, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_9(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(val[1], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 26)
  def _reduce_10(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 11 omitted

module_eval(<<'.,.,', 'parser.racc', 30)
  def _reduce_12(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.racc', 34)
  def _reduce_14(val, _values, result)
     result = SQLParser::Statement::BuiltInFunction.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 35)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_24(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 25 omitted

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_27(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::Distinct.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 74)
  def _reduce_32(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_33(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 34 omitted

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_38(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_39(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_40(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_41(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_49(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 112)
  def _reduce_50(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 113)
  def _reduce_51(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_53(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_54(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 57 omitted

# reduce 58 omitted

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

module_eval(<<'.,.,', 'parser.racc', 135)
  def _reduce_63(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 64 omitted

module_eval(<<'.,.,', 'parser.racc', 139)
  def _reduce_65(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_66(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 150)
  def _reduce_70(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 71 omitted

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_72(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_73(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_74(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_75(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 76 omitted

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_77(val, _values, result)
     result = SQLParser::Statement::InValueList.new(Array(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 169)
  def _reduce_78(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 79 omitted

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 180)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_84(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_86(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 87 omitted

# reduce 88 omitted

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_89(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 90 omitted

module_eval(<<'.,.,', 'parser.racc', 202)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 205)
  def _reduce_92(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

module_eval(<<'.,.,', 'parser.racc', 215)
  def _reduce_97(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_104(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_105(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 229)
  def _reduce_106(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_107(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_108(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_109(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_114(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_115(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 116 omitted

module_eval(<<'.,.,', 'parser.racc', 250)
  def _reduce_117(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 251)
  def _reduce_118(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 119 omitted

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_120(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_125(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_130(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_131(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_134(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 135 omitted

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_136(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_138(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_139(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_140(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::FunctionCall.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 298)
  def _reduce_142(val, _values, result)
     result = SQLParser::Statement::BooleanFunction.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 143 omitted

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_144(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_145(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_146(val, _values, result)
    result = SQLParser::Statement::Float.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_147(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_148(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_149(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_150(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_151(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 152 omitted

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_153(val, _values, result)
     result = SQLParser::Statement::True.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 323)
  def _reduce_154(val, _values, result)
     result = SQLParser::Statement::False.new 
    result
  end
.,.,

# reduce 155 omitted

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_156(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
