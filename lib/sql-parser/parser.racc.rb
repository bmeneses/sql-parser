#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 352)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    45,   197,   246,    80,   199,   100,   100,   223,   105,    30,
   112,    99,    99,    72,   233,   200,    58,    45,    91,    90,
   234,    59,   106,   248,   108,   109,   227,   110,   111,   255,
   256,    74,    74,     7,    45,    74,     8,   199,   224,    20,
   225,   226,    81,    30,    74,    74,   194,    21,   -85,   -85,
   163,   164,    47,    48,   174,    35,   201,    39,    41,    42,
    43,    44,    46,    49,    21,    52,    53,    55,   198,    47,
    48,   173,    35,    20,    39,    41,    42,    43,    44,    46,
    49,    21,    52,    53,    55,   172,    47,    48,   171,    35,
   203,    39,    41,    42,    43,    44,    46,    49,    45,    52,
    53,    55,   105,   119,   120,    76,   204,   122,    78,    79,
   205,   206,   207,   208,   209,    45,   106,   210,   108,   109,
   170,   110,   111,   212,    30,   213,    66,    66,    66,   130,
    14,    16,    45,   219,   220,   199,   125,   126,   221,   222,
   168,   227,   150,   104,   161,    21,   229,   160,   159,   158,
    47,    48,    74,    35,    20,    39,    41,    42,    43,    44,
    46,    49,    21,    52,    53,    55,   150,    47,    48,    74,
    35,   201,    39,    41,    42,    43,    44,    46,    49,    21,
    52,    53,    55,    66,    47,    48,   115,    35,     8,    39,
    41,    42,    43,    44,    46,    49,    45,    52,    53,    55,
   105,    94,    93,    92,   103,   122,    89,    88,   104,   247,
     8,   177,    87,   250,   106,   251,   108,   109,    86,   110,
   111,    85,    20,    84,   229,    76,   -85,   130,   264,    45,
    71,   266,   267,   268,   125,   126,   198,    69,   122,   270,
    66,    60,   273,    21,   199,   274,   275,    56,    47,    48,
   277,    35,    12,    39,    41,    42,    43,    44,    46,    49,
   130,    52,    53,    55,    45,    11,   279,   125,   126,   280,
   199,    74,    20,    30,     9,   286,    21,   287,   288,    74,
   nil,    47,    48,   nil,    35,   nil,    39,    41,    42,    43,
    44,    46,    49,    45,    52,    53,    55,   nil,   nil,   nil,
   nil,   nil,    30,    20,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    21,   nil,   nil,   nil,   nil,    47,    48,   nil,    35,
   nil,    39,    41,    42,    43,    44,    46,    49,    45,    52,
    53,    55,    20,   nil,   nil,   nil,   nil,    30,   nil,   nil,
    21,   nil,   nil,    14,   nil,    47,    48,   nil,    35,   nil,
    39,    41,    42,    43,    44,    46,    49,    45,    52,    53,
    55,   nil,   nil,   nil,   nil,   nil,    30,    20,   nil,   nil,
   nil,     8,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
    47,    48,   nil,    35,   nil,    39,    41,    42,    43,    44,
    46,    49,    45,    52,    53,    55,    20,   nil,   nil,   nil,
   nil,   122,   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,
    48,   nil,    35,   nil,    39,    41,    42,    43,    44,    46,
    49,   nil,    52,    53,    55,   nil,    45,   nil,   nil,   nil,
   125,   201,   nil,   nil,   nil,    30,   nil,   nil,   nil,    21,
     8,   nil,   nil,   nil,    47,    48,   nil,    35,   nil,    39,
    41,    42,    43,    44,    46,    49,   nil,    52,    53,    55,
    45,   nil,   nil,   nil,   nil,    20,   nil,   nil,   nil,   227,
   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,    48,
   nil,    35,   nil,    39,    41,    42,    43,    44,    46,    49,
   nil,    52,    53,    55,    45,   nil,   nil,   nil,   nil,   201,
   nil,   nil,   nil,    30,   nil,   nil,   nil,    21,   nil,   nil,
   nil,   nil,    47,    48,   nil,    35,   nil,    39,    41,    42,
    43,    44,    46,    49,   nil,    52,    53,    55,    45,   nil,
   nil,   nil,   nil,    20,   nil,   nil,   nil,    30,   nil,   nil,
   nil,    21,   nil,   nil,   nil,   nil,    47,    48,   nil,    35,
   nil,    39,    41,    42,    43,    44,    46,    49,   nil,    52,
    53,    55,    45,   nil,   nil,   nil,   nil,    20,   nil,   nil,
   nil,    30,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
    47,    48,   nil,    35,   nil,    39,    41,    42,    43,    44,
    46,    49,   nil,    52,    53,    55,    45,   nil,   nil,   183,
   184,    20,   185,   186,   187,    30,   nil,   nil,   nil,   188,
   189,   190,   191,   192,   193,   nil,   nil,    35,   nil,    39,
    41,    42,    43,    44,    46,    49,   nil,    52,    53,    55,
    45,   nil,   nil,   nil,   nil,    20,   nil,   nil,   nil,   227,
   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,    48,
   nil,    35,   nil,    39,    41,    42,    43,    44,    46,    49,
   nil,    52,    53,    55,   nil,   nil,   nil,    45,   nil,   201,
   nil,   nil,   nil,   nil,   nil,   nil,   122,    21,   nil,   nil,
   nil,   nil,    47,    48,   nil,    35,   nil,    39,    41,    42,
    43,    44,    46,    49,   nil,    52,    53,    55,   130,    45,
   nil,   nil,   nil,   nil,   nil,   125,   126,   nil,   227,   nil,
   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,
    48,   nil,    35,   nil,    39,    41,    42,    43,    44,    46,
    49,    45,    52,    53,    55,   nil,   nil,   nil,   201,   nil,
    30,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,
   nil,    47,    48,   nil,    35,   nil,    39,    41,    42,    43,
    44,    46,    49,   nil,    52,    53,    55,    45,   nil,   nil,
    20,   nil,   nil,   nil,   nil,   nil,    30,   nil,    21,   nil,
   nil,   nil,   152,    47,    48,   nil,    35,   nil,    39,    41,
    42,    43,    44,    46,    49,   nil,    52,    53,    55,    45,
   nil,   nil,   nil,   nil,   nil,   nil,    20,   nil,    30,   nil,
   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,
    48,   nil,    35,   nil,    39,    41,    42,    43,    44,    46,
    49,    45,    52,    53,    55,   nil,   nil,   nil,    20,   nil,
   227,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,
   nil,    47,    48,   nil,    35,   nil,    39,    41,    42,    43,
    44,    46,    49,   nil,    52,    53,    55,   nil,    45,   nil,
   201,   nil,   nil,   nil,   nil,   nil,   nil,   122,    21,   nil,
   nil,   nil,   nil,    47,    48,   nil,    35,   nil,    39,    41,
    42,    43,    44,    46,    49,   nil,    52,    53,    55,   130,
   nil,    45,   nil,   nil,   nil,   nil,   125,   126,   nil,   nil,
   122,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
    47,    48,   nil,    35,   nil,    39,    41,    42,    43,    44,
    46,    49,   130,    52,    53,    55,    45,   nil,   nil,   125,
   126,   nil,   nil,   nil,   nil,    30,   nil,   nil,    21,   nil,
   nil,   nil,   nil,    47,    48,   nil,    35,   nil,    39,    41,
    42,    43,    44,    46,    49,    45,    52,    53,    55,   nil,
   nil,   nil,   nil,   nil,    30,    20,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,    48,
   nil,    35,   nil,    39,    41,    42,    43,    44,    46,    49,
    45,    52,    53,    55,    20,   nil,   nil,   nil,   nil,    30,
   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,    48,   nil,
    35,   nil,    39,    41,    42,    43,    44,    46,    49,    45,
    52,    53,    55,   nil,   nil,   nil,   nil,   nil,    30,    20,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,
   nil,   nil,    47,    48,   nil,    35,   nil,    39,    41,    42,
    43,    44,    46,    49,    45,    52,    53,    55,    20,   nil,
   nil,   nil,   nil,   227,   nil,   nil,    21,   nil,   nil,   nil,
   nil,    47,    48,   nil,    35,   nil,    39,    41,    42,    43,
    44,    46,    49,    45,    52,    53,    55,   nil,   nil,   nil,
   nil,   nil,   227,   201,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    21,   nil,   nil,   nil,   nil,    47,    48,   nil,    35,
   nil,    39,    41,    42,    43,    44,    46,    49,    45,    52,
    53,    55,   201,   nil,   nil,   nil,   nil,    30,   nil,   nil,
    21,   nil,   nil,   nil,   nil,    47,    48,   nil,    35,   nil,
    39,    41,    42,    43,    44,    46,    49,    45,    52,    53,
    55,   nil,   nil,   nil,   nil,   nil,   227,    20,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
    47,    48,   nil,    35,   nil,    39,    41,    42,    43,    44,
    46,    49,    45,    52,    53,    55,   201,   nil,   nil,   nil,
   nil,    30,   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,
    48,   nil,    35,   nil,    39,    41,    42,    43,    44,    46,
    49,   nil,    52,    53,    55,    45,   nil,   nil,   nil,   nil,
   nil,    20,   nil,   nil,   122,   nil,   nil,   nil,   nil,    21,
   nil,   nil,   nil,   nil,    47,    48,   nil,    35,   nil,    39,
    41,    42,    43,    44,    46,    49,   130,    52,    53,    55,
    45,   nil,   nil,   125,   126,   nil,   nil,   nil,   nil,    30,
   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,    48,   nil,
    35,   nil,    39,    41,    42,    43,    44,    46,    49,    45,
    52,    53,    55,   nil,   nil,   nil,   nil,   nil,    30,    20,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,
   nil,   nil,    47,    48,   nil,    35,   nil,    39,    41,    42,
    43,    44,    46,    49,    45,    52,    53,    55,    20,   nil,
   nil,   nil,   nil,    30,   nil,   nil,    21,   nil,   nil,   nil,
   nil,    47,    48,   nil,    35,   nil,    39,    41,    42,    43,
    44,    46,    49,    45,    52,    53,    55,   nil,   nil,   nil,
   nil,   nil,    30,    20,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,    35,
   nil,    39,    41,    42,    43,    44,    46,    49,    45,    52,
    53,    55,    20,   nil,   nil,   nil,   nil,   227,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,    35,   nil,
    39,    41,    42,    43,    44,    46,    49,    45,    52,    53,
    55,   nil,   nil,   nil,   nil,   nil,   227,   201,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
    47,    48,   nil,    35,   nil,    39,    41,    42,    43,    44,
    46,    49,    45,    52,    53,    55,   201,   nil,   nil,   nil,
   nil,   227,   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,
    48,   nil,    35,   nil,    39,    41,    42,    43,    44,    46,
    49,   nil,    52,    53,    55,   nil,   nil,   nil,   nil,   nil,
   nil,   201,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,
   nil,   nil,   nil,   nil,    47,    48,  -160,    35,   nil,    39,
    41,    42,    43,    44,    46,    49,   nil,    52,    53,    55,
   nil,   nil,  -160,  -160,   nil,  -160,  -160,  -160,   nil,   nil,
   nil,   nil,  -160,  -160,  -160,  -160,  -160,  -160,   nil,   nil,
   nil,   nil,   nil,  -160,  -160,  -160,  -148,  -148,   nil,  -148,
  -148,  -148,   nil,   nil,   nil,   nil,  -148,  -148,  -148,  -148,
  -148,  -148 ]

racc_action_check = [
   120,   126,   201,    24,   128,   161,    60,   181,   217,   120,
    62,   161,    60,    19,   187,   128,    10,   275,    49,    49,
   187,    10,   217,   210,   217,   217,   275,   217,   217,   217,
   217,   112,    62,     0,   268,    19,     0,   181,   183,   120,
   183,   183,    24,   268,   161,    60,   125,   120,   126,   201,
    97,    97,   120,   120,   111,   120,   275,   120,   120,   120,
   120,   120,   120,   120,   275,   120,   120,   120,   127,   275,
   275,   110,   275,   268,   275,   275,   275,   275,   275,   275,
   275,   268,   275,   275,   275,   109,   268,   268,   107,   268,
   152,   268,   268,   268,   268,   268,   268,   268,   115,   268,
   268,   268,   116,    75,    75,    75,   153,   115,    22,    22,
   154,   155,   156,   157,   159,     8,   116,   160,   116,   116,
   106,   116,   116,   166,     8,   167,   105,   170,   171,   115,
     8,     8,   264,   176,   177,   178,   115,   115,   179,   180,
   104,   264,   182,   102,    95,   115,   185,    94,    93,    90,
   115,   115,    84,   115,     8,   115,   115,   115,   115,   115,
   115,   115,     8,   115,   115,   115,    83,     8,     8,    72,
     8,   264,     8,     8,     8,     8,     8,     8,     8,   264,
     8,     8,     8,    69,   264,   264,    68,   264,   194,   264,
   264,   264,   264,   264,   264,   264,   122,   264,   264,   264,
    61,    59,    58,    55,    61,   122,    44,    43,    61,   209,
   122,   114,    42,   214,    61,   215,    61,    61,    41,    61,
    61,    39,   220,    36,   225,    21,    20,   122,   228,   255,
    18,   233,   241,   242,   122,   122,   244,    13,   255,   248,
    12,    11,   256,   122,   257,   258,   261,     9,   122,   122,
   265,   122,     7,   122,   122,   122,   122,   122,   122,   122,
   255,   122,   122,   122,   251,     5,   269,   255,   255,   270,
   272,   273,   274,   251,     1,   280,   255,   281,   282,   288,
   nil,   255,   255,   nil,   255,   nil,   255,   255,   255,   255,
   255,   255,   255,   246,   255,   255,   255,   nil,   nil,   nil,
   nil,   nil,   246,   251,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   251,   nil,   nil,   nil,   nil,   251,   251,   nil,   251,
   nil,   251,   251,   251,   251,   251,   251,   251,    16,   251,
   251,   251,   246,   nil,   nil,   nil,   nil,    16,   nil,   nil,
   246,   nil,   nil,    16,   nil,   246,   246,   nil,   246,   nil,
   246,   246,   246,   246,   246,   246,   246,   229,   246,   246,
   246,   nil,   nil,   nil,   nil,   nil,   229,    16,   nil,   nil,
   nil,   229,   nil,   nil,   nil,    16,   nil,   nil,   nil,   nil,
    16,    16,   nil,    16,   nil,    16,    16,    16,    16,    16,
    16,    16,   130,    16,    16,    16,   229,   nil,   nil,   nil,
   nil,   130,   nil,   nil,   229,   nil,   nil,   nil,   nil,   229,
   229,   nil,   229,   nil,   229,   229,   229,   229,   229,   229,
   229,   nil,   229,   229,   229,   nil,   227,   nil,   nil,   nil,
   130,   130,   nil,   nil,   nil,   227,   nil,   nil,   nil,   130,
   227,   nil,   nil,   nil,   130,   130,   nil,   130,   nil,   130,
   130,   130,   130,   130,   130,   130,   nil,   130,   130,   130,
   226,   nil,   nil,   nil,   nil,   227,   nil,   nil,   nil,   226,
   nil,   nil,   nil,   227,   nil,   nil,   nil,   nil,   227,   227,
   nil,   227,   nil,   227,   227,   227,   227,   227,   227,   227,
   nil,   227,   227,   227,   168,   nil,   nil,   nil,   nil,   226,
   nil,   nil,   nil,   168,   nil,   nil,   nil,   226,   nil,   nil,
   nil,   nil,   226,   226,   nil,   226,   nil,   226,   226,   226,
   226,   226,   226,   226,   nil,   226,   226,   226,   103,   nil,
   nil,   nil,   nil,   168,   nil,   nil,   nil,   103,   nil,   nil,
   nil,   168,   nil,   nil,   nil,   nil,   168,   168,   nil,   168,
   nil,   168,   168,   168,   168,   168,   168,   168,   nil,   168,
   168,   168,    25,   nil,   nil,   nil,   nil,   103,   nil,   nil,
   nil,    25,   nil,   nil,   nil,   103,   nil,   nil,   nil,   nil,
   103,   103,   nil,   103,   nil,   103,   103,   103,   103,   103,
   103,   103,   nil,   103,   103,   103,    30,   nil,   nil,   124,
   124,    25,   124,   124,   124,    30,   nil,   nil,   nil,   124,
   124,   124,   124,   124,   124,   nil,   nil,    25,   nil,    25,
    25,    25,    25,    25,    25,    25,   nil,    25,    25,    25,
   224,   nil,   nil,   nil,   nil,    30,   nil,   nil,   nil,   224,
   nil,   nil,   nil,    30,   nil,   nil,   nil,   nil,    30,    30,
   nil,    30,   nil,    30,    30,    30,    30,    30,    30,    30,
   nil,    30,    30,    30,   nil,   nil,   nil,   219,   nil,   224,
   nil,   nil,   nil,   nil,   nil,   nil,   219,   224,   nil,   nil,
   nil,   nil,   224,   224,   nil,   224,   nil,   224,   224,   224,
   224,   224,   224,   224,   nil,   224,   224,   224,   219,   184,
   nil,   nil,   nil,   nil,   nil,   219,   219,   nil,   184,   nil,
   nil,   nil,   nil,   nil,   219,   nil,   nil,   nil,   nil,   219,
   219,   nil,   219,   nil,   219,   219,   219,   219,   219,   219,
   219,   213,   219,   219,   219,   nil,   nil,   nil,   184,   nil,
   213,   nil,   nil,   nil,   nil,   nil,   184,   nil,   nil,   nil,
   nil,   184,   184,   nil,   184,   nil,   184,   184,   184,   184,
   184,   184,   184,   nil,   184,   184,   184,    85,   nil,   nil,
   213,   nil,   nil,   nil,   nil,   nil,    85,   nil,   213,   nil,
   nil,   nil,    85,   213,   213,   nil,   213,   nil,   213,   213,
   213,   213,   213,   213,   213,   nil,   213,   213,   213,   200,
   nil,   nil,   nil,   nil,   nil,   nil,    85,   nil,   200,   nil,
   nil,   nil,   nil,   nil,    85,   nil,   nil,   nil,   nil,    85,
    85,   nil,    85,   nil,    85,    85,    85,    85,    85,    85,
    85,   188,    85,    85,    85,   nil,   nil,   nil,   200,   nil,
   188,   nil,   nil,   nil,   nil,   nil,   200,   nil,   nil,   nil,
   nil,   200,   200,   nil,   200,   nil,   200,   200,   200,   200,
   200,   200,   200,   nil,   200,   200,   200,   nil,   199,   nil,
   188,   nil,   nil,   nil,   nil,   nil,   nil,   199,   188,   nil,
   nil,   nil,   nil,   188,   188,   nil,   188,   nil,   188,   188,
   188,   188,   188,   188,   188,   nil,   188,   188,   188,   199,
   nil,   198,   nil,   nil,   nil,   nil,   199,   199,   nil,   nil,
   198,   nil,   nil,   nil,   nil,   199,   nil,   nil,   nil,   nil,
   199,   199,   nil,   199,   nil,   199,   199,   199,   199,   199,
   199,   199,   198,   199,   199,   199,   197,   nil,   nil,   198,
   198,   nil,   nil,   nil,   nil,   197,   nil,   nil,   198,   nil,
   nil,   nil,   nil,   198,   198,   nil,   198,   nil,   198,   198,
   198,   198,   198,   198,   198,    89,   198,   198,   198,   nil,
   nil,   nil,   nil,   nil,    89,   197,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   197,   nil,   nil,   nil,   nil,   197,   197,
   nil,   197,   nil,   197,   197,   197,   197,   197,   197,   197,
    88,   197,   197,   197,    89,   nil,   nil,   nil,   nil,    88,
   nil,   nil,    89,   nil,   nil,   nil,   nil,    89,    89,   nil,
    89,   nil,    89,    89,    89,    89,    89,    89,    89,    87,
    89,    89,    89,   nil,   nil,   nil,   nil,   nil,    87,    88,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    88,   nil,   nil,
   nil,   nil,    88,    88,   nil,    88,   nil,    88,    88,    88,
    88,    88,    88,    88,   193,    88,    88,    88,    87,   nil,
   nil,   nil,   nil,   193,   nil,   nil,    87,   nil,   nil,   nil,
   nil,    87,    87,   nil,    87,   nil,    87,    87,    87,    87,
    87,    87,    87,   192,    87,    87,    87,   nil,   nil,   nil,
   nil,   nil,   192,   193,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   193,   nil,   nil,   nil,   nil,   193,   193,   nil,   193,
   nil,   193,   193,   193,   193,   193,   193,   193,    71,   193,
   193,   193,   192,   nil,   nil,   nil,   nil,    71,   nil,   nil,
   192,   nil,   nil,   nil,   nil,   192,   192,   nil,   192,   nil,
   192,   192,   192,   192,   192,   192,   192,   191,   192,   192,
   192,   nil,   nil,   nil,   nil,   nil,   191,    71,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    71,   nil,   nil,   nil,   nil,
    71,    71,   nil,    71,   nil,    71,    71,    71,    71,    71,
    71,    71,    86,    71,    71,    71,   191,   nil,   nil,   nil,
   nil,    86,   nil,   nil,   191,   nil,   nil,   nil,   nil,   191,
   191,   nil,   191,   nil,   191,   191,   191,   191,   191,   191,
   191,   nil,   191,   191,   191,    76,   nil,   nil,   nil,   nil,
   nil,    86,   nil,   nil,    76,   nil,   nil,   nil,   nil,    86,
   nil,   nil,   nil,   nil,    86,    86,   nil,    86,   nil,    86,
    86,    86,    86,    86,    86,    86,    76,    86,    86,    86,
    78,   nil,   nil,    76,    76,   nil,   nil,   nil,   nil,    78,
   nil,   nil,    76,   nil,   nil,   nil,   nil,    76,    76,   nil,
    76,   nil,    76,    76,    76,    76,    76,    76,    76,    79,
    76,    76,    76,   nil,   nil,   nil,   nil,   nil,    79,    78,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    78,   nil,   nil,
   nil,   nil,    78,    78,   nil,    78,   nil,    78,    78,    78,
    78,    78,    78,    78,    80,    78,    78,    78,    79,   nil,
   nil,   nil,   nil,    80,   nil,   nil,    79,   nil,   nil,   nil,
   nil,    79,    79,   nil,    79,   nil,    79,    79,    79,    79,
    79,    79,    79,    81,    79,    79,    79,   nil,   nil,   nil,
   nil,   nil,    81,    80,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    80,    80,   nil,    80,
   nil,    80,    80,    80,    80,    80,    80,    80,   190,    80,
    80,    80,    81,   nil,   nil,   nil,   nil,   190,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    81,    81,   nil,    81,   nil,
    81,    81,    81,    81,    81,    81,    81,   189,    81,    81,
    81,   nil,   nil,   nil,   nil,   nil,   189,   190,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   190,   nil,   nil,   nil,   nil,
   190,   190,   nil,   190,   nil,   190,   190,   190,   190,   190,
   190,   190,   186,   190,   190,   190,   189,   nil,   nil,   nil,
   nil,   186,   nil,   nil,   189,   nil,   nil,   nil,   nil,   189,
   189,   nil,   189,   nil,   189,   189,   189,   189,   189,   189,
   189,   nil,   189,   189,   189,   nil,   nil,   nil,   nil,   nil,
   nil,   186,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   186,
   nil,   nil,   nil,   nil,   186,   186,   135,   186,   nil,   186,
   186,   186,   186,   186,   186,   186,   nil,   186,   186,   186,
   nil,   nil,   135,   135,   nil,   135,   135,   135,   nil,   nil,
   nil,   nil,   135,   135,   135,   135,   135,   135,   nil,   nil,
   nil,   nil,   nil,   135,   135,   135,   267,   267,   nil,   267,
   267,   267,   nil,   nil,   nil,   nil,   267,   267,   267,   267,
   267,   267 ]

racc_action_pointer = [
    16,   274,   nil,   nil,   nil,   263,   nil,   234,   109,   247,
    12,   238,   195,   213,   nil,   nil,   322,   nil,   219,   -10,
   164,   169,    50,   nil,   -18,   556,   nil,   nil,   nil,   nil,
   590,   nil,   nil,   nil,   nil,   nil,   161,   nil,   nil,   206,
   nil,   203,   197,   192,   191,   nil,   nil,   nil,   nil,   -51,
   nil,   nil,   nil,   nil,   nil,   129,   nil,   nil,   197,   195,
     0,   189,   -13,   nil,   nil,   nil,   nil,   nil,   152,   138,
   nil,  1122,   124,   nil,   nil,    49,  1219,   nil,  1254,  1283,
  1318,  1347,   nil,   150,   107,   761,  1186,  1023,   994,   959,
    80,   nil,   nil,   142,   140,   133,   nil,    37,   nil,   nil,
   nil,   nil,   124,   522,   125,    81,    94,    62,   nil,    56,
    42,    25,   -14,   nil,   176,    92,    91,   nil,   nil,   nil,
    -6,   nil,   190,   nil,   562,    31,   -14,    29,   -42,   nil,
   386,   nil,   nil,   nil,   nil,  1485,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    74,    90,    94,    95,    96,    97,   nil,   107,
   113,    -1,   nil,   nil,   nil,   nil,   107,   114,   488,   nil,
    82,    83,   nil,   nil,   nil,   nil,    97,   131,    89,    84,
   123,    -9,   126,     0,   693,   131,  1446,   -23,   825,  1411,
  1382,  1151,  1087,  1058,   168,   nil,   nil,   930,   895,   862,
   793,   -13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   201,
    13,   nil,   nil,   725,   197,   204,   nil,    -3,   nil,   661,
   177,   nil,   nil,   nil,   624,   209,   454,   420,   189,   351,
   nil,   nil,   nil,   188,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   216,   222,   nil,   197,   nil,   287,   nil,   233,   nil,
   nil,   258,   nil,   nil,   nil,   223,   227,   198,   234,   nil,
   nil,   207,   nil,   nil,   126,   234,   nil,  1509,    28,   250,
   262,   nil,   224,   226,   227,    11,   nil,   nil,   nil,   nil,
   267,   261,   267,   nil,   nil,   nil,   nil,   nil,   234,   nil ]

racc_action_default = [
  -165,  -165,    -1,    -2,    -3,    -5,   -20,  -165,  -165,  -165,
    -7,  -165,  -165,   -28,   -29,   -30,  -165,   -32,   -34,   -37,
  -156,  -165,  -122,  -123,  -126,  -165,  -128,  -129,  -130,  -131,
  -165,  -133,  -134,  -135,  -136,  -137,  -165,  -139,  -140,  -165,
  -142,  -165,  -165,  -165,  -165,  -152,  -153,  -154,  -155,  -165,
  -159,  -160,  -161,  -162,  -163,  -165,   290,    -4,  -165,  -165,
  -165,  -165,   -42,   -43,   -45,   -46,   -85,   -27,   -62,  -165,
   -31,  -165,  -165,   -36,  -156,  -165,  -165,  -118,  -165,  -165,
  -165,  -165,  -127,  -165,  -165,  -165,  -165,  -165,  -165,  -165,
  -165,  -158,  -164,  -165,  -165,    -6,   -11,   -16,   -13,   -14,
   -15,   -21,  -165,  -165,  -165,  -165,  -165,  -165,   -50,   -52,
   -54,   -55,  -165,   -41,   -64,  -165,   -39,   -33,   -35,  -115,
  -165,  -119,  -165,   -71,  -165,  -165,  -156,   -88,  -165,   -90,
  -165,   -93,   -94,   -95,   -96,   -98,   -99,  -100,  -101,  -102,
  -103,  -104,  -111,  -112,  -113,  -114,  -120,  -121,  -124,  -125,
  -132,  -138,  -165,  -165,  -165,  -165,  -165,  -165,  -157,  -165,
  -165,  -165,   -12,   -17,   -18,   -22,  -165,   -25,  -165,   -47,
  -165,  -165,   -51,   -53,   -56,   -40,   -69,  -165,   -63,  -165,
  -165,  -165,  -113,  -165,  -165,  -165,  -165,  -165,  -165,  -165,
  -165,  -165,  -165,  -165,  -165,   -44,   -84,  -165,  -165,  -165,
  -165,  -156,   -92,  -141,  -143,  -144,  -145,  -146,  -147,  -165,
  -165,   -10,   -23,  -165,  -165,   -79,   -48,  -165,   -38,  -165,
  -165,  -116,   -19,   -97,  -165,  -165,  -165,  -165,  -165,  -165,
   -75,   -76,   -81,  -165,   -83,  -105,  -106,  -107,  -108,  -109,
  -110,  -165,  -150,   -91,   -89,  -117,  -165,    -8,  -165,   -24,
   -26,  -165,   -49,   -57,   -58,  -165,  -165,   -70,   -65,   -67,
   -68,  -165,   -74,   -80,  -165,  -165,   -82,  -149,  -165,  -165,
  -165,   -78,   -59,  -165,  -165,  -165,   -73,   -77,  -151,  -148,
  -165,  -165,   -61,   -87,   -66,   -72,    -9,   -60,  -165,   -86 ]

racc_goto_table = [
    73,    19,   166,   135,    61,   128,    62,    96,   214,    19,
   195,   176,   228,   241,   232,   101,   235,   236,   237,   238,
   239,   240,   259,    83,    17,    13,   230,   148,   149,    77,
   117,   260,    70,    68,   114,    67,   218,   102,   196,   252,
   253,    98,   135,   113,   178,   254,   162,   281,   282,   135,
   258,   181,   261,   118,   263,    95,   165,   135,    57,    10,
     5,   116,   269,    62,    19,   151,   262,   244,   243,   265,
   195,   146,   147,   202,     4,    75,   284,     3,   153,   154,
   155,   156,   157,   121,   278,   260,     2,    82,     1,   nil,
   nil,   271,   276,   175,   nil,   nil,   167,   nil,   nil,   169,
   nil,   nil,   nil,   285,   nil,   nil,   nil,   nil,   211,   nil,
   195,   nil,   249,   179,   nil,   182,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   135,   135,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    98,   nil,   nil,   nil,   135,   nil,   257,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   215,   nil,   217,   216,    62,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   135,   nil,   272,   nil,   nil,   nil,   nil,   nil,
   242,   nil,   nil,   245,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   167,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    83,   nil,   215,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   242,
   nil,   nil,   nil,   nil,   215,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   283,   nil,   nil,   nil,   nil,   nil,
   nil,   242,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   289 ]

racc_goto_check = [
    12,    19,    18,    59,    15,    39,    30,     9,    20,    19,
    13,    28,    47,    78,    47,    16,    47,    47,    47,    47,
    47,    47,    43,    19,    23,    21,    49,    66,    66,    65,
    24,    44,    23,    26,    27,    22,    29,    17,    32,    36,
    37,    12,    59,    12,    39,    38,    11,    40,    41,    59,
    42,    39,    47,    12,    47,     8,    16,    59,     7,     6,
     5,    15,    78,    30,    19,    12,    49,    53,    54,    20,
    13,    19,    19,    55,     4,    64,    43,     3,    19,    19,
    19,    19,    19,    65,    78,    44,     2,    69,     1,   nil,
   nil,    20,    47,    12,   nil,   nil,    19,   nil,   nil,    30,
   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,     9,   nil,
    13,   nil,    18,    19,   nil,    19,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    59,    59,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    12,   nil,   nil,   nil,    59,   nil,    39,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    19,   nil,    15,    30,    30,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    59,   nil,    39,   nil,   nil,   nil,   nil,   nil,
    19,   nil,   nil,    19,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    19,   nil,    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,
   nil,   nil,   nil,   nil,    19,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    12,   nil,   nil,   nil,   nil,   nil,
   nil,    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12 ]

racc_goto_pointer = [
   nil,    88,    86,    77,    74,    60,    54,    48,    -5,   -53,
   nil,   -51,   -19,  -115,   nil,    -8,   -46,   -24,  -101,    -7,
  -160,    17,    22,    16,   -41,   nil,    20,   -34,  -103,  -140,
    -6,   nil,   -87,   nil,   nil,   nil,  -178,  -177,  -172,   -71,
  -226,  -225,  -170,  -198,  -189,   nil,   nil,  -172,   nil,  -159,
   nil,   nil,   nil,  -132,  -130,   -57,   nil,   nil,   nil,   -73,
   nil,   nil,   nil,   nil,    54,     8,   -53,   nil,   nil,    62,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  -184,   nil,
   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   180,   nil,   nil,   nil,   nil,
    97,   nil,    37,   123,     6,   nil,   nil,   nil,   nil,   144,
   nil,   nil,   nil,   nil,    15,    18,   nil,   nil,   nil,   nil,
    38,    63,   231,    64,    65,   107,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    28,   143,   137,   124,   138,   nil,
   139,   140,   141,   127,   129,   131,   132,   133,   134,    51,
   136,   142,   145,    23,   nil,   nil,    22,    24,    25,    26,
    27,    29,    31,    32,    33,    34,    36,    40,   nil,    50,
    54 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 76, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  3, 78, :_reduce_4,
  0, 81, :_reduce_none,
  3, 81, :_reduce_6,
  0, 82, :_reduce_none,
  5, 82, :_reduce_8,
  8, 82, :_reduce_9,
  3, 83, :_reduce_10,
  1, 83, :_reduce_none,
  2, 84, :_reduce_12,
  1, 85, :_reduce_none,
  1, 85, :_reduce_14,
  1, 85, :_reduce_15,
  0, 86, :_reduce_16,
  1, 86, :_reduce_17,
  1, 86, :_reduce_18,
  3, 88, :_reduce_19,
  1, 80, :_reduce_none,
  4, 79, :_reduce_21,
  5, 79, :_reduce_22,
  3, 92, :_reduce_23,
  3, 93, :_reduce_24,
  1, 93, :_reduce_none,
  4, 91, :_reduce_26,
  3, 89, :_reduce_27,
  2, 89, :_reduce_28,
  1, 98, :_reduce_29,
  1, 98, :_reduce_30,
  2, 96, :_reduce_31,
  1, 96, :_reduce_32,
  3, 99, :_reduce_33,
  1, 99, :_reduce_none,
  3, 100, :_reduce_35,
  2, 100, :_reduce_36,
  1, 100, :_reduce_none,
  4, 97, :_reduce_38,
  2, 101, :_reduce_39,
  3, 90, :_reduce_40,
  2, 90, :_reduce_41,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 107, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  3, 108, :_reduce_47,
  4, 108, :_reduce_48,
  5, 109, :_reduce_49,
  1, 110, :_reduce_50,
  2, 110, :_reduce_51,
  1, 110, :_reduce_52,
  2, 110, :_reduce_53,
  1, 110, :_reduce_54,
  1, 110, :_reduce_55,
  2, 110, :_reduce_56,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  2, 112, :_reduce_59,
  4, 113, :_reduce_60,
  1, 115, :_reduce_none,
  0, 102, :_reduce_none,
  2, 102, :_reduce_63,
  0, 103, :_reduce_none,
  3, 103, :_reduce_65,
  3, 117, :_reduce_66,
  1, 117, :_reduce_none,
  1, 118, :_reduce_none,
  0, 104, :_reduce_none,
  2, 104, :_reduce_70,
  1, 120, :_reduce_none,
  6, 121, :_reduce_72,
  5, 121, :_reduce_73,
  4, 123, :_reduce_74,
  3, 123, :_reduce_75,
  1, 124, :_reduce_none,
  3, 124, :_reduce_77,
  3, 95, :_reduce_78,
  1, 95, :_reduce_none,
  4, 125, :_reduce_80,
  3, 125, :_reduce_81,
  4, 126, :_reduce_82,
  3, 126, :_reduce_83,
  2, 127, :_reduce_84,
  1, 105, :_reduce_85,
  3, 116, :_reduce_86,
  1, 116, :_reduce_none,
  1, 114, :_reduce_none,
  3, 114, :_reduce_89,
  1, 128, :_reduce_none,
  3, 128, :_reduce_91,
  2, 129, :_reduce_92,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 130, :_reduce_none,
  1, 132, :_reduce_none,
  3, 132, :_reduce_97,
  1, 132, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  3, 135, :_reduce_105,
  3, 135, :_reduce_106,
  3, 135, :_reduce_107,
  3, 135, :_reduce_108,
  3, 135, :_reduce_109,
  3, 135, :_reduce_110,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  3, 138, :_reduce_115,
  5, 138, :_reduce_116,
  4, 140, :_reduce_117,
  1, 139, :_reduce_118,
  2, 139, :_reduce_119,
  3, 94, :_reduce_120,
  3, 94, :_reduce_121,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  3, 141, :_reduce_124,
  3, 141, :_reduce_125,
  1, 141, :_reduce_none,
  2, 142, :_reduce_127,
  1, 142, :_reduce_none,
  1, 144, :_reduce_none,
  1, 144, :_reduce_none,
  1, 144, :_reduce_none,
  3, 144, :_reduce_132,
  1, 145, :_reduce_none,
  1, 145, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 148, :_reduce_137,
  3, 119, :_reduce_138,
  1, 119, :_reduce_none,
  1, 151, :_reduce_none,
  4, 146, :_reduce_141,
  1, 146, :_reduce_none,
  4, 152, :_reduce_143,
  4, 152, :_reduce_144,
  4, 152, :_reduce_145,
  4, 152, :_reduce_146,
  4, 152, :_reduce_147,
  4, 137, :_reduce_148,
  4, 131, :_reduce_149,
  1, 153, :_reduce_none,
  3, 153, :_reduce_151,
  1, 149, :_reduce_152,
  1, 149, :_reduce_153,
  1, 143, :_reduce_154,
  1, 143, :_reduce_155,
  1, 87, :_reduce_156,
  3, 150, :_reduce_157,
  2, 150, :_reduce_158,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 134, :_reduce_161,
  1, 134, :_reduce_162,
  1, 154, :_reduce_none,
  2, 155, :_reduce_164 ]

racc_reduce_n = 165

racc_shift_n = 290

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :FETCH => 4,
  :FIRST => 5,
  :unsigned_integer => 6,
  :ROWS => 7,
  :ONLY => 8,
  :OFFSET => 9,
  :NEXT => 10,
  :comma => 11,
  :built_in_function => 12,
  :ASC => 13,
  :DESC => 14,
  :left_paren => 15,
  :right_paren => 16,
  :INSERT => 17,
  :INTO => 18,
  :VALUES => 19,
  :SELECT => 20,
  :asterisk => 21,
  :DISTINCT => 22,
  :AS => 23,
  :FROM => 24,
  :CROSS => 25,
  :JOIN => 26,
  :INNER => 27,
  :LEFT => 28,
  :OUTER => 29,
  :RIGHT => 30,
  :FULL => 31,
  :ON => 32,
  :USING => 33,
  :WHERE => 34,
  :GROUP => 35,
  :HAVING => 36,
  :NOT => 37,
  :BETWEEN => 38,
  :AND => 39,
  :IN => 40,
  :LIKE => 41,
  :IS => 42,
  :NULL => 43,
  :EXISTS => 44,
  :identifier => 45,
  :OR => 46,
  :equals_operator => 47,
  :not_equals_operator => 48,
  :less_than_operator => 49,
  :greater_than_operator => 50,
  :less_than_or_equals_operator => 51,
  :greater_than_or_equals_operator => 52,
  :CASE => 53,
  :END => 54,
  :ELSE => 55,
  :WHEN => 56,
  :THEN => 57,
  :plus_sign => 58,
  :minus_sign => 59,
  :solidus => 60,
  :CURRENT_USER => 61,
  :period => 62,
  :COUNT => 63,
  :AVG => 64,
  :MAX => 65,
  :MIN => 66,
  :SUM => 67,
  :unsigned_float => 68,
  :quote => 69,
  :character_string_literal => 70,
  :true_literal => 71,
  :false_literal => 72,
  :DATE => 73,
  :date_string => 74 }

racc_nt_base = 75

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "FETCH",
  "FIRST",
  "unsigned_integer",
  "ROWS",
  "ONLY",
  "OFFSET",
  "NEXT",
  "comma",
  "built_in_function",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "asterisk",
  "DISTINCT",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "CASE",
  "END",
  "ELSE",
  "WHEN",
  "THEN",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "unsigned_float",
  "quote",
  "character_string_literal",
  "true_literal",
  "false_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "fetch_only_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_name",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "distinct_select_list",
  "table_expression",
  "select_list",
  "select_sublist",
  "derived_column",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "column_reference",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_function",
  "boolean_primary",
  "predicate",
  "boolean_literal",
  "comparison_predicate",
  "row_value_constructor_element",
  "general_function",
  "case_expression",
  "when_expressions",
  "when_expression",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "general_literal",
  "qualifier",
  "general_set_function",
  "argument_list",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1], val[2]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 22)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(0, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_9(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(val[1], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 26)
  def _reduce_10(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 11 omitted

module_eval(<<'.,.,', 'parser.racc', 30)
  def _reduce_12(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.racc', 34)
  def _reduce_14(val, _values, result)
     result = SQLParser::Statement::BuiltInFunction.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 35)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_24(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 25 omitted

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_27(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::Distinct.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 74)
  def _reduce_32(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_33(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 34 omitted

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_38(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_39(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_40(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_41(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_49(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 112)
  def _reduce_50(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 113)
  def _reduce_51(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_53(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_54(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 57 omitted

# reduce 58 omitted

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

module_eval(<<'.,.,', 'parser.racc', 135)
  def _reduce_63(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 64 omitted

module_eval(<<'.,.,', 'parser.racc', 139)
  def _reduce_65(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_66(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 150)
  def _reduce_70(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 71 omitted

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_72(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_73(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_74(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_75(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 76 omitted

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_77(val, _values, result)
     result = SQLParser::Statement::InValueList.new(Array(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 169)
  def _reduce_78(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 79 omitted

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 180)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_84(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_86(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 87 omitted

# reduce 88 omitted

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_89(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 90 omitted

module_eval(<<'.,.,', 'parser.racc', 202)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 205)
  def _reduce_92(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

module_eval(<<'.,.,', 'parser.racc', 215)
  def _reduce_97(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_105(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 229)
  def _reduce_106(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_107(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_108(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_109(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 233)
  def _reduce_110(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_115(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_116(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_117(val, _values, result)
     result = SQLParser::Statement::WhenClause.new(val[1], val[3])  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 252)
  def _reduce_118(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 253)
  def _reduce_119(val, _values, result)
     result = [ *val[0], val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_120(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_121(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 122 omitted

# reduce 123 omitted

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_124(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_125(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 126 omitted

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_127(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_132(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_138(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 139 omitted

# reduce 140 omitted

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 142 omitted

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_143(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_144(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_145(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_146(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_147(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_148(val, _values, result)
     result = SQLParser::Statement::FunctionCall.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_149(val, _values, result)
     result = SQLParser::Statement::BooleanFunction.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 150 omitted

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_151(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 318)
  def _reduce_152(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_153(val, _values, result)
    result = SQLParser::Statement::Float.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_154(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 323)
  def _reduce_155(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_156(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 331)
  def _reduce_157(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_158(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 159 omitted

# reduce 160 omitted

module_eval(<<'.,.,', 'parser.racc', 337)
  def _reduce_161(val, _values, result)
     result = SQLParser::Statement::True.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 338)
  def _reduce_162(val, _values, result)
     result = SQLParser::Statement::False.new 
    result
  end
.,.,

# reduce 163 omitted

module_eval(<<'.,.,', 'parser.racc', 344)
  def _reduce_164(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
