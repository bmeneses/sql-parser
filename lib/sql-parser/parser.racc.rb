#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 362)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    45,   256,   205,    81,   207,   101,   101,   233,   106,   126,
   113,   100,   100,    72,   243,   208,    58,    45,    92,    91,
   244,    59,   107,   258,   109,   110,   237,   111,   112,   265,
   266,   134,    74,     7,    45,    74,     8,   207,   129,   130,
    79,    80,    82,    30,    74,    74,   181,    21,   -85,   -85,
   167,   168,    47,    48,   206,    35,   209,    39,    41,    42,
    43,    44,    46,    49,    21,    52,    53,    55,    74,    47,
    48,   178,    35,    20,    39,    41,    42,    43,    44,    46,
    49,    21,    52,    53,    55,   177,    47,    48,   211,    35,
   212,    39,    41,    42,    43,    44,    46,    49,    45,    52,
    53,    55,   106,   234,   213,   235,   236,   126,   214,   106,
   120,   121,    77,   104,   215,    45,   107,   105,   109,   110,
   216,   111,   112,   107,    30,   109,   110,   217,   111,   112,
    14,    16,    45,   184,   185,   124,   129,   209,   218,   176,
   220,   237,   221,   175,    66,    21,    66,   227,   228,   207,
    47,    48,   229,    35,    20,    39,    41,    42,    43,    44,
    46,    49,    21,    52,    53,    55,   174,    47,    48,   231,
    35,   209,    39,    41,    42,    43,    44,    46,    49,    21,
    52,    53,    55,   232,    47,    48,    66,    35,   154,    39,
    41,    42,    43,    44,    46,    49,    45,    52,    53,    55,
   172,   105,   239,   191,   192,    30,   193,   194,   195,   165,
   164,   163,   162,   196,   197,   198,   199,   200,   201,    74,
   154,   124,    74,     8,    66,   116,    95,    94,    93,    45,
   257,   202,    90,   260,   261,    20,    89,    88,   126,    20,
   271,    87,    86,    21,   239,    85,   -85,   276,    47,    48,
    71,    35,   278,    39,    41,    42,    43,    44,    46,    49,
   134,    52,    53,    55,    45,   279,   280,   129,   130,   206,
    69,   282,    66,    30,    60,   285,    21,   207,   286,   287,
    56,    47,    48,   289,    35,    12,    39,    41,    42,    43,
    44,    46,    49,    45,    52,    53,    55,    11,   291,   292,
   207,    74,    30,    20,    20,     9,   298,   299,   300,    74,
   nil,    21,   nil,   nil,   nil,   nil,    47,    48,   nil,    35,
   nil,    39,    41,    42,    43,    44,    46,    49,    45,    52,
    53,    55,    20,   nil,   nil,   nil,   nil,    30,   nil,   nil,
    21,   nil,   nil,    14,   nil,    47,    48,   nil,    35,   nil,
    39,    41,    42,    43,    44,    46,    49,    45,    52,    53,
    55,   nil,   nil,   nil,   nil,   nil,    30,    20,   nil,   nil,
   nil,     8,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
    47,    48,   nil,    35,   nil,    39,    41,    42,    43,    44,
    46,    49,    45,    52,    53,    55,    20,   nil,   nil,   nil,
   nil,    30,   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,
    48,   nil,    35,   nil,    39,    41,    42,    43,    44,    46,
    49,    45,    52,    53,    55,   nil,   nil,   nil,   nil,   nil,
    30,    20,   nil,   nil,   nil,     8,   nil,   nil,   nil,    21,
   nil,   nil,   nil,   nil,    47,    48,   nil,    35,   nil,    39,
    41,    42,    43,    44,    46,    49,    45,    52,    53,    55,
    20,   nil,   nil,   nil,   nil,    30,   nil,   nil,    21,   nil,
   nil,   nil,   nil,    47,    48,   nil,    35,   nil,    39,    41,
    42,    43,    44,    46,    49,   nil,    52,    53,    55,    45,
   nil,   nil,   nil,   nil,   nil,    20,   nil,   nil,   126,   nil,
   nil,   nil,   nil,     8,   nil,   nil,    77,   nil,    47,    48,
   nil,    35,   nil,    39,    41,    42,    43,    44,    46,    49,
   134,    52,    53,    55,    45,   nil,   nil,   129,   130,   nil,
   nil,   nil,   nil,    30,   nil,   nil,    21,   nil,   nil,   nil,
   nil,    47,    48,   nil,    35,   nil,    39,    41,    42,    43,
    44,    46,    49,    45,    52,    53,    55,   nil,   nil,   nil,
   nil,   nil,    30,    20,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    21,   nil,   nil,   nil,   nil,    47,    48,   nil,    35,
   nil,    39,    41,    42,    43,    44,    46,    49,    45,    52,
    53,    55,    20,   nil,   nil,   nil,   nil,    30,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    35,   nil,
    39,    41,    42,    43,    44,    46,    49,    45,    52,    53,
    55,   nil,   nil,   nil,   nil,   nil,   237,    20,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
    47,    48,   nil,    35,   nil,    39,    41,    42,    43,    44,
    46,    49,    45,    52,    53,    55,   209,   nil,   nil,   nil,
   nil,   237,   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,
    48,   nil,    35,   nil,    39,    41,    42,    43,    44,    46,
    49,    45,    52,    53,    55,   nil,   nil,   nil,   nil,   nil,
    30,   209,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,
   nil,   nil,   nil,   nil,    47,    48,   nil,    35,   nil,    39,
    41,    42,    43,    44,    46,    49,   nil,    52,    53,    55,
    20,    45,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,
   126,   nil,   nil,    47,    48,   nil,    35,   nil,    39,    41,
    42,    43,    44,    46,    49,   nil,    52,    53,    55,   nil,
   nil,   nil,   134,    45,   nil,   nil,   nil,   nil,   nil,   129,
   130,   nil,   237,   nil,   nil,   nil,   nil,   nil,    21,   nil,
   nil,   nil,   nil,    47,    48,   nil,    35,   nil,    39,    41,
    42,    43,    44,    46,    49,    45,    52,    53,    55,   nil,
   nil,   nil,   209,   nil,    30,   nil,   nil,   nil,   nil,   nil,
    21,   nil,   nil,   nil,   nil,    47,    48,   nil,    35,   nil,
    39,    41,    42,    43,    44,    46,    49,    45,    52,    53,
    55,   nil,   nil,   nil,    20,   nil,    30,   nil,   nil,   nil,
   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,    48,   nil,
    35,   nil,    39,    41,    42,    43,    44,    46,    49,    45,
    52,    53,    55,   nil,   nil,   nil,    20,   nil,    30,   nil,
   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,
    48,   nil,    35,   nil,    39,    41,    42,    43,    44,    46,
    49,    45,    52,    53,    55,   nil,   nil,   nil,    20,   nil,
    30,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,
   nil,    47,    48,   nil,    35,   nil,    39,    41,    42,    43,
    44,    46,    49,   nil,    52,    53,    55,   nil,    45,   nil,
    20,   nil,   nil,   nil,   nil,   nil,   nil,   126,    21,   nil,
   nil,   nil,   nil,    47,    48,   nil,    35,   nil,    39,    41,
    42,    43,    44,    46,    49,   nil,    52,    53,    55,   134,
    45,   nil,   nil,   nil,   nil,   nil,   129,   130,   nil,   237,
   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
    47,    48,   nil,    35,   nil,    39,    41,    42,    43,    44,
    46,    49,    45,    52,    53,    55,   nil,   nil,   nil,   209,
   nil,   237,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,
   nil,   nil,    47,    48,   nil,    35,   nil,    39,    41,    42,
    43,    44,    46,    49,    45,    52,    53,    55,   nil,   nil,
   nil,   209,   nil,   237,   nil,   nil,   nil,   nil,   nil,    21,
   nil,   nil,   nil,   nil,    47,    48,   nil,    35,   nil,    39,
    41,    42,    43,    44,    46,    49,   nil,    52,    53,    55,
   nil,    45,   nil,   209,   nil,   nil,   nil,   nil,   nil,   nil,
   126,    21,   nil,   nil,   nil,   nil,    47,    48,   nil,    35,
   nil,    39,    41,    42,    43,    44,    46,    49,   nil,    52,
    53,    55,   134,    45,   nil,   nil,   nil,   nil,   nil,   129,
   130,   nil,    30,   nil,   nil,   nil,   nil,   nil,    21,   nil,
   nil,   nil,   nil,    47,    48,   nil,    35,   nil,    39,    41,
    42,    43,    44,    46,    49,    45,    52,    53,    55,   nil,
   nil,   nil,    20,   nil,    30,   nil,   nil,   nil,   nil,   nil,
    21,   nil,   nil,   nil,   nil,    47,    48,   nil,    35,   nil,
    39,    41,    42,    43,    44,    46,    49,    45,    52,    53,
    55,   nil,   nil,   nil,    20,   nil,   237,   nil,   nil,   nil,
   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,    48,   nil,
    35,   nil,    39,    41,    42,    43,    44,    46,    49,    45,
    52,    53,    55,   nil,   nil,   nil,   209,   nil,    30,   nil,
   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,
    48,   nil,    35,   nil,    39,    41,    42,    43,    44,    46,
    49,    45,    52,    53,    55,   nil,   nil,   nil,    20,   nil,
   237,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,
   nil,    47,    48,   nil,    35,   nil,    39,    41,    42,    43,
    44,    46,    49,   nil,    52,    53,    55,   nil,    45,   nil,
   209,   nil,   nil,   nil,   nil,   nil,   nil,   126,    21,   nil,
   nil,   nil,   nil,    47,    48,   nil,    35,   nil,    39,    41,
    42,    43,    44,    46,    49,   nil,    52,    53,    55,   134,
    45,   nil,   nil,   nil,   nil,   nil,   129,   130,   nil,    30,
   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
    47,    48,   nil,    35,   nil,    39,    41,    42,    43,    44,
    46,    49,    45,    52,    53,    55,   nil,   nil,   nil,    20,
   nil,    30,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,
   nil,   nil,    47,    48,   nil,    35,   nil,    39,    41,    42,
    43,    44,    46,    49,    45,    52,    53,    55,   nil,   nil,
   nil,    20,   nil,    30,   nil,   nil,   nil,   nil,   nil,    21,
   nil,   nil,   nil,   nil,    47,    48,   nil,    35,   nil,    39,
    41,    42,    43,    44,    46,    49,    45,    52,    53,    55,
   nil,   nil,   nil,    20,   nil,    30,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,    35,
   nil,    39,    41,    42,    43,    44,    46,    49,    45,    52,
    53,    55,   nil,   nil,   nil,    20,   nil,   237,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,
   nil,    35,   nil,    39,    41,    42,    43,    44,    46,    49,
    45,    52,    53,    55,   nil,   nil,   nil,   209,   nil,   237,
   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
    47,    48,   nil,    35,   nil,    39,    41,    42,    43,    44,
    46,    49,   nil,    52,    53,    55,    45,   nil,   nil,   209,
   nil,   nil,   nil,   nil,   nil,    30,   nil,    21,   nil,   nil,
   nil,   156,    47,    48,   nil,    35,   nil,    39,    41,    42,
    43,    44,    46,    49,   nil,    52,    53,    55,    45,   nil,
   nil,   nil,   nil,   nil,   nil,    20,   nil,    30,   nil,   nil,
   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,    48,
   nil,    35,   nil,    39,    41,    42,    43,    44,    46,    49,
    45,    52,    53,    55,   nil,   nil,   nil,    20,   nil,    30,
   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
    47,    48,   nil,    35,   nil,    39,    41,    42,    43,    44,
    46,    49,    45,    52,    53,    55,   nil,   nil,   nil,    20,
   nil,    30,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,
   nil,   nil,    47,    48,   nil,    35,   nil,    39,    41,    42,
    43,    44,    46,    49,   nil,    52,    53,    55,   nil,   nil,
   nil,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,
   nil,   nil,   nil,   nil,    47,    48,  -165,    35,   nil,    39,
    41,    42,    43,    44,    46,    49,   nil,    52,    53,    55,
   nil,   nil,  -165,  -165,   nil,  -165,  -165,  -165,   nil,   nil,
   nil,   nil,  -165,  -165,  -165,  -165,  -165,  -165,   nil,   nil,
   nil,   nil,   nil,  -165,  -165,  -165,  -153,  -153,   nil,  -153,
  -153,  -153,   nil,   nil,   nil,   nil,  -153,  -153,  -153,  -153,
  -153,  -153 ]

racc_action_check = [
   116,   209,   130,    24,   132,   165,    60,   189,   225,   116,
    62,   165,    60,    19,   195,   132,    10,   287,    49,    49,
   195,    10,   225,   218,   225,   225,   287,   225,   225,   225,
   225,   116,    62,     0,   280,    19,     0,   189,   116,   116,
    22,    22,    24,   280,   165,    60,   115,   116,   209,   130,
    98,    98,   116,   116,   131,   116,   287,   116,   116,   116,
   116,   116,   116,   116,   287,   116,   116,   116,   113,   287,
   287,   112,   287,   280,   287,   287,   287,   287,   287,   287,
   287,   280,   287,   287,   287,   111,   280,   280,   156,   280,
   157,   280,   280,   280,   280,   280,   280,   280,   134,   280,
   280,   280,   117,   191,   158,   191,   191,   134,   159,    61,
    75,    75,    75,    61,   160,     8,   117,    61,   117,   117,
   161,   117,   117,    61,     8,    61,    61,   163,    61,    61,
     8,     8,   276,   123,   123,   123,   134,   134,   164,   110,
   170,   276,   171,   108,   174,   134,   175,   180,   181,   182,
   134,   134,   183,   134,     8,   134,   134,   134,   134,   134,
   134,   134,     8,   134,   134,   134,   107,     8,     8,   187,
     8,   276,     8,     8,     8,     8,     8,     8,     8,   276,
     8,     8,     8,   188,   276,   276,   106,   276,   190,   276,
   276,   276,   276,   276,   276,   276,   172,   276,   276,   276,
   105,   103,   193,   128,   128,   172,   128,   128,   128,    96,
    95,    94,    91,   128,   128,   128,   128,   128,   128,    85,
    84,    76,    72,   202,    69,    68,    59,    58,    55,   265,
   217,   129,    44,   222,   223,   172,    43,    42,   265,   228,
   230,    41,    39,   172,   235,    36,    20,   238,   172,   172,
    18,   172,   243,   172,   172,   172,   172,   172,   172,   172,
   265,   172,   172,   172,   261,   251,   252,   265,   265,   254,
    13,   258,    12,   261,    11,   266,   265,   267,   268,   273,
     9,   265,   265,   277,   265,     7,   265,   265,   265,   265,
   265,   265,   265,   256,   265,   265,   265,     5,   281,   282,
   284,   285,   256,   261,   286,     1,   292,   293,   294,   300,
   nil,   261,   nil,   nil,   nil,   nil,   261,   261,   nil,   261,
   nil,   261,   261,   261,   261,   261,   261,   261,    16,   261,
   261,   261,   256,   nil,   nil,   nil,   nil,    16,   nil,   nil,
   256,   nil,   nil,    16,   nil,   256,   256,   nil,   256,   nil,
   256,   256,   256,   256,   256,   256,   256,   239,   256,   256,
   256,   nil,   nil,   nil,   nil,   nil,   239,    16,   nil,   nil,
   nil,   239,   nil,   nil,   nil,    16,   nil,   nil,   nil,   nil,
    16,    16,   nil,    16,   nil,    16,    16,    16,    16,    16,
    16,    16,   185,    16,    16,    16,   239,   nil,   nil,   nil,
   nil,   185,   nil,   nil,   239,   nil,   nil,   nil,   nil,   239,
   239,   nil,   239,   nil,   239,   239,   239,   239,   239,   239,
   239,   237,   239,   239,   239,   nil,   nil,   nil,   nil,   nil,
   237,   185,   nil,   nil,   nil,   237,   nil,   nil,   nil,   185,
   nil,   nil,   nil,   nil,   185,   185,   nil,   185,   nil,   185,
   185,   185,   185,   185,   185,   185,    21,   185,   185,   185,
   237,   nil,   nil,   nil,   nil,    21,   nil,   nil,   237,   nil,
   nil,   nil,   nil,   237,   237,   nil,   237,   nil,   237,   237,
   237,   237,   237,   237,   237,   nil,   237,   237,   237,   126,
   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   126,   nil,
   nil,   nil,   nil,   126,   nil,   nil,    21,   nil,    21,    21,
   nil,    21,   nil,    21,    21,    21,    21,    21,    21,    21,
   126,    21,    21,    21,   104,   nil,   nil,   126,   126,   nil,
   nil,   nil,   nil,   104,   nil,   nil,   126,   nil,   nil,   nil,
   nil,   126,   126,   nil,   126,   nil,   126,   126,   126,   126,
   126,   126,   126,    25,   126,   126,   126,   nil,   nil,   nil,
   nil,   nil,    25,   104,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   104,   nil,   nil,   nil,   nil,   104,   104,   nil,   104,
   nil,   104,   104,   104,   104,   104,   104,   104,    30,   104,
   104,   104,    25,   nil,   nil,   nil,   nil,    30,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,
    25,    25,    25,    25,    25,    25,    25,   236,    25,    25,
    25,   nil,   nil,   nil,   nil,   nil,   236,    30,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    30,   nil,   nil,   nil,   nil,
    30,    30,   nil,    30,   nil,    30,    30,    30,    30,    30,
    30,    30,   234,    30,    30,    30,   236,   nil,   nil,   nil,
   nil,   234,   nil,   nil,   236,   nil,   nil,   nil,   nil,   236,
   236,   nil,   236,   nil,   236,   236,   236,   236,   236,   236,
   236,   231,   236,   236,   236,   nil,   nil,   nil,   nil,   nil,
   231,   234,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   234,
   nil,   nil,   nil,   nil,   234,   234,   nil,   234,   nil,   234,
   234,   234,   234,   234,   234,   234,   nil,   234,   234,   234,
   231,   227,   nil,   nil,   nil,   nil,   nil,   nil,   231,   nil,
   227,   nil,   nil,   231,   231,   nil,   231,   nil,   231,   231,
   231,   231,   231,   231,   231,   nil,   231,   231,   231,   nil,
   nil,   nil,   227,   192,   nil,   nil,   nil,   nil,   nil,   227,
   227,   nil,   192,   nil,   nil,   nil,   nil,   nil,   227,   nil,
   nil,   nil,   nil,   227,   227,   nil,   227,   nil,   227,   227,
   227,   227,   227,   227,   227,   221,   227,   227,   227,   nil,
   nil,   nil,   192,   nil,   221,   nil,   nil,   nil,   nil,   nil,
   192,   nil,   nil,   nil,   nil,   192,   192,   nil,   192,   nil,
   192,   192,   192,   192,   192,   192,   192,   124,   192,   192,
   192,   nil,   nil,   nil,   221,   nil,   124,   nil,   nil,   nil,
   nil,   nil,   221,   nil,   nil,   nil,   nil,   221,   221,   nil,
   221,   nil,   221,   221,   221,   221,   221,   221,   221,   121,
   221,   221,   221,   nil,   nil,   nil,   124,   nil,   121,   nil,
   nil,   nil,   nil,   nil,   124,   nil,   nil,   nil,   nil,   124,
   124,   nil,   124,   nil,   124,   124,   124,   124,   124,   124,
   124,   208,   124,   124,   124,   nil,   nil,   nil,   121,   nil,
   208,   nil,   nil,   nil,   nil,   nil,   121,   nil,   nil,   nil,
   nil,   121,   121,   nil,   121,   nil,   121,   121,   121,   121,
   121,   121,   121,   nil,   121,   121,   121,   nil,   207,   nil,
   208,   nil,   nil,   nil,   nil,   nil,   nil,   207,   208,   nil,
   nil,   nil,   nil,   208,   208,   nil,   208,   nil,   208,   208,
   208,   208,   208,   208,   208,   nil,   208,   208,   208,   207,
   194,   nil,   nil,   nil,   nil,   nil,   207,   207,   nil,   194,
   nil,   nil,   nil,   nil,   nil,   207,   nil,   nil,   nil,   nil,
   207,   207,   nil,   207,   nil,   207,   207,   207,   207,   207,
   207,   207,   196,   207,   207,   207,   nil,   nil,   nil,   194,
   nil,   196,   nil,   nil,   nil,   nil,   nil,   194,   nil,   nil,
   nil,   nil,   194,   194,   nil,   194,   nil,   194,   194,   194,
   194,   194,   194,   194,   197,   194,   194,   194,   nil,   nil,
   nil,   196,   nil,   197,   nil,   nil,   nil,   nil,   nil,   196,
   nil,   nil,   nil,   nil,   196,   196,   nil,   196,   nil,   196,
   196,   196,   196,   196,   196,   196,   nil,   196,   196,   196,
   nil,   206,   nil,   197,   nil,   nil,   nil,   nil,   nil,   nil,
   206,   197,   nil,   nil,   nil,   nil,   197,   197,   nil,   197,
   nil,   197,   197,   197,   197,   197,   197,   197,   nil,   197,
   197,   197,   206,   205,   nil,   nil,   nil,   nil,   nil,   206,
   206,   nil,   205,   nil,   nil,   nil,   nil,   nil,   206,   nil,
   nil,   nil,   nil,   206,   206,   nil,   206,   nil,   206,   206,
   206,   206,   206,   206,   206,    71,   206,   206,   206,   nil,
   nil,   nil,   205,   nil,    71,   nil,   nil,   nil,   nil,   nil,
   205,   nil,   nil,   nil,   nil,   205,   205,   nil,   205,   nil,
   205,   205,   205,   205,   205,   205,   205,   201,   205,   205,
   205,   nil,   nil,   nil,    71,   nil,   201,   nil,   nil,   nil,
   nil,   nil,    71,   nil,   nil,   nil,   nil,    71,    71,   nil,
    71,   nil,    71,    71,    71,    71,    71,    71,    71,    89,
    71,    71,    71,   nil,   nil,   nil,   201,   nil,    89,   nil,
   nil,   nil,   nil,   nil,   201,   nil,   nil,   nil,   nil,   201,
   201,   nil,   201,   nil,   201,   201,   201,   201,   201,   201,
   201,   200,   201,   201,   201,   nil,   nil,   nil,    89,   nil,
   200,   nil,   nil,   nil,   nil,   nil,    89,   nil,   nil,   nil,
   nil,    89,    89,   nil,    89,   nil,    89,    89,    89,    89,
    89,    89,    89,   nil,    89,    89,    89,   nil,    77,   nil,
   200,   nil,   nil,   nil,   nil,   nil,   nil,    77,   200,   nil,
   nil,   nil,   nil,   200,   200,   nil,   200,   nil,   200,   200,
   200,   200,   200,   200,   200,   nil,   200,   200,   200,    77,
    79,   nil,   nil,   nil,   nil,   nil,    77,    77,   nil,    79,
   nil,   nil,   nil,   nil,   nil,    77,   nil,   nil,   nil,   nil,
    77,    77,   nil,    77,   nil,    77,    77,    77,    77,    77,
    77,    77,    80,    77,    77,    77,   nil,   nil,   nil,    79,
   nil,    80,   nil,   nil,   nil,   nil,   nil,    79,   nil,   nil,
   nil,   nil,    79,    79,   nil,    79,   nil,    79,    79,    79,
    79,    79,    79,    79,    81,    79,    79,    79,   nil,   nil,
   nil,    80,   nil,    81,   nil,   nil,   nil,   nil,   nil,    80,
   nil,   nil,   nil,   nil,    80,    80,   nil,    80,   nil,    80,
    80,    80,    80,    80,    80,    80,    82,    80,    80,    80,
   nil,   nil,   nil,    81,   nil,    82,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    81,    81,   nil,    81,
   nil,    81,    81,    81,    81,    81,    81,    81,   199,    81,
    81,    81,   nil,   nil,   nil,    82,   nil,   199,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    82,    82,
   nil,    82,   nil,    82,    82,    82,    82,    82,    82,    82,
   198,    82,    82,    82,   nil,   nil,   nil,   199,   nil,   198,
   nil,   nil,   nil,   nil,   nil,   199,   nil,   nil,   nil,   nil,
   199,   199,   nil,   199,   nil,   199,   199,   199,   199,   199,
   199,   199,   nil,   199,   199,   199,    86,   nil,   nil,   198,
   nil,   nil,   nil,   nil,   nil,    86,   nil,   198,   nil,   nil,
   nil,    86,   198,   198,   nil,   198,   nil,   198,   198,   198,
   198,   198,   198,   198,   nil,   198,   198,   198,    87,   nil,
   nil,   nil,   nil,   nil,   nil,    86,   nil,    87,   nil,   nil,
   nil,   nil,   nil,    86,   nil,   nil,   nil,   nil,    86,    86,
   nil,    86,   nil,    86,    86,    86,    86,    86,    86,    86,
    88,    86,    86,    86,   nil,   nil,   nil,    87,   nil,    88,
   nil,   nil,   nil,   nil,   nil,    87,   nil,   nil,   nil,   nil,
    87,    87,   nil,    87,   nil,    87,    87,    87,    87,    87,
    87,    87,    90,    87,    87,    87,   nil,   nil,   nil,    88,
   nil,    90,   nil,   nil,   nil,   nil,   nil,    88,   nil,   nil,
   nil,   nil,    88,    88,   nil,    88,   nil,    88,    88,    88,
    88,    88,    88,    88,   nil,    88,    88,    88,   nil,   nil,
   nil,    90,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    90,
   nil,   nil,   nil,   nil,    90,    90,   139,    90,   nil,    90,
    90,    90,    90,    90,    90,    90,   nil,    90,    90,    90,
   nil,   nil,   139,   139,   nil,   139,   139,   139,   nil,   nil,
   nil,   nil,   139,   139,   139,   139,   139,   139,   nil,   nil,
   nil,   nil,   nil,   139,   139,   139,   279,   279,   nil,   279,
   279,   279,   nil,   nil,   nil,   nil,   279,   279,   279,   279,
   279,   279 ]

racc_action_pointer = [
    16,   305,   nil,   nil,   nil,   295,   nil,   267,   109,   280,
    12,   271,   227,   246,   nil,   nil,   322,   nil,   239,   -10,
   184,   450,   -18,   nil,   -18,   547,   nil,   nil,   nil,   nil,
   582,   nil,   nil,   nil,   nil,   nil,   183,   nil,   nil,   227,
   nil,   226,   222,   221,   217,   nil,   nil,   nil,   nil,   -51,
   nil,   nil,   nil,   nil,   nil,   154,   nil,   nil,   222,   220,
     0,    98,   -13,   nil,   nil,   nil,   nil,   nil,   191,   179,
   nil,  1109,   177,   nil,   nil,    56,   165,  1242,   nil,  1274,
  1306,  1338,  1370,   nil,   204,   174,  1470,  1502,  1534,  1173,
  1566,   143,   nil,   nil,   205,   203,   198,   nil,    37,   nil,
   nil,   nil,   nil,   182,   518,   185,   141,   140,   117,   nil,
   110,    56,    42,    23,   nil,    11,    -6,    91,   nil,   nil,
   nil,   843,   nil,    79,   811,   nil,   483,   nil,   166,   216,
   -13,    15,   -42,   nil,    92,   nil,   nil,   nil,   nil,  1605,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    72,    74,    88,    92,
    98,   104,   nil,   120,   134,    -1,   nil,   nil,   nil,   nil,
   124,   131,   190,   nil,    99,   101,   nil,   nil,   nil,   nil,
   111,   145,   103,    98,   nil,   386,   nil,   112,   167,    -9,
   172,    65,   747,   187,   944,   -23,   976,  1008,  1434,  1402,
  1205,  1141,   203,   nil,   nil,  1077,  1045,   912,   875,   -14,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   222,    13,   nil,
   nil,   779,   217,   223,   nil,    -3,   nil,   715,   194,   nil,
   186,   675,   nil,   nil,   646,   229,   611,   415,   208,   351,
   nil,   nil,   nil,   209,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   249,   255,   nil,   230,   nil,   287,   nil,   265,   nil,
   nil,   258,   nil,   nil,   nil,   223,   260,   231,   267,   nil,
   nil,   nil,   nil,   240,   nil,   nil,   126,   267,   nil,  1629,
    28,   282,   292,   nil,   254,   256,   259,    11,   nil,   nil,
   nil,   nil,   298,   291,   297,   nil,   nil,   nil,   nil,   nil,
   264,   nil ]

racc_action_default = [
  -170,  -170,    -1,    -2,    -3,    -5,   -20,  -170,  -170,  -170,
    -7,  -170,  -170,   -28,   -29,   -30,  -170,   -32,   -34,   -37,
  -161,  -170,  -127,  -128,  -131,  -170,  -133,  -134,  -135,  -136,
  -170,  -138,  -139,  -140,  -141,  -142,  -170,  -144,  -145,  -170,
  -147,  -170,  -170,  -170,  -170,  -157,  -158,  -159,  -160,  -170,
  -164,  -165,  -166,  -167,  -168,  -170,   302,    -4,  -170,  -170,
  -170,  -170,   -42,   -43,   -45,   -46,   -85,   -27,   -62,  -170,
   -31,  -170,  -170,   -36,  -161,  -170,  -170,  -170,  -123,  -170,
  -170,  -170,  -170,  -132,  -170,  -170,  -170,  -170,  -170,  -170,
  -170,  -170,  -163,  -169,  -170,  -170,    -6,   -11,   -16,   -13,
   -14,   -15,   -21,  -170,  -170,  -170,  -170,  -170,  -170,   -50,
   -52,   -54,   -55,  -170,   -41,   -64,  -170,   -39,   -33,   -35,
  -115,  -170,  -124,  -170,  -170,  -120,  -170,   -71,  -170,  -170,
  -161,   -88,  -170,   -90,  -170,   -93,   -94,   -95,   -96,   -98,
   -99,  -100,  -101,  -102,  -103,  -104,  -111,  -112,  -113,  -114,
  -125,  -126,  -129,  -130,  -137,  -143,  -170,  -170,  -170,  -170,
  -170,  -170,  -162,  -170,  -170,  -170,   -12,   -17,   -18,   -22,
  -170,   -25,  -170,   -47,  -170,  -170,   -51,   -53,   -56,   -40,
   -69,  -170,   -63,  -170,  -117,  -170,  -121,  -170,  -170,  -170,
  -113,  -170,  -170,  -170,  -170,  -170,  -170,  -170,  -170,  -170,
  -170,  -170,  -170,   -44,   -84,  -170,  -170,  -170,  -170,  -161,
   -92,  -146,  -148,  -149,  -150,  -151,  -152,  -170,  -170,   -10,
   -23,  -170,  -170,   -79,   -48,  -170,   -38,  -170,  -170,  -116,
  -170,  -170,   -19,   -97,  -170,  -170,  -170,  -170,  -170,  -170,
   -75,   -76,   -81,  -170,   -83,  -105,  -106,  -107,  -108,  -109,
  -110,  -170,  -155,   -91,   -89,  -122,  -170,    -8,  -170,   -24,
   -26,  -170,   -49,   -57,   -58,  -170,  -170,   -70,   -65,   -67,
   -68,  -118,  -119,  -170,   -74,   -80,  -170,  -170,   -82,  -154,
  -170,  -170,  -170,   -78,   -59,  -170,  -170,  -170,   -73,   -77,
  -156,  -153,  -170,  -170,   -61,   -87,   -66,   -72,    -9,   -60,
  -170,   -86 ]

racc_goto_table = [
    73,    19,    97,   132,    62,   139,    61,   170,   125,    19,
   203,   222,   269,   270,   251,    76,   102,   240,    17,   226,
   118,    68,   115,    84,   180,   238,    70,   242,    67,   245,
   246,   247,   248,   249,   250,    13,    78,   204,   262,   263,
   264,    99,   182,   114,   139,   103,   293,   294,   268,   166,
    96,    57,   189,   119,   139,   186,    10,   254,   169,   274,
   253,    62,   139,   117,    19,   281,   155,   273,   210,   275,
   296,   270,   150,   151,   203,   152,   153,     5,   277,   157,
   158,   159,   160,   161,    75,     4,   123,     3,     2,   290,
   122,    83,     1,   nil,   179,   nil,   nil,   171,   173,   nil,
   283,   nil,   nil,   nil,   nil,   nil,   nil,   219,   nil,   288,
   nil,   nil,   nil,   nil,   183,   nil,   203,   187,   nil,   190,
   297,   nil,   nil,   nil,   259,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   139,   139,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    99,   nil,   nil,   nil,
   nil,   nil,   nil,   267,   nil,   139,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   223,   224,    62,   nil,   225,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   230,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   284,   nil,   139,   nil,   nil,   nil,   nil,   252,   nil,
   nil,   255,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   171,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   272,   nil,   nil,   nil,   nil,   nil,
    84,   nil,   223,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   252,
   nil,   nil,   nil,   nil,   223,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   295,   nil,   nil,   nil,
   nil,   nil,   nil,   252,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   301 ]

racc_goto_check = [
    12,    19,     9,    39,    30,    59,    15,    18,    67,    19,
    13,    20,    43,    44,    80,    65,    16,    49,    23,    29,
    24,    26,    27,    19,    28,    47,    23,    47,    22,    47,
    47,    47,    47,    47,    47,    21,    68,    32,    36,    37,
    38,    12,    39,    12,    59,    17,    40,    41,    42,    11,
     8,     7,    39,    12,    59,    67,     6,    53,    16,    49,
    54,    30,    59,    15,    19,    80,    12,    47,    55,    47,
    43,    44,    19,    19,    13,    65,    65,     5,    20,    19,
    19,    19,    19,    19,    64,     4,    66,     3,     2,    80,
    68,    71,     1,   nil,    12,   nil,   nil,    19,    30,   nil,
    20,   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,    47,
   nil,   nil,   nil,   nil,    19,   nil,    13,    19,   nil,    19,
    47,   nil,   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    59,    59,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,   nil,   nil,
   nil,   nil,   nil,    39,   nil,    59,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    19,    30,    30,   nil,    15,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    39,   nil,    59,   nil,   nil,   nil,   nil,    19,   nil,
   nil,    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    19,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    19,   nil,   nil,   nil,   nil,   nil,
    19,   nil,    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,
   nil,   nil,   nil,   nil,    19,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,   nil,   nil,
   nil,   nil,   nil,    19,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    12 ]

racc_goto_pointer = [
   nil,    92,    88,    87,    85,    77,    51,    41,   -10,   -58,
   nil,   -49,   -19,  -119,   nil,    -6,   -45,   -16,   -97,    -7,
  -161,    27,    15,    10,   -51,   nil,     8,   -46,   -91,  -161,
    -8,   nil,   -92,   nil,   nil,   nil,  -187,  -186,  -185,   -74,
  -239,  -238,  -180,  -216,  -215,   nil,   nil,  -167,   nil,  -176,
   nil,   nil,   nil,  -150,  -146,   -66,   nil,   nil,   nil,   -72,
   nil,   nil,   nil,   nil,    63,    -6,    10,   -68,    15,   nil,
   nil,    66,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  -191,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   188,   nil,   nil,   nil,   nil,
    98,   nil,    37,   127,     6,   nil,   nil,   nil,   nil,   148,
   nil,   nil,   nil,   nil,    15,    18,   nil,   nil,   nil,   nil,
    38,    63,   241,    64,    65,   108,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    28,   147,   141,   128,   142,   nil,
   143,   144,   145,   131,   133,   135,   136,   137,   138,    51,
   140,   146,   149,    23,   nil,    22,   nil,   nil,   nil,    24,
    25,    26,    27,    29,    31,    32,    33,    34,    36,    40,
   nil,    50,    54 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 76, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  3, 78, :_reduce_4,
  0, 81, :_reduce_none,
  3, 81, :_reduce_6,
  0, 82, :_reduce_none,
  5, 82, :_reduce_8,
  8, 82, :_reduce_9,
  3, 83, :_reduce_10,
  1, 83, :_reduce_none,
  2, 84, :_reduce_12,
  1, 85, :_reduce_none,
  1, 85, :_reduce_14,
  1, 85, :_reduce_15,
  0, 86, :_reduce_16,
  1, 86, :_reduce_17,
  1, 86, :_reduce_18,
  3, 88, :_reduce_19,
  1, 80, :_reduce_none,
  4, 79, :_reduce_21,
  5, 79, :_reduce_22,
  3, 92, :_reduce_23,
  3, 93, :_reduce_24,
  1, 93, :_reduce_none,
  4, 91, :_reduce_26,
  3, 89, :_reduce_27,
  2, 89, :_reduce_28,
  1, 98, :_reduce_29,
  1, 98, :_reduce_30,
  2, 96, :_reduce_31,
  1, 96, :_reduce_32,
  3, 99, :_reduce_33,
  1, 99, :_reduce_none,
  3, 100, :_reduce_35,
  2, 100, :_reduce_36,
  1, 100, :_reduce_none,
  4, 97, :_reduce_38,
  2, 101, :_reduce_39,
  3, 90, :_reduce_40,
  2, 90, :_reduce_41,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 107, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  3, 108, :_reduce_47,
  4, 108, :_reduce_48,
  5, 109, :_reduce_49,
  1, 110, :_reduce_50,
  2, 110, :_reduce_51,
  1, 110, :_reduce_52,
  2, 110, :_reduce_53,
  1, 110, :_reduce_54,
  1, 110, :_reduce_55,
  2, 110, :_reduce_56,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  2, 112, :_reduce_59,
  4, 113, :_reduce_60,
  1, 115, :_reduce_none,
  0, 102, :_reduce_none,
  2, 102, :_reduce_63,
  0, 103, :_reduce_none,
  3, 103, :_reduce_65,
  3, 117, :_reduce_66,
  1, 117, :_reduce_none,
  1, 118, :_reduce_none,
  0, 104, :_reduce_none,
  2, 104, :_reduce_70,
  1, 120, :_reduce_none,
  6, 121, :_reduce_72,
  5, 121, :_reduce_73,
  4, 123, :_reduce_74,
  3, 123, :_reduce_75,
  1, 124, :_reduce_none,
  3, 124, :_reduce_77,
  3, 95, :_reduce_78,
  1, 95, :_reduce_none,
  4, 125, :_reduce_80,
  3, 125, :_reduce_81,
  4, 126, :_reduce_82,
  3, 126, :_reduce_83,
  2, 127, :_reduce_84,
  1, 105, :_reduce_85,
  3, 116, :_reduce_86,
  1, 116, :_reduce_none,
  1, 114, :_reduce_none,
  3, 114, :_reduce_89,
  1, 128, :_reduce_none,
  3, 128, :_reduce_91,
  2, 129, :_reduce_92,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 130, :_reduce_none,
  1, 132, :_reduce_none,
  3, 132, :_reduce_97,
  1, 132, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  3, 135, :_reduce_105,
  3, 135, :_reduce_106,
  3, 135, :_reduce_107,
  3, 135, :_reduce_108,
  3, 135, :_reduce_109,
  3, 135, :_reduce_110,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  3, 138, :_reduce_115,
  5, 138, :_reduce_116,
  4, 138, :_reduce_117,
  6, 138, :_reduce_118,
  4, 142, :_reduce_119,
  1, 141, :_reduce_120,
  2, 141, :_reduce_121,
  4, 143, :_reduce_122,
  1, 139, :_reduce_123,
  2, 139, :_reduce_124,
  3, 94, :_reduce_125,
  3, 94, :_reduce_126,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  3, 140, :_reduce_129,
  3, 140, :_reduce_130,
  1, 140, :_reduce_none,
  2, 144, :_reduce_132,
  1, 144, :_reduce_none,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  3, 146, :_reduce_137,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 150, :_reduce_142,
  3, 119, :_reduce_143,
  1, 119, :_reduce_none,
  1, 153, :_reduce_none,
  4, 148, :_reduce_146,
  1, 148, :_reduce_none,
  4, 154, :_reduce_148,
  4, 154, :_reduce_149,
  4, 154, :_reduce_150,
  4, 154, :_reduce_151,
  4, 154, :_reduce_152,
  4, 137, :_reduce_153,
  4, 131, :_reduce_154,
  1, 155, :_reduce_none,
  3, 155, :_reduce_156,
  1, 151, :_reduce_157,
  1, 151, :_reduce_158,
  1, 145, :_reduce_159,
  1, 145, :_reduce_160,
  1, 87, :_reduce_161,
  3, 152, :_reduce_162,
  2, 152, :_reduce_163,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 134, :_reduce_166,
  1, 134, :_reduce_167,
  1, 156, :_reduce_none,
  2, 157, :_reduce_169 ]

racc_reduce_n = 170

racc_shift_n = 302

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :FETCH => 4,
  :FIRST => 5,
  :unsigned_integer => 6,
  :ROWS => 7,
  :ONLY => 8,
  :OFFSET => 9,
  :NEXT => 10,
  :comma => 11,
  :built_in_function => 12,
  :ASC => 13,
  :DESC => 14,
  :left_paren => 15,
  :right_paren => 16,
  :INSERT => 17,
  :INTO => 18,
  :VALUES => 19,
  :SELECT => 20,
  :asterisk => 21,
  :DISTINCT => 22,
  :AS => 23,
  :FROM => 24,
  :CROSS => 25,
  :JOIN => 26,
  :INNER => 27,
  :LEFT => 28,
  :OUTER => 29,
  :RIGHT => 30,
  :FULL => 31,
  :ON => 32,
  :USING => 33,
  :WHERE => 34,
  :GROUP => 35,
  :HAVING => 36,
  :NOT => 37,
  :BETWEEN => 38,
  :AND => 39,
  :IN => 40,
  :LIKE => 41,
  :IS => 42,
  :NULL => 43,
  :EXISTS => 44,
  :identifier => 45,
  :OR => 46,
  :equals_operator => 47,
  :not_equals_operator => 48,
  :less_than_operator => 49,
  :greater_than_operator => 50,
  :less_than_or_equals_operator => 51,
  :greater_than_or_equals_operator => 52,
  :CASE => 53,
  :END => 54,
  :ELSE => 55,
  :WHEN => 56,
  :THEN => 57,
  :plus_sign => 58,
  :minus_sign => 59,
  :solidus => 60,
  :CURRENT_USER => 61,
  :period => 62,
  :COUNT => 63,
  :AVG => 64,
  :MAX => 65,
  :MIN => 66,
  :SUM => 67,
  :unsigned_float => 68,
  :quote => 69,
  :character_string_literal => 70,
  :true_literal => 71,
  :false_literal => 72,
  :DATE => 73,
  :date_string => 74 }

racc_nt_base = 75

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "FETCH",
  "FIRST",
  "unsigned_integer",
  "ROWS",
  "ONLY",
  "OFFSET",
  "NEXT",
  "comma",
  "built_in_function",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "asterisk",
  "DISTINCT",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "CASE",
  "END",
  "ELSE",
  "WHEN",
  "THEN",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "unsigned_float",
  "quote",
  "character_string_literal",
  "true_literal",
  "false_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "fetch_only_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_name",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "distinct_select_list",
  "table_expression",
  "select_list",
  "select_sublist",
  "derived_column",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "column_reference",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_function",
  "boolean_primary",
  "predicate",
  "boolean_literal",
  "comparison_predicate",
  "row_value_constructor_element",
  "general_function",
  "case_expression",
  "when_expressions",
  "term",
  "when_value_expressions",
  "when_value_expression",
  "when_expression",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "general_literal",
  "qualifier",
  "general_set_function",
  "argument_list",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1], val[2]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 22)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(0, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_9(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(val[1], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 26)
  def _reduce_10(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 11 omitted

module_eval(<<'.,.,', 'parser.racc', 30)
  def _reduce_12(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.racc', 34)
  def _reduce_14(val, _values, result)
     result = SQLParser::Statement::BuiltInFunction.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 35)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_24(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 25 omitted

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_27(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::Distinct.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 74)
  def _reduce_32(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_33(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 34 omitted

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_38(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_39(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_40(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_41(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_49(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 112)
  def _reduce_50(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 113)
  def _reduce_51(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_53(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_54(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 57 omitted

# reduce 58 omitted

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

module_eval(<<'.,.,', 'parser.racc', 135)
  def _reduce_63(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 64 omitted

module_eval(<<'.,.,', 'parser.racc', 139)
  def _reduce_65(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_66(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 150)
  def _reduce_70(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 71 omitted

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_72(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_73(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_74(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_75(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 76 omitted

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_77(val, _values, result)
     result = SQLParser::Statement::InValueList.new(Array(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 169)
  def _reduce_78(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 79 omitted

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 180)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_84(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_86(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 87 omitted

# reduce 88 omitted

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_89(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 90 omitted

module_eval(<<'.,.,', 'parser.racc', 202)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 205)
  def _reduce_92(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

module_eval(<<'.,.,', 'parser.racc', 215)
  def _reduce_97(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_105(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 229)
  def _reduce_106(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_107(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_108(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_109(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 233)
  def _reduce_110(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_115(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(nil,val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_116(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(nil,val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_117(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(val[1], val[2], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_118(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 252)
  def _reduce_119(val, _values, result)
     result = SQLParser::Statement::WhenClause.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_120(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_121(val, _values, result)
     result = [ *val[0], val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_122(val, _values, result)
     result = SQLParser::Statement::WhenClause.new(val[1], val[3])  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_123(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_124(val, _values, result)
     result = [ *val[0], val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_125(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_126(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_129(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_130(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 131 omitted

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_132(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_137(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_142(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 298)
  def _reduce_143(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_146(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 147 omitted

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_148(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_149(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_150(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_151(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_152(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 317)
  def _reduce_153(val, _values, result)
     result = SQLParser::Statement::FunctionCall.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_154(val, _values, result)
     result = SQLParser::Statement::BooleanFunction.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 155 omitted

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_156(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_157(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_158(val, _values, result)
    result = SQLParser::Statement::Float.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_159(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 333)
  def _reduce_160(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 337)
  def _reduce_161(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 341)
  def _reduce_162(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 342)
  def _reduce_163(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 164 omitted

# reduce 165 omitted

module_eval(<<'.,.,', 'parser.racc', 347)
  def _reduce_166(val, _values, result)
     result = SQLParser::Statement::True.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 348)
  def _reduce_167(val, _values, result)
     result = SQLParser::Statement::False.new 
    result
  end
.,.,

# reduce 168 omitted

module_eval(<<'.,.,', 'parser.racc', 354)
  def _reduce_169(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
