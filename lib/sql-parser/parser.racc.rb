#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.16
# from Racc grammar file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 374)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    53,   218,   274,    95,   115,   115,  -158,   220,   261,   141,
   114,   114,   251,     8,   262,     9,    67,   221,    93,    94,
    10,    68,    87,    79,    53,    28,  -158,  -158,   286,  -158,
  -158,  -158,   257,    38,   291,   149,  -158,  -158,  -158,  -158,
  -158,    96,   144,   145,    81,    81,   220,    81,    81,   293,
    29,   -90,   -90,   182,   183,    55,    56,   294,    43,   295,
    47,    49,    50,    51,    52,    54,    57,    28,    60,    61,
    62,    64,   219,   252,    29,   253,   254,   106,   105,    55,
    56,   297,    43,   220,    47,    49,    50,    51,    52,    54,
    57,    53,    60,    61,    62,    64,    81,  -170,   220,   302,
    38,  -170,   135,   136,    91,   197,   198,   139,   303,    10,
   305,   307,   308,   309,   310,    53,    28,  -170,  -170,   313,
  -170,  -170,  -170,    81,    38,    11,    13,  -170,  -170,  -170,
  -170,  -170,    14,    20,    28,    65,    69,  -170,  -170,  -170,
    20,    29,    84,    86,   -90,    99,    55,    56,   100,    43,
   101,    47,    49,    50,    51,    52,    54,    57,    28,    60,
    61,    62,    64,   102,   103,    29,   104,   107,   108,    72,
    55,    56,   109,    43,    81,    47,    49,    50,    51,    52,
    54,    57,    53,    60,    61,    62,    64,    73,   209,    75,
    76,   141,    77,    78,   242,   243,    20,   124,   125,   126,
    10,   127,   128,    81,   131,    20,    53,    81,   204,   205,
    72,   206,   207,   208,   139,    38,   169,   149,   210,   211,
   212,   213,   214,    81,   144,   145,   177,   178,    73,   179,
    75,    76,    29,    77,    78,   180,   119,    55,    56,   187,
    43,   131,    47,    49,    50,    51,    52,    54,    57,    28,
    60,    61,    62,    64,    53,   189,    29,   190,    20,    20,
   194,    55,    56,   141,    43,   215,    47,    49,    50,    51,
    52,    54,    57,   219,    60,    61,    62,    64,    53,   224,
   225,   226,   227,   228,   229,   230,   231,    38,   233,   234,
    81,   238,   245,   246,   220,   247,   144,   222,   249,   250,
   169,   257,    53,    10,    29,   275,   276,   278,   279,    55,
    56,    38,    43,   281,    47,    49,    50,    51,    52,    54,
    57,    28,    60,    61,    62,    64,    53,   nil,    29,   nil,
   nil,   nil,   nil,    55,    56,    38,    43,   nil,    47,    49,
    50,    51,    52,    54,    57,    28,    60,    61,    62,    64,
    53,   nil,    29,   nil,   nil,   nil,   nil,    55,    56,    38,
    43,   nil,    47,    49,    50,    51,    52,    54,    57,    28,
    60,    61,    62,    64,   nil,   nil,    29,   nil,   nil,   nil,
   nil,    55,    56,   nil,    43,   nil,    47,    49,    50,    51,
    52,    54,    57,    28,    60,    61,    62,    64,    53,   nil,
    29,   nil,   nil,   nil,   nil,    55,    56,    38,    43,   nil,
    47,    49,    50,    51,    52,    54,    57,   171,    60,    61,
    62,    64,    53,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    28,   nil,   nil,   nil,   nil,    53,   nil,    29,   nil,
   nil,   nil,   nil,    55,    56,    38,    43,   nil,    47,    49,
    50,    51,    52,    54,    57,    28,    60,    61,    62,    64,
    53,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   255,
    43,   nil,    47,    49,    50,    51,    52,    54,    57,    28,
    60,    61,    62,    64,   nil,   nil,    29,   nil,   nil,   nil,
   nil,    55,    56,   nil,    43,   nil,    47,    49,    50,    51,
    52,    54,    57,   222,    60,    61,    62,    64,   nil,   nil,
    29,   nil,   nil,   nil,   nil,    55,    56,   nil,    43,   nil,
    47,    49,    50,    51,    52,    54,    57,    53,    60,    61,
    62,    64,   nil,   nil,   nil,   nil,    38,   nil,    72,   nil,
   nil,   nil,   118,   nil,   nil,    72,    22,    24,   nil,   nil,
   119,    53,   nil,   nil,    71,   nil,    73,   nil,    75,    76,
    38,    77,    78,    73,   nil,    75,    76,   nil,    77,    78,
    28,   nil,   nil,   nil,   nil,   nil,   nil,    29,   nil,   nil,
   nil,   nil,    55,    56,   nil,    43,   nil,    47,    49,    50,
    51,    52,    54,    57,    28,    60,    61,    62,    64,    53,
   nil,    29,   nil,   nil,   nil,   nil,    55,    56,    38,    43,
   nil,    47,    49,    50,    51,    52,    54,    57,    22,    60,
    61,    62,    64,    53,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    28,   nil,   nil,   nil,   nil,    53,   nil,    29,
   nil,   nil,   nil,   nil,    55,    56,    38,    43,   nil,    47,
    49,    50,    51,    52,    54,    57,    28,    60,    61,    62,
    64,    53,   nil,    29,   nil,   nil,   nil,   nil,    55,    56,
    38,    43,   nil,    47,    49,    50,    51,    52,    54,    57,
    28,    60,    61,    62,    64,    53,   nil,    29,   nil,   nil,
   nil,   nil,    55,    56,   255,    43,   nil,    47,    49,    50,
    51,    52,    54,    57,    28,    60,    61,    62,    64,    53,
   nil,   nil,   nil,   nil,   nil,   nil,    55,    56,    38,    43,
   nil,    47,    49,    50,    51,    52,    54,    57,   222,    60,
    61,    62,    64,    53,   nil,    29,   nil,   nil,   nil,   nil,
    55,    56,   255,    43,   nil,    47,    49,    50,    51,    52,
    54,    57,    28,    60,    61,    62,    64,    53,   nil,   nil,
   nil,   nil,   nil,   nil,    55,    56,    38,    43,   nil,    47,
    49,    50,    51,    52,    54,    57,   222,    60,    61,    62,
    64,    53,   nil,    29,   nil,   nil,   nil,   nil,    55,    56,
   255,    43,   nil,    47,    49,    50,    51,    52,    54,    57,
    28,    60,    61,    62,    64,    53,   nil,    29,   nil,   nil,
   nil,   nil,    55,    56,   255,    43,   nil,    47,    49,    50,
    51,    52,    54,    57,   222,    60,    61,    62,    64,    53,
   nil,    29,   nil,   nil,   nil,   nil,    55,    56,   255,    43,
   nil,    47,    49,    50,    51,    52,    54,    57,   222,    60,
    61,    62,    64,    53,   nil,    29,   nil,   nil,   nil,   nil,
    55,    56,   255,    43,   nil,    47,    49,    50,    51,    52,
    54,    57,   222,    60,    61,    62,    64,    53,   nil,    29,
   nil,   nil,   nil,   nil,    55,    56,   255,    43,   nil,    47,
    49,    50,    51,    52,    54,    57,   222,    60,    61,    62,
    64,    53,   nil,    29,   nil,   nil,   nil,   nil,    55,    56,
   255,    43,   nil,    47,    49,    50,    51,    52,    54,    57,
   222,    60,    61,    62,    64,    53,   nil,    29,   nil,   nil,
   nil,   nil,    55,    56,    38,    43,   nil,    47,    49,    50,
    51,    52,    54,    57,   222,    60,    61,    62,    64,    53,
   nil,    29,   nil,   nil,   nil,   nil,    55,    56,    38,    43,
   nil,    47,    49,    50,    51,    52,    54,    57,    28,    60,
    61,    62,    64,   nil,   nil,    29,   nil,   nil,   nil,   nil,
    55,    56,   nil,    43,   nil,    47,    49,    50,    51,    52,
    54,    57,    28,    60,    61,    62,    64,    53,   nil,    29,
   nil,   nil,   nil,   nil,    55,    56,   141,    43,   nil,    47,
    49,    50,    51,    52,    54,    57,   nil,    60,    61,    62,
    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    53,
   nil,   nil,   149,   nil,   nil,   nil,   nil,   nil,   141,   144,
   145,   nil,   nil,   nil,   nil,   nil,   nil,    29,   nil,   nil,
   nil,   nil,    55,    56,   nil,    43,   nil,    47,    49,    50,
    51,    52,    54,    57,   149,    60,    61,    62,    64,    53,
   nil,   144,   145,   nil,   nil,   nil,   nil,   nil,    38,    29,
   nil,   nil,   nil,   nil,    55,    56,   nil,    43,   nil,    47,
    49,    50,    51,    52,    54,    57,   nil,    60,    61,    62,
    64,    53,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    38,   nil,    28,   nil,   nil,   nil,   nil,   nil,   nil,    29,
   nil,   nil,   nil,   nil,    55,    56,   nil,    43,   nil,    47,
    49,    50,    51,    52,    54,    57,    53,    60,    61,    62,
    64,   nil,   nil,   nil,    28,    38,   nil,   nil,   nil,   nil,
   nil,    29,   nil,   nil,   nil,   nil,    55,    56,   nil,    43,
   nil,    47,    49,    50,    51,    52,    54,    57,    53,    60,
    61,    62,    64,   nil,   nil,   nil,   nil,    38,   nil,    28,
   nil,   nil,   nil,   nil,   nil,   nil,    29,   nil,   nil,   nil,
   nil,    55,    56,   nil,    43,   nil,    47,    49,    50,    51,
    52,    54,    57,    53,    60,    61,    62,    64,   nil,   nil,
   nil,    28,    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    91,   nil,    55,    56,   nil,    43,   nil,    47,    49,
    50,    51,    52,    54,    57,    53,    60,    61,    62,    64,
   nil,   nil,   nil,   nil,   141,   nil,    28,   nil,   nil,   nil,
   nil,   nil,   nil,    29,   nil,   nil,   nil,   nil,    55,    56,
   nil,    43,   nil,    47,    49,    50,    51,    52,    54,    57,
   149,    60,    61,    62,    64,    53,   nil,   144,   145,   nil,
   nil,   nil,   nil,   nil,   255,    29,   nil,   nil,   nil,   nil,
    55,    56,   nil,    43,   nil,    47,    49,    50,    51,    52,
    54,    57,   nil,    60,    61,    62,    64,    53,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   141,   nil,   222,   nil,
   nil,   nil,   nil,   nil,   nil,    29,   nil,   nil,   nil,   nil,
    55,    56,   nil,    43,   nil,    47,    49,    50,    51,    52,
    54,    57,   149,    60,    61,    62,    64,    53,   nil,   144,
   145,   nil,   nil,   nil,   nil,   nil,   141,    29,   nil,   nil,
   nil,   nil,    55,    56,   nil,    43,   nil,    47,    49,    50,
    51,    52,    54,    57,   nil,    60,    61,    62,    64,    53,
   nil,   nil,   149,   nil,   nil,   nil,   nil,   nil,    38,   144,
   145,   nil,   nil,   nil,   nil,   nil,   nil,    29,   nil,   nil,
   nil,   nil,    55,    56,   nil,    43,   nil,    47,    49,    50,
    51,    52,    54,    57,    53,    60,    61,    62,    64,   nil,
   nil,   nil,    28,   255,   nil,   nil,   nil,   nil,   nil,    29,
   nil,   nil,   nil,   nil,    55,    56,   nil,    43,   nil,    47,
    49,    50,    51,    52,    54,    57,    53,    60,    61,    62,
    64,   nil,   nil,   nil,   nil,    38,   nil,   222,   nil,   nil,
   nil,   nil,   nil,   nil,    29,   nil,   nil,   nil,   nil,    55,
    56,   nil,    43,   nil,    47,    49,    50,    51,    52,    54,
    57,    53,    60,    61,    62,    64,   nil,   nil,   nil,    28,
   255,   nil,   nil,   nil,   nil,   nil,    29,   nil,   nil,   nil,
   nil,    55,    56,   nil,    43,   nil,    47,    49,    50,    51,
    52,    54,    57,   nil,    60,    61,    62,    64,   nil,   nil,
    53,   nil,   nil,   nil,   222,   nil,   nil,   nil,   nil,    38,
   nil,    29,   nil,   nil,   nil,   nil,    55,    56,    10,    43,
   nil,    47,    49,    50,    51,    52,    54,    57,   nil,    60,
    61,    62,    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    28,   nil,   nil,   nil,   nil,   nil,   nil,
    29,   nil,   nil,   nil,   nil,    55,    56,   nil,    43,   nil,
    47,    49,    50,    51,    52,    54,    57,   nil,    60,    61,
    62,    64 ]

racc_action_check = [
    91,   145,   222,    32,   180,    69,   294,   147,   208,    91,
   180,    69,   202,     0,   208,     0,    12,   147,    30,    30,
     0,    12,    27,    16,   279,   246,   294,   294,   248,   294,
   294,   294,   253,   279,   256,    91,   294,   294,   294,   294,
   294,    32,    91,    91,    27,    16,   202,   180,    69,   261,
    91,   145,   222,   112,   112,    91,    91,   269,    91,   270,
    91,    91,    91,    91,    91,    91,    91,   279,    91,    91,
    91,    91,   272,   204,   279,   204,   204,    57,    57,   279,
   279,   276,   279,   280,   279,   279,   279,   279,   279,   279,
   279,   257,   279,   279,   279,   279,   281,   154,   282,   283,
   257,   154,    89,    89,    89,   138,   138,   138,   288,   257,
   292,   296,   297,   299,   300,   139,   302,   154,   154,   308,
   154,   154,   154,   310,   139,     1,     6,   154,   154,   154,
   154,   154,     8,     9,   257,    11,    13,   154,   154,   154,
    14,   257,    21,    26,    28,    44,   257,   257,    47,   257,
    49,   257,   257,   257,   257,   257,   257,   257,   139,   257,
   257,   257,   257,    50,    51,   139,    52,    64,    67,   192,
   139,   139,    68,   139,    71,   139,   139,   139,   139,   139,
   139,   139,   141,   139,   139,   139,   139,   192,   143,   192,
   192,   141,   192,   192,   192,   192,    72,    73,    74,    76,
   141,    77,    78,    79,    83,    84,   102,    87,   143,   143,
   132,   143,   143,   143,    90,   102,    98,   141,   143,   143,
   143,   143,   143,    99,   141,   141,   105,   108,   132,   109,
   132,   132,   141,   132,   132,   110,   117,   141,   141,   119,
   141,   120,   141,   141,   141,   141,   141,   141,   141,   102,
   141,   141,   141,   141,   149,   121,   102,   122,   124,   125,
   130,   102,   102,   149,   102,   144,   102,   102,   102,   102,
   102,   102,   102,   146,   102,   102,   102,   102,   274,   171,
   172,   173,   174,   175,   176,   178,   179,   274,   185,   186,
   189,   190,   193,   194,   195,   196,   149,   149,   200,   201,
   203,   206,   187,   215,   149,   230,   231,   235,   236,   149,
   149,   187,   149,   243,   149,   149,   149,   149,   149,   149,
   149,   274,   149,   149,   149,   149,   103,   nil,   274,   nil,
   nil,   nil,   nil,   274,   274,   103,   274,   nil,   274,   274,
   274,   274,   274,   274,   274,   187,   274,   274,   274,   274,
   104,   nil,   187,   nil,   nil,   nil,   nil,   187,   187,   104,
   187,   nil,   187,   187,   187,   187,   187,   187,   187,   103,
   187,   187,   187,   187,   nil,   nil,   103,   nil,   nil,   nil,
   nil,   103,   103,   nil,   103,   nil,   103,   103,   103,   103,
   103,   103,   103,   104,   103,   103,   103,   103,   100,   nil,
   104,   nil,   nil,   nil,   nil,   104,   104,   100,   104,   nil,
   104,   104,   104,   104,   104,   104,   104,   100,   104,   104,
   104,   104,    33,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    33,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   100,   nil,   nil,   nil,   nil,    38,   nil,   100,   nil,
   nil,   nil,   nil,   100,   100,    38,   100,   nil,   100,   100,
   100,   100,   100,   100,   100,    33,   100,   100,   100,   100,
   303,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   303,
    33,   nil,    33,    33,    33,    33,    33,    33,    33,    38,
    33,    33,    33,    33,   nil,   nil,    38,   nil,   nil,   nil,
   nil,    38,    38,   nil,    38,   nil,    38,    38,    38,    38,
    38,    38,    38,   303,    38,    38,    38,    38,   nil,   nil,
   303,   nil,   nil,   nil,   nil,   303,   303,   nil,   303,   nil,
   303,   303,   303,   303,   303,   303,   303,    10,   303,   303,
   303,   303,   nil,   nil,   nil,   nil,    10,   nil,    70,   nil,
   nil,   nil,    70,   nil,   nil,    15,    10,    10,   nil,   nil,
    70,   198,   nil,   nil,    15,   nil,    70,   nil,    70,    70,
   198,    70,    70,    15,   nil,    15,    15,   nil,    15,    15,
    10,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,
   nil,   nil,    10,    10,   nil,    10,   nil,    10,    10,    10,
    10,    10,    10,    10,   198,    10,    10,    10,    10,    24,
   nil,   198,   nil,   nil,   nil,   nil,   198,   198,    24,   198,
   nil,   198,   198,   198,   198,   198,   198,   198,    24,   198,
   198,   198,   198,   101,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   101,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    24,   nil,   nil,   nil,   nil,   118,   nil,    24,
   nil,   nil,   nil,   nil,    24,    24,   118,    24,   nil,    24,
    24,    24,    24,    24,    24,    24,   101,    24,    24,    24,
    24,    96,   nil,   101,   nil,   nil,   nil,   nil,   101,   101,
    96,   101,   nil,   101,   101,   101,   101,   101,   101,   101,
   118,   101,   101,   101,   101,   205,   nil,   118,   nil,   nil,
   nil,   nil,   118,   118,   205,   118,   nil,   118,   118,   118,
   118,   118,   118,   118,    96,   118,   118,   118,   118,    95,
   nil,   nil,   nil,   nil,   nil,   nil,    96,    96,    95,    96,
   nil,    96,    96,    96,    96,    96,    96,    96,   205,    96,
    96,    96,    96,   207,   nil,   205,   nil,   nil,   nil,   nil,
   205,   205,   207,   205,   nil,   205,   205,   205,   205,   205,
   205,   205,    95,   205,   205,   205,   205,    94,   nil,   nil,
   nil,   nil,   nil,   nil,    95,    95,    94,    95,   nil,    95,
    95,    95,    95,    95,    95,    95,   207,    95,    95,    95,
    95,   209,   nil,   207,   nil,   nil,   nil,   nil,   207,   207,
   209,   207,   nil,   207,   207,   207,   207,   207,   207,   207,
    94,   207,   207,   207,   207,   210,   nil,    94,   nil,   nil,
   nil,   nil,    94,    94,   210,    94,   nil,    94,    94,    94,
    94,    94,    94,    94,   209,    94,    94,    94,    94,   211,
   nil,   209,   nil,   nil,   nil,   nil,   209,   209,   211,   209,
   nil,   209,   209,   209,   209,   209,   209,   209,   210,   209,
   209,   209,   209,   212,   nil,   210,   nil,   nil,   nil,   nil,
   210,   210,   212,   210,   nil,   210,   210,   210,   210,   210,
   210,   210,   211,   210,   210,   210,   210,   213,   nil,   211,
   nil,   nil,   nil,   nil,   211,   211,   213,   211,   nil,   211,
   211,   211,   211,   211,   211,   211,   212,   211,   211,   211,
   211,   214,   nil,   212,   nil,   nil,   nil,   nil,   212,   212,
   214,   212,   nil,   212,   212,   212,   212,   212,   212,   212,
   213,   212,   212,   212,   212,   295,   nil,   213,   nil,   nil,
   nil,   nil,   213,   213,   295,   213,   nil,   213,   213,   213,
   213,   213,   213,   213,   214,   213,   213,   213,   213,   218,
   nil,   214,   nil,   nil,   nil,   nil,   214,   214,   218,   214,
   nil,   214,   214,   214,   214,   214,   214,   214,   295,   214,
   214,   214,   214,   nil,   nil,   295,   nil,   nil,   nil,   nil,
   295,   295,   nil,   295,   nil,   295,   295,   295,   295,   295,
   295,   295,   218,   295,   295,   295,   295,   219,   nil,   218,
   nil,   nil,   nil,   nil,   218,   218,   219,   218,   nil,   218,
   218,   218,   218,   218,   218,   218,   nil,   218,   218,   218,
   218,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   220,
   nil,   nil,   219,   nil,   nil,   nil,   nil,   nil,   220,   219,
   219,   nil,   nil,   nil,   nil,   nil,   nil,   219,   nil,   nil,
   nil,   nil,   219,   219,   nil,   219,   nil,   219,   219,   219,
   219,   219,   219,   219,   220,   219,   219,   219,   219,   221,
   nil,   220,   220,   nil,   nil,   nil,   nil,   nil,   221,   220,
   nil,   nil,   nil,   nil,   220,   220,   nil,   220,   nil,   220,
   220,   220,   220,   220,   220,   220,   nil,   220,   220,   220,
   220,    93,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    93,   nil,   221,   nil,   nil,   nil,   nil,   nil,   nil,   221,
   nil,   nil,   nil,   nil,   221,   221,   nil,   221,   nil,   221,
   221,   221,   221,   221,   221,   221,   234,   221,   221,   221,
   221,   nil,   nil,   nil,    93,   234,   nil,   nil,   nil,   nil,
   nil,    93,   nil,   nil,   nil,   nil,    93,    93,   nil,    93,
   nil,    93,    93,    93,    93,    93,    93,    93,    29,    93,
    93,    93,    93,   nil,   nil,   nil,   nil,    29,   nil,   234,
   nil,   nil,   nil,   nil,   nil,   nil,   234,   nil,   nil,   nil,
   nil,   234,   234,   nil,   234,   nil,   234,   234,   234,   234,
   234,   234,   234,    86,   234,   234,   234,   234,   nil,   nil,
   nil,    29,    86,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    29,   nil,    29,    29,   nil,    29,   nil,    29,    29,
    29,    29,    29,    29,    29,   242,    29,    29,    29,    29,
   nil,   nil,   nil,   nil,   242,   nil,    86,   nil,   nil,   nil,
   nil,   nil,   nil,    86,   nil,   nil,   nil,   nil,    86,    86,
   nil,    86,   nil,    86,    86,    86,    86,    86,    86,    86,
   242,    86,    86,    86,    86,   291,   nil,   242,   242,   nil,
   nil,   nil,   nil,   nil,   291,   242,   nil,   nil,   nil,   nil,
   242,   242,   nil,   242,   nil,   242,   242,   242,   242,   242,
   242,   242,   nil,   242,   242,   242,   242,   245,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   245,   nil,   291,   nil,
   nil,   nil,   nil,   nil,   nil,   291,   nil,   nil,   nil,   nil,
   291,   291,   nil,   291,   nil,   291,   291,   291,   291,   291,
   291,   291,   245,   291,   291,   291,   291,   131,   nil,   245,
   245,   nil,   nil,   nil,   nil,   nil,   131,   245,   nil,   nil,
   nil,   nil,   245,   245,   nil,   245,   nil,   245,   245,   245,
   245,   245,   245,   245,   nil,   245,   245,   245,   245,   249,
   nil,   nil,   131,   nil,   nil,   nil,   nil,   nil,   249,   131,
   131,   nil,   nil,   nil,   nil,   nil,   nil,   131,   nil,   nil,
   nil,   nil,   131,   131,   nil,   131,   nil,   131,   131,   131,
   131,   131,   131,   131,   252,   131,   131,   131,   131,   nil,
   nil,   nil,   249,   252,   nil,   nil,   nil,   nil,   nil,   249,
   nil,   nil,   nil,   nil,   249,   249,   nil,   249,   nil,   249,
   249,   249,   249,   249,   249,   249,   136,   249,   249,   249,
   249,   nil,   nil,   nil,   nil,   136,   nil,   252,   nil,   nil,
   nil,   nil,   nil,   nil,   252,   nil,   nil,   nil,   nil,   252,
   252,   nil,   252,   nil,   252,   252,   252,   252,   252,   252,
   252,   254,   252,   252,   252,   252,   nil,   nil,   nil,   136,
   254,   nil,   nil,   nil,   nil,   nil,   136,   nil,   nil,   nil,
   nil,   136,   136,   nil,   136,   nil,   136,   136,   136,   136,
   136,   136,   136,   nil,   136,   136,   136,   136,   nil,   nil,
   255,   nil,   nil,   nil,   254,   nil,   nil,   nil,   nil,   255,
   nil,   254,   nil,   nil,   nil,   nil,   254,   254,   255,   254,
   nil,   254,   254,   254,   254,   254,   254,   254,   nil,   254,
   254,   254,   254,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   255,   nil,   nil,   nil,   nil,   nil,   nil,
   255,   nil,   nil,   nil,   nil,   255,   255,   nil,   255,   nil,
   255,   255,   255,   255,   255,   255,   255,   nil,   255,   255,
   255,   255 ]

racc_action_pointer = [
    -4,   125,   nil,   nil,   nil,   nil,   124,   nil,   114,    84,
   531,   135,    12,   133,    91,   544,    -4,   nil,   nil,   nil,
   nil,   114,   nil,   nil,   603,   nil,   132,    -5,    79,  1182,
   -43,   nil,   -22,   416,   nil,   nil,   nil,   nil,   440,   nil,
   nil,   nil,   nil,   nil,    80,   nil,   nil,   133,   nil,   135,
   148,   149,   151,   nil,   nil,   nil,   nil,     5,   nil,   nil,
   nil,   nil,   nil,   nil,    89,   nil,   nil,   163,   166,    -1,
   537,   125,   147,   167,   168,   nil,   166,   168,   169,   154,
   nil,   nil,   nil,   166,   156,   nil,  1217,   158,   nil,    45,
   155,    -6,   nil,  1115,   771,   723,   675,   nil,   200,   174,
   392,   627,   200,   320,   344,   154,   nil,   nil,   221,   222,
   224,   nil,    40,   nil,   nil,   nil,   nil,   213,   651,   224,
   203,   244,   236,   nil,   209,   210,   nil,   nil,   nil,   nil,
   221,  1361,   199,   nil,   nil,   nil,  1460,   nil,    48,   109,
   nil,   176,   nil,   167,   250,   -14,   230,   -43,   nil,   248,
   nil,   nil,   nil,   nil,    76,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   263,   264,   265,   266,   267,   268,   nil,   278,   282,
    -2,   nil,   nil,   nil,   nil,   272,   278,   296,   nil,   241,
   269,   nil,   158,   252,   290,   244,   238,   nil,   555,   nil,
   238,   283,    -4,   284,    31,   699,   286,   747,   -33,   795,
   819,   843,   867,   891,   915,   279,   nil,   nil,   963,  1011,
  1043,  1083,   -13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   297,   296,   nil,   nil,  1150,   291,   297,   nil,   nil,   nil,
   nil,   nil,  1249,   298,   nil,  1321,   -24,   nil,   -29,  1393,
   nil,   nil,  1428,    17,  1495,  1534,    -9,    85,   nil,   nil,
   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    41,
    48,   nil,    29,   nil,   272,   nil,    75,   nil,   nil,    18,
    33,    47,    48,    88,   nil,   nil,   nil,   nil,    65,   nil,
   nil,  1289,    94,   nil,   -15,   939,    95,   105,   nil,    97,
   103,   nil,    67,   464,   nil,   nil,   nil,   nil,   111,   nil,
    74,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -176,  -176,    -1,    -2,    -3,    -4,    -6,   -21,  -176,  -176,
  -176,  -176,    -8,  -176,  -176,  -176,   -47,   -48,   -50,   -51,
   -90,   -33,   -34,   -35,  -176,   -37,   -39,   -42,  -166,  -176,
  -132,  -133,  -136,  -176,  -138,  -139,  -140,  -141,  -176,  -143,
  -144,  -145,  -146,  -147,  -176,  -149,  -150,  -176,  -152,  -176,
  -176,  -176,  -176,  -162,  -163,  -164,  -165,  -176,  -169,  -170,
  -171,  -172,  -173,  -174,  -176,   315,    -5,  -176,  -176,  -176,
  -176,  -176,  -176,  -176,  -176,   -55,   -57,   -59,   -60,  -176,
   -46,  -166,   -32,   -67,  -176,   -36,  -176,  -176,   -41,  -176,
  -176,  -176,  -128,  -176,  -176,  -176,  -176,  -137,  -176,  -176,
  -176,  -176,  -176,  -176,  -176,  -176,  -168,  -175,  -176,  -176,
    -7,   -12,   -17,   -14,   -15,   -16,   -22,  -176,  -176,  -176,
   -67,   -26,  -176,   -52,  -176,  -176,   -56,   -58,   -61,   -45,
   -69,  -176,   -44,   -38,   -40,  -120,  -176,  -129,  -176,  -176,
  -125,  -176,   -76,  -176,  -176,  -166,   -93,  -176,   -95,  -176,
   -98,   -99,  -100,  -101,  -103,  -104,  -105,  -106,  -107,  -108,
  -109,  -116,  -117,  -118,  -119,  -130,  -131,  -134,  -135,  -142,
  -148,  -176,  -176,  -176,  -176,  -176,  -176,  -167,  -176,  -176,
  -176,   -13,   -18,   -19,   -23,  -176,   -30,  -176,   -24,  -176,
  -176,   -53,  -176,   -74,  -176,   -68,  -176,  -122,  -176,  -126,
  -176,  -176,  -176,  -118,  -176,  -176,  -176,  -176,  -176,  -176,
  -176,  -176,  -176,  -176,  -176,  -176,   -49,   -89,  -176,  -176,
  -176,  -176,  -166,   -97,  -151,  -153,  -154,  -155,  -156,  -157,
  -176,  -176,   -11,   -28,  -176,  -176,   -84,   -25,   -27,   -54,
   -62,   -63,  -176,  -176,   -43,  -176,  -176,  -121,  -176,  -176,
   -20,  -102,  -176,  -176,  -176,  -176,  -176,  -176,   -80,   -81,
   -86,  -176,   -88,  -110,  -111,  -112,  -113,  -114,  -115,  -176,
  -160,   -96,   -94,  -127,  -176,    -9,  -176,   -29,   -31,  -176,
   -64,  -176,   -75,   -70,   -72,   -73,  -123,  -124,  -176,   -79,
   -85,  -176,  -176,   -87,  -159,  -176,  -176,  -176,   -83,  -176,
   -66,   -92,  -176,  -176,   -78,   -82,  -161,  -158,  -176,   -65,
  -176,   -71,   -77,   -10,   -91 ]

racc_goto_table = [
    80,   154,    27,   120,   185,   111,   147,    15,   216,    16,
   235,    88,    70,   256,    16,   260,    27,   263,   264,   265,
   266,   267,   268,   269,    90,   284,   140,    92,   258,   116,
    98,   130,   285,    25,   300,   283,   272,   271,   223,    89,
   138,   154,    97,   241,     2,     3,   195,    85,     4,     5,
     6,   154,    12,   113,    66,   122,   202,   110,   181,   154,
   288,   117,   290,   129,    21,    82,   133,    83,   188,   193,
   216,   134,   123,   244,   199,   289,   184,   217,    27,   296,
   292,   311,   132,   170,    16,   165,   166,   137,   285,   239,
   167,   168,   172,   173,   174,   175,   176,   240,     1,   304,
   306,   299,   298,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   186,   312,   nil,   nil,   nil,   nil,   232,   216,   nil,   nil,
   277,   237,   nil,   192,   191,    16,   nil,   nil,   196,   154,
   154,   200,   nil,   203,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   154,   nil,   nil,   154,   nil,   280,   nil,   nil,
   282,   nil,   nil,   nil,   113,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   122,   nil,   nil,   nil,   nil,   nil,   236,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   248,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   270,   nil,   nil,   273,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   186,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   287,   nil,   nil,   nil,   nil,   nil,    98,   nil,   236,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   301,   270,   nil,   nil,   nil,
   nil,   236,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   270,   nil,   nil,
   nil,   nil,   nil,   nil,   314 ]

racc_goto_check = [
    13,    62,    23,    19,    22,    10,    42,    16,    14,    33,
    24,    13,    16,    50,    33,    50,    23,    50,    50,    50,
    50,    50,    50,    83,    68,    46,    70,    71,    52,    17,
    23,    20,    47,    27,    44,    45,    56,    57,    58,    67,
    69,    62,    74,    41,     2,     3,    42,    27,     4,     5,
     6,    62,     7,    13,     8,    13,    42,     9,    12,    62,
    50,    18,    50,    13,    25,    26,    28,    30,    20,    31,
    14,    13,    33,    32,    70,    52,    17,    35,    23,    83,
    24,    46,    16,    13,    33,    23,    23,    71,    47,    39,
    68,    68,    23,    23,    23,    23,    23,    40,     1,    50,
    83,    43,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    23,    50,   nil,   nil,   nil,   nil,    10,    14,   nil,   nil,
    22,    19,   nil,    16,    33,    33,   nil,   nil,    23,    62,
    62,    23,   nil,    23,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    62,   nil,   nil,    62,   nil,    42,   nil,   nil,
    42,   nil,   nil,   nil,    13,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    13,   nil,   nil,   nil,   nil,   nil,    23,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    23,   nil,   nil,    23,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    23,   nil,   nil,   nil,   nil,   nil,    23,   nil,    23,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    13,    23,   nil,   nil,   nil,
   nil,    23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,
   nil,   nil,   nil,   nil,    13 ]

racc_goto_pointer = [
   nil,    98,    44,    45,    48,    49,    50,    46,    42,   -12,
   -64,   nil,   -54,   -16,  -136,   nil,    -2,   -41,    -9,   -68,
   -52,   nil,  -114,    -8,  -177,    54,    44,    23,   -20,   nil,
    46,   -61,  -120,     0,   nil,   -67,   nil,   nil,   nil,  -103,
   -95,  -149,   -85,  -180,  -247,  -211,  -221,  -214,   nil,   nil,
  -192,   nil,  -178,   nil,   nil,   nil,  -184,  -182,  -111,   nil,
   nil,   nil,   -90,   nil,   nil,   nil,   nil,    10,    -5,   -50,
   -64,    -2,   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  -195,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   201,   nil,   nil,   nil,
   nil,   112,   nil,    45,   142,     7,   nil,   nil,   nil,   nil,
   nil,   121,   nil,   163,   nil,   nil,   nil,   nil,    23,    26,
   nil,   nil,   nil,    46,    17,   259,    18,    19,    74,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,   162,   156,
   143,   157,   nil,   158,   159,   160,   146,   148,   150,   151,
   152,   153,    59,   155,   161,   164,    31,   nil,    30,   nil,
   nil,   nil,    32,    33,    34,    35,    37,    39,    40,    41,
    42,    44,    48,   nil,    58,    63 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 80, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  3, 82, :_reduce_5,
  0, 86, :_reduce_none,
  3, 86, :_reduce_7,
  0, 87, :_reduce_none,
  5, 87, :_reduce_9,
  8, 87, :_reduce_10,
  3, 88, :_reduce_11,
  1, 88, :_reduce_none,
  2, 89, :_reduce_13,
  1, 90, :_reduce_none,
  1, 90, :_reduce_15,
  1, 90, :_reduce_16,
  0, 91, :_reduce_17,
  1, 91, :_reduce_18,
  1, 91, :_reduce_19,
  3, 93, :_reduce_20,
  1, 85, :_reduce_none,
  4, 83, :_reduce_22,
  5, 83, :_reduce_23,
  5, 84, :_reduce_24,
  3, 98, :_reduce_25,
  1, 98, :_reduce_26,
  3, 100, :_reduce_27,
  3, 97, :_reduce_28,
  3, 101, :_reduce_29,
  1, 101, :_reduce_none,
  4, 96, :_reduce_31,
  3, 94, :_reduce_32,
  2, 94, :_reduce_33,
  1, 106, :_reduce_34,
  1, 106, :_reduce_35,
  2, 104, :_reduce_36,
  1, 104, :_reduce_37,
  3, 107, :_reduce_38,
  1, 107, :_reduce_none,
  3, 108, :_reduce_40,
  2, 108, :_reduce_41,
  1, 108, :_reduce_none,
  4, 105, :_reduce_43,
  2, 109, :_reduce_44,
  3, 95, :_reduce_45,
  2, 95, :_reduce_46,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 114, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  3, 115, :_reduce_52,
  4, 115, :_reduce_53,
  5, 116, :_reduce_54,
  1, 117, :_reduce_55,
  2, 117, :_reduce_56,
  1, 117, :_reduce_57,
  2, 117, :_reduce_58,
  1, 117, :_reduce_59,
  1, 117, :_reduce_60,
  2, 117, :_reduce_61,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  2, 119, :_reduce_64,
  4, 120, :_reduce_65,
  1, 122, :_reduce_none,
  0, 99, :_reduce_none,
  2, 99, :_reduce_68,
  0, 110, :_reduce_none,
  3, 110, :_reduce_70,
  3, 124, :_reduce_71,
  1, 124, :_reduce_none,
  1, 125, :_reduce_none,
  0, 111, :_reduce_none,
  2, 111, :_reduce_75,
  1, 127, :_reduce_none,
  6, 128, :_reduce_77,
  5, 128, :_reduce_78,
  4, 130, :_reduce_79,
  3, 130, :_reduce_80,
  1, 131, :_reduce_none,
  3, 131, :_reduce_82,
  3, 103, :_reduce_83,
  1, 103, :_reduce_none,
  4, 132, :_reduce_85,
  3, 132, :_reduce_86,
  4, 133, :_reduce_87,
  3, 133, :_reduce_88,
  2, 134, :_reduce_89,
  1, 112, :_reduce_90,
  3, 123, :_reduce_91,
  1, 123, :_reduce_none,
  1, 121, :_reduce_none,
  3, 121, :_reduce_94,
  1, 135, :_reduce_none,
  3, 135, :_reduce_96,
  2, 136, :_reduce_97,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 137, :_reduce_none,
  1, 139, :_reduce_none,
  3, 139, :_reduce_102,
  1, 139, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  3, 142, :_reduce_110,
  3, 142, :_reduce_111,
  3, 142, :_reduce_112,
  3, 142, :_reduce_113,
  3, 142, :_reduce_114,
  3, 142, :_reduce_115,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  3, 145, :_reduce_120,
  5, 145, :_reduce_121,
  4, 145, :_reduce_122,
  6, 145, :_reduce_123,
  4, 149, :_reduce_124,
  1, 148, :_reduce_125,
  2, 148, :_reduce_126,
  4, 150, :_reduce_127,
  1, 146, :_reduce_128,
  2, 146, :_reduce_129,
  3, 102, :_reduce_130,
  3, 102, :_reduce_131,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  3, 147, :_reduce_134,
  3, 147, :_reduce_135,
  1, 147, :_reduce_none,
  2, 151, :_reduce_137,
  1, 151, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  3, 153, :_reduce_142,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 157, :_reduce_147,
  3, 126, :_reduce_148,
  1, 126, :_reduce_none,
  1, 160, :_reduce_none,
  4, 155, :_reduce_151,
  1, 155, :_reduce_none,
  4, 161, :_reduce_153,
  4, 161, :_reduce_154,
  4, 161, :_reduce_155,
  4, 161, :_reduce_156,
  4, 161, :_reduce_157,
  4, 144, :_reduce_158,
  4, 138, :_reduce_159,
  1, 162, :_reduce_none,
  3, 162, :_reduce_161,
  1, 158, :_reduce_162,
  1, 158, :_reduce_163,
  1, 152, :_reduce_164,
  1, 152, :_reduce_165,
  1, 92, :_reduce_166,
  3, 159, :_reduce_167,
  2, 159, :_reduce_168,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_171,
  1, 141, :_reduce_172,
  1, 141, :_reduce_173,
  1, 163, :_reduce_none,
  2, 164, :_reduce_175 ]

racc_reduce_n = 176

racc_shift_n = 315

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :FETCH => 4,
  :FIRST => 5,
  :unsigned_integer => 6,
  :ROWS => 7,
  :ONLY => 8,
  :OFFSET => 9,
  :NEXT => 10,
  :comma => 11,
  :built_in_function => 12,
  :ASC => 13,
  :DESC => 14,
  :left_paren => 15,
  :right_paren => 16,
  :INSERT => 17,
  :INTO => 18,
  :UPDATE => 19,
  :SET => 20,
  :equals_operator => 21,
  :value => 22,
  :VALUES => 23,
  :SELECT => 24,
  :asterisk => 25,
  :DISTINCT => 26,
  :AS => 27,
  :FROM => 28,
  :CROSS => 29,
  :JOIN => 30,
  :INNER => 31,
  :LEFT => 32,
  :OUTER => 33,
  :RIGHT => 34,
  :FULL => 35,
  :ON => 36,
  :USING => 37,
  :WHERE => 38,
  :GROUP => 39,
  :HAVING => 40,
  :NOT => 41,
  :BETWEEN => 42,
  :AND => 43,
  :IN => 44,
  :LIKE => 45,
  :IS => 46,
  :NULL => 47,
  :EXISTS => 48,
  :identifier => 49,
  :OR => 50,
  :not_equals_operator => 51,
  :less_than_operator => 52,
  :greater_than_operator => 53,
  :less_than_or_equals_operator => 54,
  :greater_than_or_equals_operator => 55,
  :CASE => 56,
  :END => 57,
  :ELSE => 58,
  :WHEN => 59,
  :THEN => 60,
  :plus_sign => 61,
  :minus_sign => 62,
  :solidus => 63,
  :CURRENT_USER => 64,
  :period => 65,
  :COUNT => 66,
  :AVG => 67,
  :MAX => 68,
  :MIN => 69,
  :SUM => 70,
  :unsigned_float => 71,
  :quote => 72,
  :character_string_literal => 73,
  :variable => 74,
  :true_literal => 75,
  :false_literal => 76,
  :DATE => 77,
  :date_string => 78 }

racc_nt_base = 79

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "FETCH",
  "FIRST",
  "unsigned_integer",
  "ROWS",
  "ONLY",
  "OFFSET",
  "NEXT",
  "comma",
  "built_in_function",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "UPDATE",
  "SET",
  "equals_operator",
  "value",
  "VALUES",
  "SELECT",
  "asterisk",
  "DISTINCT",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "CASE",
  "END",
  "ELSE",
  "WHEN",
  "THEN",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "unsigned_float",
  "quote",
  "character_string_literal",
  "variable",
  "true_literal",
  "false_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "update_specification",
  "query_expression",
  "order_by_clause",
  "fetch_only_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_name",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "assign_list",
  "where_clause",
  "assign_column",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "distinct_select_list",
  "table_expression",
  "select_list",
  "select_sublist",
  "derived_column",
  "from_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "column_reference",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_function",
  "boolean_primary",
  "predicate",
  "boolean_literal",
  "comparison_predicate",
  "row_value_constructor_element",
  "general_function",
  "case_expression",
  "when_expressions",
  "term",
  "when_value_expressions",
  "when_value_expression",
  "when_expression",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "general_literal",
  "qualifier",
  "general_set_function",
  "argument_list",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

module_eval(<<'.,.,', 'parser.racc', 14)
  def _reduce_5(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1], val[2])
    result
  end
.,.,

# reduce 6 omitted

module_eval(<<'.,.,', 'parser.racc', 19)
  def _reduce_7(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2])
    result
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_9(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(0, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 24)
  def _reduce_10(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(val[1], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 27)
  def _reduce_11(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.racc', 31)
  def _reduce_13(val, _values, result)
     result = val[1].new(val[0])
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.racc', 35)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::BuiltInFunction.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Ascending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Ascending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Descending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_20(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1])
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::Update.new(val[1], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_25(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_26(val, _values, result)
     result = Array(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_27(val, _values, result)
     result = SQLParser::Statement::AssignColumn.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_29(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_32(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::All.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::Distinct.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_37(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_38(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 39 omitted

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_40(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_41(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1])
    result
  end
.,.,

# reduce 42 omitted

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_43(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 100)
  def _reduce_44(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 103)
  def _reduce_45(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_46(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1])
    result
  end
.,.,

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_53(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_54(val, _values, result)
     result = val[1].new(val[0], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 123)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::InnerJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_57(val, _values, result)
     result = SQLParser::Statement::LeftJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 126)
  def _reduce_58(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 127)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::RightJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::FullJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin
    result
  end
.,.,

# reduce 62 omitted

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.racc', 136)
  def _reduce_64(val, _values, result)
     result = SQLParser::Statement::On.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 139)
  def _reduce_65(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2])
    result
  end
.,.,

# reduce 66 omitted

# reduce 67 omitted

module_eval(<<'.,.,', 'parser.racc', 146)
  def _reduce_68(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1])
    result
  end
.,.,

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 150)
  def _reduce_70(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 153)
  def _reduce_71(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_75(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1])
    result
  end
.,.,

# reduce 76 omitted

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_77(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 169)
  def _reduce_78(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_79(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2])
    result
  end
.,.,

# reduce 81 omitted

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::InValueList.new(Array(val[1]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 180)
  def _reduce_83(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 84 omitted

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_86(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_87(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 192)
  def _reduce_88(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_89(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 199)
  def _reduce_90(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 202)
  def _reduce_91(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 92 omitted

# reduce 93 omitted

module_eval(<<'.,.,', 'parser.racc', 208)
  def _reduce_94(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2])
    result
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'parser.racc', 213)
  def _reduce_96(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 216)
  def _reduce_97(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1])
    result
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

module_eval(<<'.,.,', 'parser.racc', 226)
  def _reduce_102(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

module_eval(<<'.,.,', 'parser.racc', 239)
  def _reduce_110(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 240)
  def _reduce_111(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 241)
  def _reduce_112(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 242)
  def _reduce_113(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 243)
  def _reduce_114(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_115(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2])
    result
  end
.,.,

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_120(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(nil,val[1], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_121(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(nil,val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 258)
  def _reduce_122(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(val[1], val[2], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_123(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(val[1], val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_124(val, _values, result)
     result = SQLParser::Statement::WhenClause.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_125(val, _values, result)
     result = [ val[0] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_126(val, _values, result)
     result = [ *val[0], val[1] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 270)
  def _reduce_127(val, _values, result)
     result = SQLParser::Statement::WhenClause.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_128(val, _values, result)
     result = [ val[0] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_129(val, _values, result)
     result = [ *val[0], val[1] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_130(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_131(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2])
    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_134(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_135(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2])
    result
  end
.,.,

# reduce 136 omitted

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_137(val, _values, result)
     result = val[0].new(val[1])
    result
  end
.,.,

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_142(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_147(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_148(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2])
    result
  end
.,.,

# reduce 149 omitted

# reduce 150 omitted

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_151(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new)
    result
  end
.,.,

# reduce 152 omitted

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_153(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_154(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_155(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 323)
  def _reduce_156(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_157(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_158(val, _values, result)
     result = SQLParser::Statement::FunctionCall.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 331)
  def _reduce_159(val, _values, result)
     result = SQLParser::Statement::BooleanFunction.new(val[0], val[2])
    result
  end
.,.,

# reduce 160 omitted

module_eval(<<'.,.,', 'parser.racc', 335)
  def _reduce_161(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 339)
  def _reduce_162(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 340)
  def _reduce_163(val, _values, result)
    result = SQLParser::Statement::Float.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 343)
  def _reduce_164(val, _values, result)
     result = SQLParser::Statement::UnaryPlus
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 344)
  def _reduce_165(val, _values, result)
     result = SQLParser::Statement::UnaryMinus
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 348)
  def _reduce_166(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 352)
  def _reduce_167(val, _values, result)
     result = SQLParser::Statement::String.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 353)
  def _reduce_168(val, _values, result)
     result = SQLParser::Statement::String.new('')
    result
  end
.,.,

# reduce 169 omitted

# reduce 170 omitted

module_eval(<<'.,.,', 'parser.racc', 356)
  def _reduce_171(val, _values, result)
     result = SQLParser::Statement::Variable.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 359)
  def _reduce_172(val, _values, result)
     result = SQLParser::Statement::True.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 360)
  def _reduce_173(val, _values, result)
     result = SQLParser::Statement::False.new
    result
  end
.,.,

# reduce 174 omitted

module_eval(<<'.,.,', 'parser.racc', 366)
  def _reduce_175(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module SQLParser
