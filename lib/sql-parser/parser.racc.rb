#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 319)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    43,    73,    95,   220,    95,   107,   100,    68,    94,    28,
    94,   231,   222,    53,   223,   224,   169,   232,    54,    43,
   101,     7,   103,   104,     8,   105,   106,    70,   225,    70,
   132,   133,   137,   188,    61,    74,    71,    72,   139,    20,
    43,    70,   140,    70,    86,    85,   141,    45,    46,   225,
    33,    44,    37,    39,    40,    41,    42,    47,    20,    50,
   142,   143,    70,   146,   130,   129,    45,    46,    43,    33,
    44,    37,    39,    40,    41,    42,    47,    28,    50,    20,
   167,   168,     8,    99,   170,   171,   172,    45,    46,    43,
    33,    44,    37,    39,    40,    41,    42,    47,    28,    50,
   173,   174,   128,   176,    15,    17,   177,    20,   127,    61,
    61,   183,   184,   126,   188,    45,    46,    43,    33,    44,
    37,    39,    40,    41,    42,    47,    28,    50,    20,    70,
   200,     8,   203,   118,   205,   206,    45,    46,    43,    33,
    44,    37,    39,    40,    41,    42,    47,    28,    50,    70,
   208,   209,    61,   110,    20,   219,    20,    43,    89,   118,
    88,    87,    84,   227,    45,    46,   225,    33,    44,    37,
    39,    40,    41,    42,    47,    83,    50,    20,    43,    82,
    81,    80,    79,    78,    77,    45,    46,   225,    33,    44,
    37,    39,    40,    41,    42,    47,    20,    50,   -86,     8,
    67,   240,    64,    64,    45,    46,   243,    33,    44,    37,
    39,    40,    41,    42,    47,    43,    50,    20,   188,   244,
   203,    61,   227,    55,   147,    45,    46,    51,    33,    44,
    37,    39,    40,    41,    42,    47,    43,    50,   248,    12,
   250,   251,   188,    70,    20,    28,   154,   256,    11,   258,
   259,   260,   261,   151,    20,     9,    70,   nil,   nil,   nil,
   nil,   nil,    45,    46,    43,    33,    44,    37,    39,    40,
    41,    42,    47,    28,    50,    20,   nil,   nil,   nil,    15,
   nil,   nil,   nil,    45,    46,   nil,    33,    44,    37,    39,
    40,    41,    42,    47,   nil,    50,    43,   nil,   nil,   nil,
   nil,   nil,   nil,    20,   nil,   147,   nil,   nil,   nil,   nil,
   nil,    45,    46,   nil,    33,    44,    37,    39,    40,    41,
    42,    47,   nil,    50,   nil,   nil,   nil,   154,    43,   nil,
   nil,   nil,   nil,   nil,   151,    20,   nil,   147,   nil,   nil,
   nil,   nil,     8,    45,    46,   nil,    33,    44,    37,    39,
    40,    41,    42,    47,    43,    50,   nil,   nil,   nil,   154,
   nil,   nil,   nil,   225,   nil,   nil,   151,    20,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    45,    46,   nil,    33,    44,
    37,    39,    40,    41,    42,    47,    43,    50,   nil,   nil,
   nil,   nil,   nil,    20,   nil,   147,   nil,   nil,   nil,   nil,
   nil,    45,    46,   nil,    33,    44,    37,    39,    40,    41,
    42,    47,    43,    50,   nil,   nil,   nil,   154,   nil,   nil,
   nil,    28,    43,   nil,   151,    20,   nil,   nil,   nil,   nil,
   nil,    28,   nil,    45,    46,   nil,    33,    44,    37,    39,
    40,    41,    42,    47,    43,    50,   nil,   nil,   nil,   nil,
   nil,    20,   nil,    28,   nil,   nil,   nil,   nil,   nil,    45,
    46,    20,    33,    44,    37,    39,    40,    41,    42,    47,
   nil,    50,    33,    44,    37,    39,    40,    41,    42,    47,
    43,    50,   nil,    20,   nil,   nil,   nil,   nil,   nil,   225,
   nil,    45,    46,   100,    33,    44,    37,    39,    40,    41,
    42,    47,    43,    50,   nil,   nil,   nil,   101,   nil,   103,
   104,   225,   105,   106,   213,   214,   nil,   nil,   nil,    20,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,    43,
    33,    44,    37,    39,    40,    41,    42,    47,   225,    50,
   nil,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,
    46,    43,    33,    44,    37,    39,    40,    41,    42,    47,
   225,    50,   nil,   nil,   nil,   nil,   nil,   nil,    20,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,    43,    33,
    44,    37,    39,    40,    41,    42,    47,   225,    50,   nil,
    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,
    43,    33,    44,    37,    39,    40,    41,    42,    47,    28,
    50,   nil,   nil,   nil,   nil,   nil,   nil,    20,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    45,    46,    43,    33,    44,
    37,    39,    40,    41,    42,    47,    28,    50,   nil,    20,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,    43,
    33,    44,    37,    39,    40,    41,    42,    47,   225,    50,
   nil,   nil,   nil,   nil,   nil,   nil,    20,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    45,    46,    43,    33,    44,    37,
    39,    40,    41,    42,    47,    28,    50,   nil,    20,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,    43,    33,
    44,    37,    39,    40,    41,    42,    47,    28,    50,   nil,
   nil,   nil,   nil,   nil,   nil,    20,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    45,    46,    43,    33,    44,    37,    39,
    40,    41,    42,    47,   147,    50,   nil,    20,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    45,    46,   nil,    33,    44,
    37,    39,    40,    41,    42,    47,   154,    50,   nil,    43,
   nil,   nil,   nil,   151,    20,   nil,   nil,   nil,    28,   nil,
   nil,   nil,    45,    46,   120,    33,    44,    37,    39,    40,
    41,    42,    47,    43,    50,   100,   nil,   nil,   nil,    98,
   nil,   nil,   147,    99,   nil,   nil,   nil,   nil,    20,   101,
   nil,   103,   104,   nil,   105,   106,    45,    46,    43,    33,
    44,    37,    39,    40,    41,    42,    47,    28,    50,   nil,
   nil,   151,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    45,    46,    43,    33,    44,    37,    39,    40,    41,    42,
    47,    28,    50,   nil,   nil,   nil,   nil,    20,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    45,    46,   nil,    33,    44,
    37,    39,    40,    41,    42,    47,    43,    50,   nil,   nil,
   nil,    20,   nil,   nil,   nil,   147,   nil,   nil,   nil,    45,
    46,   nil,    33,    44,    37,    39,    40,    41,    42,    47,
    43,    50,   nil,   nil,   nil,   nil,   nil,   154,   nil,    28,
   nil,   nil,   nil,   nil,   151,    20,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    45,    46,    43,    33,    44,    37,    39,
    40,    41,    42,    47,    28,    50,   nil,   nil,   nil,    20,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,    43,
    33,    44,    37,    39,    40,    41,    42,    47,    28,    50,
   nil,   nil,   nil,   nil,    20,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    45,    46,    43,    33,    44,    37,    39,    40,
    41,    42,    47,   225,    50,   nil,   nil,   nil,    20,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,   nil,    33,
    44,    37,    39,    40,    41,    42,    47,   nil,    50,   nil,
   nil,   nil,   nil,    20,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    45,    46,   nil,    33,    44,    37,    39,    40,    41,
    42,    47,   nil,    50,   189,   190,   nil,   191,   192,   193,
   nil,   nil,   nil,   nil,   194,   195,   196,   197,   198,   199 ]

racc_action_check = [
    98,    22,   130,   186,    55,    57,   111,    19,   130,    98,
    55,   193,   189,    10,   189,   189,   122,   193,    10,   256,
   111,     0,   111,   111,     0,   111,   111,    57,   256,    19,
    92,    92,    99,   186,   100,    22,    21,    21,   101,    98,
   248,   130,   102,    55,    47,    47,   104,    98,    98,   248,
    98,    98,    98,    98,    98,    98,    98,    98,   256,    98,
   105,   106,   107,   109,    90,    89,   256,   256,   227,   256,
   256,   256,   256,   256,   256,   256,   256,   227,   256,   248,
   120,   121,   227,    97,   123,   124,   125,   248,   248,     8,
   248,   248,   248,   248,   248,   248,   248,   248,     8,   248,
   128,   129,    88,   135,     8,     8,   136,   227,    85,   139,
   140,   145,   146,    83,   148,   227,   227,   225,   227,   227,
   227,   227,   227,   227,   227,   227,   225,   227,     8,    77,
   151,   225,   152,    76,   173,   174,     8,     8,   137,     8,
     8,     8,     8,     8,     8,     8,     8,   137,     8,    68,
   178,   179,    64,    63,   184,   185,   225,   224,    54,   187,
    53,    50,    44,   191,   225,   225,   224,   225,   225,   225,
   225,   225,   225,   225,   225,    43,   225,   137,   222,    42,
    41,    40,    39,    37,    34,   137,   137,   222,   137,   137,
   137,   137,   137,   137,   137,   137,   224,   137,    20,   200,
    18,   206,    14,    13,   224,   224,   214,   224,   224,   224,
   224,   224,   224,   224,   224,   213,   224,   222,   215,   216,
   221,    12,   223,    11,   213,   222,   222,     9,   222,   222,
   222,   222,   222,   222,   222,   222,   209,   222,   226,     7,
   231,   240,   242,   243,   244,   209,   213,   245,     5,   249,
   251,   252,   253,   213,   213,     1,   261,   nil,   nil,   nil,
   nil,   nil,   213,   213,    17,   213,   213,   213,   213,   213,
   213,   213,   213,    17,   213,   209,   nil,   nil,   nil,    17,
   nil,   nil,   nil,   209,   209,   nil,   209,   209,   209,   209,
   209,   209,   209,   209,   nil,   209,   203,   nil,   nil,   nil,
   nil,   nil,   nil,    17,   nil,   203,   nil,   nil,   nil,   nil,
   nil,    17,    17,   nil,    17,    17,    17,    17,    17,    17,
    17,    17,   nil,    17,   nil,   nil,   nil,   203,   147,   nil,
   nil,   nil,   nil,   nil,   203,   203,   nil,   147,   nil,   nil,
   nil,   nil,   147,   203,   203,   nil,   203,   203,   203,   203,
   203,   203,   203,   203,   199,   203,   nil,   nil,   nil,   147,
   nil,   nil,   nil,   199,   nil,   nil,   147,   147,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   147,   147,   nil,   147,   147,
   147,   147,   147,   147,   147,   147,   110,   147,   nil,   nil,
   nil,   nil,   nil,   199,   nil,   110,   nil,   nil,   nil,   nil,
   nil,   199,   199,   nil,   199,   199,   199,   199,   199,   199,
   199,   199,    82,   199,   nil,   nil,   nil,   110,   nil,   nil,
   nil,    82,    23,   nil,   110,   110,   nil,   nil,   nil,   nil,
   nil,    23,   nil,   110,   110,   nil,   110,   110,   110,   110,
   110,   110,   110,   110,    28,   110,   nil,   nil,   nil,   nil,
   nil,    82,   nil,    28,   nil,   nil,   nil,   nil,   nil,    82,
    82,    23,    82,    82,    82,    82,    82,    82,    82,    82,
   nil,    82,    23,    23,    23,    23,    23,    23,    23,    23,
   198,    23,   nil,    28,   nil,   nil,   nil,   nil,   nil,   198,
   nil,    28,    28,   181,    28,    28,    28,    28,    28,    28,
    28,    28,   197,    28,   nil,   nil,   nil,   181,   nil,   181,
   181,   197,   181,   181,   181,   181,   nil,   nil,   nil,   198,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   198,   198,   196,
   198,   198,   198,   198,   198,   198,   198,   198,   196,   198,
   nil,   197,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   197,
   197,   195,   197,   197,   197,   197,   197,   197,   197,   197,
   195,   197,   nil,   nil,   nil,   nil,   nil,   nil,   196,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   196,   196,   194,   196,
   196,   196,   196,   196,   196,   196,   196,   194,   196,   nil,
   195,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   195,   195,
    81,   195,   195,   195,   195,   195,   195,   195,   195,    81,
   195,   nil,   nil,   nil,   nil,   nil,   nil,   194,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   194,   194,    71,   194,   194,
   194,   194,   194,   194,   194,   194,    71,   194,   nil,    81,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    81,    81,   190,
    81,    81,    81,    81,    81,    81,    81,    81,   190,    81,
   nil,   nil,   nil,   nil,   nil,   nil,    71,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    71,    71,    80,    71,    71,    71,
    71,    71,    71,    71,    71,    80,    71,   nil,   190,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   190,   190,    79,   190,
   190,   190,   190,   190,   190,   190,   190,    79,   190,   nil,
   nil,   nil,   nil,   nil,   nil,    80,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    80,    80,   188,    80,    80,    80,    80,
    80,    80,    80,    80,   188,    80,   nil,    79,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    79,    79,   nil,    79,    79,
    79,    79,    79,    79,    79,    79,   188,    79,   nil,    78,
   nil,   nil,   nil,   188,   188,   nil,   nil,   nil,    78,   nil,
   nil,   nil,   188,   188,    78,   188,   188,   188,   188,   188,
   188,   188,   188,   154,   188,    56,   nil,   nil,   nil,    56,
   nil,   nil,   154,    56,   nil,   nil,   nil,   nil,    78,    56,
   nil,    56,    56,   nil,    56,    56,    78,    78,    74,    78,
    78,    78,    78,    78,    78,    78,    78,    74,    78,   nil,
   nil,   154,   154,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   154,   154,    73,   154,   154,   154,   154,   154,   154,   154,
   154,    73,   154,   nil,   nil,   nil,   nil,    74,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    74,    74,   nil,    74,    74,
    74,    74,    74,    74,    74,    74,   183,    74,   nil,   nil,
   nil,    73,   nil,   nil,   nil,   183,   nil,   nil,   nil,    73,
    73,   nil,    73,    73,    73,    73,    73,    73,    73,    73,
    72,    73,   nil,   nil,   nil,   nil,   nil,   183,   nil,    72,
   nil,   nil,   nil,   nil,   183,   183,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   183,   183,    67,   183,   183,   183,   183,
   183,   183,   183,   183,    67,   183,   nil,   nil,   nil,    72,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    72,    72,   177,
    72,    72,    72,    72,    72,    72,    72,    72,   177,    72,
   nil,   nil,   nil,   nil,    67,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    67,    67,   192,    67,    67,    67,    67,    67,
    67,    67,    67,   192,    67,   nil,   nil,   nil,   177,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   177,   177,   nil,   177,
   177,   177,   177,   177,   177,   177,   177,   nil,   177,   nil,
   nil,   nil,   nil,   192,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   192,   192,   nil,   192,   192,   192,   192,   192,   192,
   192,   192,   nil,   192,   150,   150,   nil,   150,   150,   150,
   nil,   nil,   nil,   nil,   150,   150,   150,   150,   150,   150 ]

racc_action_pointer = [
     4,   255,   nil,   nil,   nil,   246,   nil,   221,    83,   227,
     9,   220,   176,   179,   178,   nil,   nil,   258,   189,   -16,
   141,   -17,   -20,   416,   nil,   nil,   nil,   nil,   438,   nil,
   nil,   nil,   nil,   nil,   127,   nil,   nil,   168,   nil,   167,
   166,   165,   164,   118,   156,   nil,   nil,   -19,   nil,   nil,
    95,   nil,   nil,   155,   152,    -2,   774,   -18,   nil,   nil,
   nil,   nil,   nil,   119,   107,   nil,   nil,   909,   104,   nil,
   nil,   621,   884,   826,   802,   nil,   117,    84,   753,   692,
   670,   594,   406,   107,   nil,    45,   nil,   nil,    96,    58,
    53,   nil,    17,   nil,   nil,   nil,   nil,    64,    -6,    17,
   -11,    12,    16,   nil,    17,    31,    32,    17,   nil,    28,
   380,    -5,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    64,    65,     0,    68,    69,    70,   nil,   nil,    93,    97,
    -4,   nil,   nil,   nil,   nil,    87,    95,   132,   nil,    64,
    65,   nil,   nil,   nil,   nil,    75,   109,   322,    68,   nil,
   987,   115,    93,   nil,   777,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   126,   125,   nil,   nil,   933,   134,   140,
   nil,   482,   nil,   860,   109,   139,   -13,   143,   719,   -26,
   643,   148,   958,   -26,   572,   545,   523,   496,   474,   348,
   179,   nil,   nil,   290,   nil,   nil,   195,   nil,   nil,   230,
   nil,   nil,   nil,   209,   191,   172,   208,   nil,   nil,   nil,
   nil,   181,   172,   207,   151,   111,   199,    62,   nil,   nil,
   nil,   197,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   234,   nil,   196,   198,   199,   208,   nil,   nil,    34,   233,
   nil,   242,   235,   241,   nil,   nil,    13,   nil,   nil,   nil,
   nil,   211,   nil,   nil ]

racc_action_default = [
  -152,  -152,    -1,    -2,    -3,    -5,   -20,  -152,  -152,  -152,
    -7,  -152,  -152,   -28,   -30,   -31,   -32,  -152,   -35,   -38,
  -146,  -115,  -118,  -152,  -120,  -121,  -122,  -123,  -152,  -125,
  -126,  -127,  -128,  -129,  -152,  -131,  -132,  -152,  -134,  -152,
  -152,  -152,  -152,  -143,  -152,  -144,  -145,  -152,  -149,  -150,
  -152,   264,    -4,  -152,  -152,  -152,  -152,   -43,   -44,   -46,
   -47,   -86,   -27,   -63,  -152,   -29,   -33,  -152,  -152,   -37,
  -146,  -152,  -152,  -152,  -152,  -119,  -152,  -152,  -152,  -152,
  -152,  -152,  -152,  -141,  -142,  -152,  -148,  -151,  -152,  -152,
    -6,   -11,   -16,   -13,   -14,   -15,   -21,  -152,  -152,  -152,
  -152,  -152,  -152,   -51,   -53,   -55,   -56,  -152,   -42,   -65,
  -152,   -40,   -34,   -36,  -113,  -114,  -116,  -117,  -124,  -130,
  -152,  -152,  -152,  -152,  -152,  -152,  -140,  -147,  -152,  -152,
  -152,   -12,   -17,   -18,   -22,  -152,   -25,  -152,   -48,  -152,
  -152,   -52,   -54,   -57,   -41,   -70,  -152,  -152,   -64,   -72,
  -152,  -152,   -89,   -91,  -152,   -94,   -95,   -96,   -98,   -99,
  -100,  -101,  -102,  -103,  -110,  -111,  -112,  -133,  -135,  -136,
  -137,  -138,  -139,  -152,  -152,   -10,   -23,  -152,  -152,   -80,
   -49,  -152,   -39,  -152,  -152,  -152,  -152,  -112,  -152,  -152,
  -152,  -152,  -152,  -152,  -152,  -152,  -152,  -152,  -152,  -152,
  -152,   -45,   -85,  -152,   -93,    -8,  -152,   -24,   -26,  -152,
   -50,   -58,   -59,  -152,  -152,   -71,   -66,   -68,   -69,   -19,
   -97,   -90,  -152,  -152,  -152,  -152,  -152,  -152,   -76,   -77,
   -82,  -152,   -84,  -104,  -105,  -106,  -107,  -108,  -109,   -92,
  -152,   -79,   -60,  -152,  -152,  -152,   -75,   -81,  -152,  -152,
   -83,  -152,  -152,   -62,   -88,   -67,  -152,   -74,   -78,    -9,
   -61,  -152,   -73,   -87 ]

racc_goto_table = [
    69,    19,   135,   148,    57,    56,   178,    91,   201,    96,
    19,   226,   228,   230,   112,   233,   234,   235,   236,   237,
   238,    76,    13,   217,   218,   116,   117,    62,    65,   131,
     1,    66,    14,    97,   109,   145,    93,   182,   108,    90,
   186,   202,   210,   245,   246,   247,   211,   212,   201,   113,
   134,    52,   252,   253,   216,    10,    57,   111,   119,     5,
    19,     4,     3,   221,   114,   115,   239,   204,     2,   257,
    75,   121,   122,   123,   124,   125,   215,   262,   241,   nil,
   201,   207,   175,   255,   218,   nil,   nil,   nil,   144,   nil,
   nil,   136,   138,   nil,   nil,   nil,   249,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   242,   nil,   nil,   nil,
   nil,    93,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   179,   180,    57,   181,   nil,   nil,   nil,   nil,   nil,   nil,
   187,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   136,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   179,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    76,   nil,
   179,   nil,   nil,   nil,   254,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   263 ]

racc_goto_check = [
    12,    19,    18,    39,    30,    15,    20,     9,    13,    16,
    19,    47,    49,    47,    24,    47,    47,    47,    47,    47,
    47,    19,    21,    43,    44,    60,    60,    22,    22,    11,
     1,    21,    23,    17,    27,    28,    12,    29,    12,     8,
    39,    32,    36,    47,    49,    47,    37,    38,    13,    12,
    16,     7,    40,    41,    42,     6,    30,    15,    12,     5,
    19,     4,     3,    53,    19,    19,    54,    55,     2,    47,
    63,    19,    19,    19,    19,    19,    39,    47,    20,   nil,
    13,    18,     9,    43,    44,   nil,   nil,   nil,    12,   nil,
   nil,    19,    30,   nil,   nil,   nil,    20,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,
   nil,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    19,    30,    30,    15,   nil,   nil,   nil,   nil,   nil,   nil,
    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,
    19,   nil,   nil,   nil,    12,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    12 ]

racc_goto_pointer = [
   nil,    30,    68,    62,    61,    59,    50,    41,   -16,   -48,
   nil,   -63,   -19,  -143,   nil,    -7,   -47,   -23,   -96,    -7,
  -131,    14,    14,    24,   -53,   nil,   nil,   -29,   -74,  -108,
    -8,   nil,  -110,   nil,   nil,   nil,  -139,  -135,  -134,  -107,
  -191,  -190,  -130,  -161,  -160,   nil,   nil,  -179,   nil,  -179,
   nil,   nil,   nil,  -125,  -137,   -87,   nil,   nil,   nil,   nil,
   -48,   nil,   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   185,   nil,   nil,   nil,   nil,
    92,   nil,    35,   149,     6,   nil,   nil,   nil,   nil,   166,
   nil,   nil,   nil,   nil,    16,    18,    63,   nil,   nil,   nil,
    36,    58,   229,    59,    60,   102,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    26,   165,   159,   150,   160,   nil,
   161,   162,   163,   152,   153,   155,   156,   157,   158,   164,
    21,    22,    23,    24,    25,    27,    29,    30,    31,    32,
    34,    38,    48,    49 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 68, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  3, 70, :_reduce_4,
  0, 73, :_reduce_none,
  3, 73, :_reduce_6,
  0, 74, :_reduce_none,
  5, 74, :_reduce_8,
  8, 74, :_reduce_9,
  3, 75, :_reduce_10,
  1, 75, :_reduce_none,
  2, 76, :_reduce_12,
  1, 77, :_reduce_none,
  1, 77, :_reduce_14,
  1, 77, :_reduce_15,
  0, 78, :_reduce_16,
  1, 78, :_reduce_17,
  1, 78, :_reduce_18,
  3, 80, :_reduce_19,
  1, 72, :_reduce_none,
  4, 71, :_reduce_21,
  5, 71, :_reduce_22,
  3, 84, :_reduce_23,
  3, 85, :_reduce_24,
  1, 85, :_reduce_none,
  4, 83, :_reduce_26,
  3, 81, :_reduce_27,
  2, 81, :_reduce_28,
  3, 81, :_reduce_29,
  2, 81, :_reduce_30,
  1, 88, :_reduce_31,
  1, 88, :_reduce_32,
  2, 90, :_reduce_33,
  3, 91, :_reduce_34,
  1, 91, :_reduce_none,
  3, 92, :_reduce_36,
  2, 92, :_reduce_37,
  1, 92, :_reduce_none,
  4, 89, :_reduce_39,
  2, 93, :_reduce_40,
  3, 82, :_reduce_41,
  2, 82, :_reduce_42,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 99, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  3, 100, :_reduce_48,
  4, 100, :_reduce_49,
  5, 101, :_reduce_50,
  1, 102, :_reduce_51,
  2, 102, :_reduce_52,
  1, 102, :_reduce_53,
  2, 102, :_reduce_54,
  1, 102, :_reduce_55,
  1, 102, :_reduce_56,
  2, 102, :_reduce_57,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  2, 104, :_reduce_60,
  4, 105, :_reduce_61,
  1, 107, :_reduce_none,
  0, 94, :_reduce_none,
  2, 94, :_reduce_64,
  0, 95, :_reduce_none,
  3, 95, :_reduce_66,
  3, 109, :_reduce_67,
  1, 109, :_reduce_none,
  1, 110, :_reduce_none,
  0, 96, :_reduce_none,
  2, 96, :_reduce_71,
  1, 112, :_reduce_none,
  6, 113, :_reduce_73,
  5, 113, :_reduce_74,
  4, 115, :_reduce_75,
  3, 115, :_reduce_76,
  1, 116, :_reduce_none,
  3, 116, :_reduce_78,
  3, 87, :_reduce_79,
  1, 87, :_reduce_none,
  4, 117, :_reduce_81,
  3, 117, :_reduce_82,
  4, 118, :_reduce_83,
  3, 118, :_reduce_84,
  2, 119, :_reduce_85,
  1, 97, :_reduce_86,
  3, 108, :_reduce_87,
  1, 108, :_reduce_none,
  1, 106, :_reduce_none,
  3, 106, :_reduce_90,
  1, 120, :_reduce_none,
  3, 120, :_reduce_92,
  2, 121, :_reduce_93,
  1, 121, :_reduce_none,
  1, 122, :_reduce_none,
  1, 123, :_reduce_none,
  3, 123, :_reduce_97,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  3, 125, :_reduce_104,
  3, 125, :_reduce_105,
  3, 125, :_reduce_106,
  3, 125, :_reduce_107,
  3, 125, :_reduce_108,
  3, 125, :_reduce_109,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 126, :_reduce_none,
  3, 86, :_reduce_113,
  3, 86, :_reduce_114,
  1, 86, :_reduce_none,
  3, 127, :_reduce_116,
  3, 127, :_reduce_117,
  1, 127, :_reduce_none,
  2, 128, :_reduce_119,
  1, 128, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  3, 130, :_reduce_124,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 134, :_reduce_129,
  3, 111, :_reduce_130,
  1, 111, :_reduce_none,
  1, 137, :_reduce_none,
  4, 132, :_reduce_133,
  1, 132, :_reduce_none,
  4, 138, :_reduce_135,
  4, 138, :_reduce_136,
  4, 138, :_reduce_137,
  4, 138, :_reduce_138,
  4, 138, :_reduce_139,
  3, 135, :_reduce_140,
  2, 135, :_reduce_141,
  2, 135, :_reduce_142,
  1, 135, :_reduce_143,
  1, 129, :_reduce_144,
  1, 129, :_reduce_145,
  1, 79, :_reduce_146,
  3, 136, :_reduce_147,
  2, 136, :_reduce_148,
  1, 136, :_reduce_none,
  1, 139, :_reduce_none,
  2, 140, :_reduce_151 ]

racc_reduce_n = 152

racc_shift_n = 264

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :FETCH => 4,
  :FIRST => 5,
  :unsigned_integer => 6,
  :ROWS => 7,
  :ONLY => 8,
  :OFFSET => 9,
  :NEXT => 10,
  :comma => 11,
  :built_in_function => 12,
  :ASC => 13,
  :DESC => 14,
  :left_paren => 15,
  :right_paren => 16,
  :INSERT => 17,
  :INTO => 18,
  :VALUES => 19,
  :SELECT => 20,
  :asterisk => 21,
  :DISTINCT => 22,
  :AS => 23,
  :FROM => 24,
  :CROSS => 25,
  :JOIN => 26,
  :INNER => 27,
  :LEFT => 28,
  :OUTER => 29,
  :RIGHT => 30,
  :FULL => 31,
  :ON => 32,
  :USING => 33,
  :WHERE => 34,
  :GROUP => 35,
  :HAVING => 36,
  :NOT => 37,
  :BETWEEN => 38,
  :AND => 39,
  :IN => 40,
  :LIKE => 41,
  :IS => 42,
  :NULL => 43,
  :EXISTS => 44,
  :identifier => 45,
  :OR => 46,
  :equals_operator => 47,
  :not_equals_operator => 48,
  :less_than_operator => 49,
  :greater_than_operator => 50,
  :less_than_or_equals_operator => 51,
  :greater_than_or_equals_operator => 52,
  :plus_sign => 53,
  :minus_sign => 54,
  :solidus => 55,
  :CURRENT_USER => 56,
  :period => 57,
  :COUNT => 58,
  :AVG => 59,
  :MAX => 60,
  :MIN => 61,
  :SUM => 62,
  :quote => 63,
  :character_string_literal => 64,
  :DATE => 65,
  :date_string => 66 }

racc_nt_base = 67

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "FETCH",
  "FIRST",
  "unsigned_integer",
  "ROWS",
  "ONLY",
  "OFFSET",
  "NEXT",
  "comma",
  "built_in_function",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "asterisk",
  "DISTINCT",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "fetch_only_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_name",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "select_list",
  "table_expression",
  "distinct_select_list",
  "select_sublist",
  "derived_column",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "column_reference",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "general_literal",
  "qualifier",
  "general_set_function",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1], val[2]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 22)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(0, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_9(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(val[1], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 26)
  def _reduce_10(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 11 omitted

module_eval(<<'.,.,', 'parser.racc', 30)
  def _reduce_12(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.racc', 34)
  def _reduce_14(val, _values, result)
     result = SQLParser::Statement::BuiltInFunction.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 35)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_24(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 25 omitted

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_27(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_32(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::Distinct.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 78)
  def _reduce_34(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 35 omitted

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_37(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_39(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 90)
  def _reduce_40(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_41(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_42(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_49(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_50(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 113)
  def _reduce_51(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_53(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_54(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_57(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 58 omitted

# reduce 59 omitted

module_eval(<<'.,.,', 'parser.racc', 126)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 62 omitted

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.racc', 136)
  def _reduce_64(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 65 omitted

module_eval(<<'.,.,', 'parser.racc', 140)
  def _reduce_66(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 143)
  def _reduce_67(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_71(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 72 omitted

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_73(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 159)
  def _reduce_74(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_75(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 163)
  def _reduce_76(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.racc', 167)
  def _reduce_78(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_79(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 80 omitted

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_84(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 189)
  def _reduce_86(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 192)
  def _reduce_87(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 88 omitted

# reduce 89 omitted

module_eval(<<'.,.,', 'parser.racc', 198)
  def _reduce_90(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 91 omitted

module_eval(<<'.,.,', 'parser.racc', 202)
  def _reduce_92(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 205)
  def _reduce_93(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

module_eval(<<'.,.,', 'parser.racc', 213)
  def _reduce_97(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

module_eval(<<'.,.,', 'parser.racc', 224)
  def _reduce_104(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 225)
  def _reduce_105(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 226)
  def _reduce_106(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_107(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_108(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 229)
  def _reduce_109(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

module_eval(<<'.,.,', 'parser.racc', 239)
  def _reduce_113(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 240)
  def _reduce_114(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 115 omitted

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_116(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_117(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 118 omitted

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_119(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_124(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_129(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 270)
  def _reduce_130(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 131 omitted

# reduce 132 omitted

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_133(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 134 omitted

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_135(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_136(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_138(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_139(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_140(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_142(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_143(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_144(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_145(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_146(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_147(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_148(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 149 omitted

# reduce 150 omitted

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_151(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
