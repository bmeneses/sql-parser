#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 318)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    43,    72,    94,   219,    94,    67,    99,   106,    93,    28,
    93,   230,     7,    53,   187,     8,    61,   231,    54,    43,
   100,   138,   102,   103,   139,   104,   105,    69,   224,    69,
   131,   132,   140,   187,   221,    73,   222,   223,   141,    20,
    43,    69,   142,    69,    70,    71,    69,    45,    46,   224,
    33,    44,    37,    39,    40,    41,    42,    47,    20,    50,
    85,    84,   145,   126,   125,   166,    45,    46,    43,    33,
    44,    37,    39,    40,    41,    42,    47,    28,    50,    20,
   167,   168,     8,   169,   170,   171,   172,    45,    46,    43,
    33,    44,    37,    39,    40,    41,    42,    47,    28,    50,
   173,    69,   175,   176,    14,    17,   117,    20,    61,    61,
   182,   183,    69,   187,    61,    45,    46,    43,    33,    44,
    37,    39,    40,    41,    42,    47,    28,    50,    20,   199,
   202,     8,   109,   204,   205,    88,    45,    46,   207,    33,
    44,    37,    39,    40,    41,    42,    47,   208,    50,    43,
    87,    86,    20,   218,   127,   117,    20,    83,   146,    98,
    82,   226,    81,   128,    45,    46,    80,    33,    44,    37,
    39,    40,    41,    42,    47,    43,    50,    79,    78,    77,
   153,    76,   129,     8,   224,   -85,   239,   150,    20,    66,
    64,   242,   136,   243,   202,    61,    45,    46,    43,    33,
    44,    37,    39,    40,    41,    42,    47,   224,    50,   226,
    55,    51,   247,    12,    20,   249,   250,   187,    69,    20,
   255,    11,    45,    46,   257,    33,    44,    37,    39,    40,
    41,    42,    47,    43,    50,   258,   259,    20,   260,     9,
    69,   nil,   146,   nil,   nil,    45,    46,   nil,    33,    44,
    37,    39,    40,    41,    42,    47,    43,    50,   nil,    99,
   nil,   nil,   nil,    97,   153,    28,   nil,    98,   nil,   nil,
   nil,   150,    20,   100,   nil,   102,   103,   nil,   104,   105,
    45,    46,    43,    33,    44,    37,    39,    40,    41,    42,
    47,    28,    50,   nil,   nil,    20,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    45,    46,    43,    33,    44,    37,    39,
    40,    41,    42,    47,    28,    50,   nil,   nil,   nil,   nil,
   nil,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,
    46,   nil,    33,    44,    37,    39,    40,    41,    42,    47,
    43,    50,   nil,   nil,    20,   nil,   nil,   nil,   nil,   146,
   nil,   nil,    45,    46,   nil,    33,    44,    37,    39,    40,
    41,    42,    47,    43,    50,   nil,   nil,   nil,   nil,   nil,
   nil,   153,   224,   nil,   nil,   nil,   nil,   nil,   150,    20,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,    43,
    33,    44,    37,    39,    40,    41,    42,    47,    28,    50,
   nil,   nil,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    45,    46,    43,    33,    44,    37,    39,    40,    41,    42,
    47,    28,    50,   nil,   nil,   nil,   nil,   nil,    20,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,    43,    33,
    44,    37,    39,    40,    41,    42,    47,    28,    50,   nil,
   nil,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    99,
   nil,    43,    33,    44,    37,    39,    40,    41,    42,    47,
   224,    50,   nil,   100,   nil,   102,   103,    20,   104,   105,
   212,   213,   nil,   nil,   nil,    45,    46,    43,    33,    44,
    37,    39,    40,    41,    42,    47,   224,    50,   nil,   nil,
    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,
    43,    33,    44,    37,    39,    40,    41,    42,    47,   224,
    50,   nil,   nil,   nil,   nil,   nil,    20,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    45,    46,    43,    33,    44,    37,
    39,    40,    41,    42,    47,   224,    50,   nil,   nil,    20,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,    43,
    33,    44,    37,    39,    40,    41,    42,    47,   224,    50,
   nil,   nil,   nil,   nil,   nil,    20,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    45,    46,    43,    33,    44,    37,    39,
    40,    41,    42,    47,   224,    50,   nil,   nil,    20,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,    43,    33,
    44,    37,    39,    40,    41,    42,    47,   224,    50,   nil,
   nil,   nil,   nil,   nil,    20,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    45,    46,    43,    33,    44,    37,    39,    40,
    41,    42,    47,    28,    50,   nil,   nil,    20,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    45,    46,    43,    33,    44,
    37,    39,    40,    41,    42,    47,    28,    50,   nil,   nil,
   nil,   nil,   nil,    20,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    45,    46,   nil,    33,    44,    37,    39,    40,    41,
    42,    47,    43,    50,   nil,   nil,    20,   nil,   nil,   nil,
   nil,   146,   nil,   nil,    45,    46,   nil,    33,    44,    37,
    39,    40,    41,    42,    47,    43,    50,   nil,   nil,   nil,
   nil,   nil,   nil,   153,    28,   nil,   nil,   nil,   nil,   nil,
   150,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,
    46,    43,    33,    44,    37,    39,    40,    41,    42,    47,
    28,    50,   nil,   nil,    20,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    45,    46,    43,    33,    44,    37,    39,    40,
    41,    42,    47,    28,    50,   nil,   nil,   nil,   nil,   119,
    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,
    43,    33,    44,    37,    39,    40,    41,    42,    47,    28,
    50,   nil,   nil,    20,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    45,    46,    43,    33,    44,    37,    39,    40,    41,
    42,    47,    28,    50,   nil,   nil,   nil,   nil,   nil,    20,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,    43,
    33,    44,    37,    39,    40,    41,    42,    47,   146,    50,
   nil,   nil,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    45,    46,    43,    33,    44,    37,    39,    40,    41,    42,
    47,    28,    50,   nil,   nil,   nil,   nil,   150,    20,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,    43,    33,
    44,    37,    39,    40,    41,    42,    47,    28,    50,   nil,
   nil,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,
    46,   nil,    33,    44,    37,    39,    40,    41,    42,    47,
    43,    50,   nil,   nil,   nil,   nil,   nil,    20,   nil,   146,
   nil,   nil,   nil,   nil,     8,    45,    46,   nil,    33,    44,
    37,    39,    40,    41,    42,    47,    43,    50,   nil,   nil,
   nil,   153,   nil,   nil,   nil,    28,   nil,   nil,   150,    20,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,   nil,
    33,    44,    37,    39,    40,    41,    42,    47,    43,    50,
   nil,   nil,   nil,   nil,   nil,    20,   nil,   146,   nil,   nil,
   nil,   nil,   nil,    45,    46,   nil,    33,    44,    37,    39,
    40,    41,    42,    47,   nil,    50,   nil,   nil,   nil,   153,
   nil,   nil,   nil,   nil,   nil,   nil,   150,    20,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    45,    46,   nil,    33,    44,
    37,    39,    40,    41,    42,    47,   nil,    50,   188,   189,
   nil,   190,   191,   192,   nil,   nil,   nil,   nil,   193,   194,
   195,   196,   197,   198 ]

racc_action_check = [
    97,    22,    55,   185,   129,    19,   110,    57,    55,    97,
   129,   192,     0,    10,   214,     0,    99,   192,    10,   255,
   110,   100,   110,   110,   101,   110,   110,    19,   255,    57,
    91,    91,   103,   185,   188,    22,   188,   188,   104,    97,
   247,    55,   105,   129,    21,    21,   106,    97,    97,   247,
    97,    97,    97,    97,    97,    97,    97,    97,   255,    97,
    47,    47,   108,    84,    82,   119,   255,   255,   226,   255,
   255,   255,   255,   255,   255,   255,   255,   226,   255,   247,
   120,   121,   226,   122,   123,   124,   127,   247,   247,     8,
   247,   247,   247,   247,   247,   247,   247,   247,     8,   247,
   128,    76,   134,   135,     8,     8,    75,   226,   138,   139,
   144,   145,    67,   147,    64,   226,   226,   224,   226,   226,
   226,   226,   226,   226,   226,   226,   224,   226,     8,   150,
   151,   224,    63,   172,   173,    54,     8,     8,   177,     8,
     8,     8,     8,     8,     8,     8,     8,   178,     8,   109,
    53,    50,   183,   184,    87,   186,   224,    44,   109,    96,
    43,   190,    42,    88,   224,   224,    41,   224,   224,   224,
   224,   224,   224,   224,   224,   223,   224,    40,    39,    37,
   109,    34,    89,   199,   223,    20,   205,   109,   109,    18,
    13,   213,    98,   215,   220,    12,   109,   109,   221,   109,
   109,   109,   109,   109,   109,   109,   109,   221,   109,   222,
    11,     9,   225,     7,   223,   230,   239,   241,   242,   243,
   244,     5,   223,   223,   248,   223,   223,   223,   223,   223,
   223,   223,   223,   212,   223,   250,   251,   221,   252,     1,
   260,   nil,   212,   nil,   nil,   221,   221,   nil,   221,   221,
   221,   221,   221,   221,   221,   221,    17,   221,   nil,    56,
   nil,   nil,   nil,    56,   212,    17,   nil,    56,   nil,   nil,
   nil,   212,   212,    56,   nil,    56,    56,   nil,    56,    56,
   212,   212,   208,   212,   212,   212,   212,   212,   212,   212,
   212,   208,   212,   nil,   nil,    17,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    17,    17,    81,    17,    17,    17,    17,
    17,    17,    17,    17,    81,    17,   nil,   nil,   nil,   nil,
   nil,   208,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   208,
   208,   nil,   208,   208,   208,   208,   208,   208,   208,   208,
   202,   208,   nil,   nil,    81,   nil,   nil,   nil,   nil,   202,
   nil,   nil,    81,    81,   nil,    81,    81,    81,    81,    81,
    81,    81,    81,   198,    81,   nil,   nil,   nil,   nil,   nil,
   nil,   202,   198,   nil,   nil,   nil,   nil,   nil,   202,   202,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   202,   202,    80,
   202,   202,   202,   202,   202,   202,   202,   202,    80,   202,
   nil,   nil,   198,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   198,   198,    23,   198,   198,   198,   198,   198,   198,   198,
   198,    23,   198,   nil,   nil,   nil,   nil,   nil,    80,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    80,    80,    28,    80,
    80,    80,    80,    80,    80,    80,    80,    28,    80,   nil,
   nil,    23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   180,
   nil,   197,    23,    23,    23,    23,    23,    23,    23,    23,
   197,    23,   nil,   180,   nil,   180,   180,    28,   180,   180,
   180,   180,   nil,   nil,   nil,    28,    28,   196,    28,    28,
    28,    28,    28,    28,    28,    28,   196,    28,   nil,   nil,
   197,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   197,   197,
   195,   197,   197,   197,   197,   197,   197,   197,   197,   195,
   197,   nil,   nil,   nil,   nil,   nil,   196,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   196,   196,   194,   196,   196,   196,
   196,   196,   196,   196,   196,   194,   196,   nil,   nil,   195,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   195,   195,   193,
   195,   195,   195,   195,   195,   195,   195,   195,   193,   195,
   nil,   nil,   nil,   nil,   nil,   194,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   194,   194,   191,   194,   194,   194,   194,
   194,   194,   194,   194,   191,   194,   nil,   nil,   193,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   193,   193,   189,   193,
   193,   193,   193,   193,   193,   193,   193,   189,   193,   nil,
   nil,   nil,   nil,   nil,   191,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   191,   191,    71,   191,   191,   191,   191,   191,
   191,   191,   191,    71,   191,   nil,   nil,   189,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   189,   189,    79,   189,   189,
   189,   189,   189,   189,   189,   189,    79,   189,   nil,   nil,
   nil,   nil,   nil,    71,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    71,    71,   nil,    71,    71,    71,    71,    71,    71,
    71,    71,   182,    71,   nil,   nil,    79,   nil,   nil,   nil,
   nil,   182,   nil,   nil,    79,    79,   nil,    79,    79,    79,
    79,    79,    79,    79,    79,    78,    79,   nil,   nil,   nil,
   nil,   nil,   nil,   182,    78,   nil,   nil,   nil,   nil,   nil,
   182,   182,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   182,
   182,   176,   182,   182,   182,   182,   182,   182,   182,   182,
   176,   182,   nil,   nil,    78,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    78,    78,    77,    78,    78,    78,    78,    78,
    78,    78,    78,    77,    78,   nil,   nil,   nil,   nil,    77,
   176,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   176,   176,
   136,   176,   176,   176,   176,   176,   176,   176,   176,   136,
   176,   nil,   nil,    77,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    77,    77,    73,    77,    77,    77,    77,    77,    77,
    77,    77,    73,    77,   nil,   nil,   nil,   nil,   nil,   136,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   136,   136,   153,
   136,   136,   136,   136,   136,   136,   136,   136,   153,   136,
   nil,   nil,    73,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    73,    73,    72,    73,    73,    73,    73,    73,    73,    73,
    73,    72,    73,   nil,   nil,   nil,   nil,   153,   153,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   153,   153,    66,   153,
   153,   153,   153,   153,   153,   153,   153,    66,   153,   nil,
   nil,    72,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    72,
    72,   nil,    72,    72,    72,    72,    72,    72,    72,    72,
   146,    72,   nil,   nil,   nil,   nil,   nil,    66,   nil,   146,
   nil,   nil,   nil,   nil,   146,    66,    66,   nil,    66,    66,
    66,    66,    66,    66,    66,    66,    70,    66,   nil,   nil,
   nil,   146,   nil,   nil,   nil,    70,   nil,   nil,   146,   146,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   146,   146,   nil,
   146,   146,   146,   146,   146,   146,   146,   146,   187,   146,
   nil,   nil,   nil,   nil,   nil,    70,   nil,   187,   nil,   nil,
   nil,   nil,   nil,    70,    70,   nil,    70,    70,    70,    70,
    70,    70,    70,    70,   nil,    70,   nil,   nil,   nil,   187,
   nil,   nil,   nil,   nil,   nil,   nil,   187,   187,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   187,   187,   nil,   187,   187,
   187,   187,   187,   187,   187,   187,   nil,   187,   149,   149,
   nil,   149,   149,   149,   nil,   nil,   nil,   nil,   149,   149,
   149,   149,   149,   149 ]

racc_action_pointer = [
    -5,   239,   nil,   nil,   nil,   219,   nil,   195,    83,   211,
     9,   207,   150,   166,   nil,   nil,   nil,   250,   178,   -18,
   128,    -9,   -20,   406,   nil,   nil,   nil,   nil,   432,   nil,
   nil,   nil,   nil,   nil,   124,   nil,   nil,   164,   nil,   163,
   162,   151,   147,   103,   151,   nil,   nil,    -3,   nil,   nil,
    85,   nil,   nil,   145,   129,    -4,   248,   -16,   nil,   nil,
   nil,   nil,   nil,    98,    69,   nil,   882,    67,   nil,   nil,
   940,   628,   856,   807,   nil,    90,    56,   758,   709,   651,
   383,   299,    58,   nil,     0,   nil,   nil,   148,   156,   171,
   nil,    17,   nil,   nil,   nil,   nil,   140,    -6,   177,   -29,
    -5,    -2,   nil,     3,     9,    13,     1,   nil,    27,   143,
    -5,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    49,
    64,    65,    67,    68,    69,   nil,   nil,    79,    96,    -2,
   nil,   nil,   nil,   nil,    86,    92,   784,   nil,    63,    64,
   nil,   nil,   nil,   nil,    74,   108,   914,    67,   nil,  1001,
   114,    91,   nil,   833,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   125,   124,   nil,   nil,   735,   122,   136,   nil,
   448,   nil,   686,   107,   137,   -13,   139,   972,    -4,   602,
   146,   579,   -26,   553,   530,   504,   481,   455,   357,   163,
   nil,   nil,   334,   nil,   nil,   180,   nil,   nil,   276,   nil,
   nil,   nil,   227,   176,   -32,   182,   nil,   nil,   nil,   nil,
   155,   192,   194,   169,   111,   173,    62,   nil,   nil,   nil,
   172,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   209,
   nil,   171,   173,   174,   181,   nil,   nil,    34,   208,   nil,
   227,   220,   227,   nil,   nil,    13,   nil,   nil,   nil,   nil,
   195,   nil,   nil ]

racc_action_default = [
  -151,  -151,    -1,    -2,    -3,    -5,   -20,  -151,  -151,  -151,
    -7,  -151,  -151,   -28,   -29,   -30,   -31,  -151,   -34,   -37,
  -145,  -114,  -117,  -151,  -119,  -120,  -121,  -122,  -151,  -124,
  -125,  -126,  -127,  -128,  -151,  -130,  -131,  -151,  -133,  -151,
  -151,  -151,  -151,  -142,  -151,  -143,  -144,  -151,  -148,  -149,
  -151,   263,    -4,  -151,  -151,  -151,  -151,   -42,   -43,   -45,
   -46,   -85,   -27,   -62,  -151,   -32,  -151,  -151,   -36,  -145,
  -151,  -151,  -151,  -151,  -118,  -151,  -151,  -151,  -151,  -151,
  -151,  -151,  -140,  -141,  -151,  -147,  -150,  -151,  -151,    -6,
   -11,   -16,   -13,   -14,   -15,   -21,  -151,  -151,  -151,  -151,
  -151,  -151,   -50,   -52,   -54,   -55,  -151,   -41,   -64,  -151,
   -39,   -33,   -35,  -112,  -113,  -115,  -116,  -123,  -129,  -151,
  -151,  -151,  -151,  -151,  -151,  -139,  -146,  -151,  -151,  -151,
   -12,   -17,   -18,   -22,  -151,   -25,  -151,   -47,  -151,  -151,
   -51,   -53,   -56,   -40,   -69,  -151,  -151,   -63,   -71,  -151,
  -151,   -88,   -90,  -151,   -93,   -94,   -95,   -97,   -98,   -99,
  -100,  -101,  -102,  -109,  -110,  -111,  -132,  -134,  -135,  -136,
  -137,  -138,  -151,  -151,   -10,   -23,  -151,  -151,   -79,   -48,
  -151,   -38,  -151,  -151,  -151,  -151,  -111,  -151,  -151,  -151,
  -151,  -151,  -151,  -151,  -151,  -151,  -151,  -151,  -151,  -151,
   -44,   -84,  -151,   -92,    -8,  -151,   -24,   -26,  -151,   -49,
   -57,   -58,  -151,  -151,   -70,   -65,   -67,   -68,   -19,   -96,
   -89,  -151,  -151,  -151,  -151,  -151,  -151,   -75,   -76,   -81,
  -151,   -83,  -103,  -104,  -105,  -106,  -107,  -108,   -91,  -151,
   -78,   -59,  -151,  -151,  -151,   -74,   -80,  -151,  -151,   -82,
  -151,  -151,   -61,   -87,   -66,  -151,   -73,   -77,    -9,   -60,
  -151,   -72,   -86 ]

racc_goto_table = [
    68,    19,   147,    56,   177,   134,    57,    90,   217,   216,
    19,   200,   227,    95,   115,   116,    63,   130,    13,    62,
   225,    75,   229,    15,   232,   233,   234,   235,   236,   237,
     1,    16,    96,   108,   144,   181,    92,    89,   107,   185,
    65,   201,   209,   210,   245,   211,    52,   251,   112,   252,
   215,   200,   244,   133,   246,   110,    10,   118,    57,    19,
     5,     4,     3,   113,   114,   220,   238,   203,   217,   254,
   120,   121,   122,   123,   124,   214,   240,     2,   256,    74,
   nil,   174,   nil,   200,   206,   nil,   261,   143,   nil,   111,
   135,   nil,   nil,   137,   248,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   241,   nil,   nil,   nil,   nil,
    92,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   178,
   180,   nil,   179,    57,   nil,   nil,   nil,   nil,   nil,   186,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   135,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   178,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    75,   nil,   178,
   nil,   nil,   nil,   253,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   262 ]

racc_goto_check = [
    12,    19,    39,    15,    20,    18,    30,     9,    44,    43,
    19,    13,    49,    16,    60,    60,    26,    11,    21,    22,
    47,    19,    47,    23,    47,    47,    47,    47,    47,    47,
     1,    24,    17,    27,    28,    29,    12,     8,    12,    39,
    24,    32,    36,    37,    49,    38,     7,    40,    12,    41,
    42,    13,    47,    16,    47,    15,     6,    12,    30,    19,
     5,     4,     3,    19,    19,    53,    54,    55,    44,    43,
    19,    19,    19,    19,    19,    39,    20,     2,    47,    63,
   nil,     9,   nil,    13,    18,   nil,    47,    12,   nil,    24,
    19,   nil,   nil,    30,    20,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,   nil,
    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,
    15,   nil,    30,    30,   nil,   nil,   nil,   nil,   nil,    19,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,    19,
   nil,   nil,   nil,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    12 ]

racc_goto_pointer = [
   nil,    30,    77,    62,    61,    60,    51,    36,   -18,   -48,
   nil,   -74,   -19,  -139,   nil,    -9,   -43,   -24,   -92,    -7,
  -132,    10,     6,    15,    23,   nil,     3,   -30,   -74,  -109,
    -6,   nil,  -109,   nil,   nil,   nil,  -138,  -137,  -135,  -107,
  -195,  -193,  -133,  -174,  -175,   nil,   nil,  -169,   nil,  -178,
   nil,   nil,   nil,  -122,  -136,   -86,   nil,   nil,   nil,   nil,
   -58,   nil,   nil,    56,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   184,   nil,   nil,   nil,   nil,
    91,   nil,    35,   148,     6,   nil,   nil,   nil,   nil,   165,
   nil,   nil,   nil,   nil,   nil,    18,   nil,   nil,   nil,   nil,
    36,    58,   228,    59,    60,   101,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    26,   164,   158,   149,   159,   nil,
   160,   161,   162,   151,   152,   154,   155,   156,   157,   163,
    21,    22,    23,    24,    25,    27,    29,    30,    31,    32,
    34,    38,    48,    49 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 68, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  3, 70, :_reduce_4,
  0, 73, :_reduce_none,
  3, 73, :_reduce_6,
  0, 74, :_reduce_none,
  5, 74, :_reduce_8,
  8, 74, :_reduce_9,
  3, 75, :_reduce_10,
  1, 75, :_reduce_none,
  2, 76, :_reduce_12,
  1, 77, :_reduce_none,
  1, 77, :_reduce_14,
  1, 77, :_reduce_15,
  0, 78, :_reduce_16,
  1, 78, :_reduce_17,
  1, 78, :_reduce_18,
  3, 80, :_reduce_19,
  1, 72, :_reduce_none,
  4, 71, :_reduce_21,
  5, 71, :_reduce_22,
  3, 84, :_reduce_23,
  3, 85, :_reduce_24,
  1, 85, :_reduce_none,
  4, 83, :_reduce_26,
  3, 81, :_reduce_27,
  2, 81, :_reduce_28,
  1, 88, :_reduce_29,
  1, 88, :_reduce_none,
  1, 88, :_reduce_31,
  2, 90, :_reduce_32,
  3, 91, :_reduce_33,
  1, 91, :_reduce_none,
  3, 92, :_reduce_35,
  2, 92, :_reduce_36,
  1, 92, :_reduce_none,
  4, 89, :_reduce_38,
  2, 93, :_reduce_39,
  3, 82, :_reduce_40,
  2, 82, :_reduce_41,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 99, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  3, 100, :_reduce_47,
  4, 100, :_reduce_48,
  5, 101, :_reduce_49,
  1, 102, :_reduce_50,
  2, 102, :_reduce_51,
  1, 102, :_reduce_52,
  2, 102, :_reduce_53,
  1, 102, :_reduce_54,
  1, 102, :_reduce_55,
  2, 102, :_reduce_56,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  2, 104, :_reduce_59,
  4, 105, :_reduce_60,
  1, 107, :_reduce_none,
  0, 94, :_reduce_none,
  2, 94, :_reduce_63,
  0, 95, :_reduce_none,
  3, 95, :_reduce_65,
  3, 109, :_reduce_66,
  1, 109, :_reduce_none,
  1, 110, :_reduce_none,
  0, 96, :_reduce_none,
  2, 96, :_reduce_70,
  1, 112, :_reduce_none,
  6, 113, :_reduce_72,
  5, 113, :_reduce_73,
  4, 115, :_reduce_74,
  3, 115, :_reduce_75,
  1, 116, :_reduce_none,
  3, 116, :_reduce_77,
  3, 87, :_reduce_78,
  1, 87, :_reduce_none,
  4, 117, :_reduce_80,
  3, 117, :_reduce_81,
  4, 118, :_reduce_82,
  3, 118, :_reduce_83,
  2, 119, :_reduce_84,
  1, 97, :_reduce_85,
  3, 108, :_reduce_86,
  1, 108, :_reduce_none,
  1, 106, :_reduce_none,
  3, 106, :_reduce_89,
  1, 120, :_reduce_none,
  3, 120, :_reduce_91,
  2, 121, :_reduce_92,
  1, 121, :_reduce_none,
  1, 122, :_reduce_none,
  1, 123, :_reduce_none,
  3, 123, :_reduce_96,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  3, 125, :_reduce_103,
  3, 125, :_reduce_104,
  3, 125, :_reduce_105,
  3, 125, :_reduce_106,
  3, 125, :_reduce_107,
  3, 125, :_reduce_108,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 126, :_reduce_none,
  3, 86, :_reduce_112,
  3, 86, :_reduce_113,
  1, 86, :_reduce_none,
  3, 127, :_reduce_115,
  3, 127, :_reduce_116,
  1, 127, :_reduce_none,
  2, 128, :_reduce_118,
  1, 128, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  3, 130, :_reduce_123,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 134, :_reduce_128,
  3, 111, :_reduce_129,
  1, 111, :_reduce_none,
  1, 137, :_reduce_none,
  4, 132, :_reduce_132,
  1, 132, :_reduce_none,
  4, 138, :_reduce_134,
  4, 138, :_reduce_135,
  4, 138, :_reduce_136,
  4, 138, :_reduce_137,
  4, 138, :_reduce_138,
  3, 135, :_reduce_139,
  2, 135, :_reduce_140,
  2, 135, :_reduce_141,
  1, 135, :_reduce_142,
  1, 129, :_reduce_143,
  1, 129, :_reduce_144,
  1, 79, :_reduce_145,
  3, 136, :_reduce_146,
  2, 136, :_reduce_147,
  1, 136, :_reduce_none,
  1, 139, :_reduce_none,
  2, 140, :_reduce_150 ]

racc_reduce_n = 151

racc_shift_n = 263

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :FETCH => 4,
  :FIRST => 5,
  :unsigned_integer => 6,
  :ROWS => 7,
  :ONLY => 8,
  :OFFSET => 9,
  :NEXT => 10,
  :comma => 11,
  :built_in_function => 12,
  :ASC => 13,
  :DESC => 14,
  :left_paren => 15,
  :right_paren => 16,
  :INSERT => 17,
  :INTO => 18,
  :VALUES => 19,
  :SELECT => 20,
  :asterisk => 21,
  :DISTINCT => 22,
  :AS => 23,
  :FROM => 24,
  :CROSS => 25,
  :JOIN => 26,
  :INNER => 27,
  :LEFT => 28,
  :OUTER => 29,
  :RIGHT => 30,
  :FULL => 31,
  :ON => 32,
  :USING => 33,
  :WHERE => 34,
  :GROUP => 35,
  :HAVING => 36,
  :NOT => 37,
  :BETWEEN => 38,
  :AND => 39,
  :IN => 40,
  :LIKE => 41,
  :IS => 42,
  :NULL => 43,
  :EXISTS => 44,
  :identifier => 45,
  :OR => 46,
  :equals_operator => 47,
  :not_equals_operator => 48,
  :less_than_operator => 49,
  :greater_than_operator => 50,
  :less_than_or_equals_operator => 51,
  :greater_than_or_equals_operator => 52,
  :plus_sign => 53,
  :minus_sign => 54,
  :solidus => 55,
  :CURRENT_USER => 56,
  :period => 57,
  :COUNT => 58,
  :AVG => 59,
  :MAX => 60,
  :MIN => 61,
  :SUM => 62,
  :quote => 63,
  :character_string_literal => 64,
  :DATE => 65,
  :date_string => 66 }

racc_nt_base = 67

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "FETCH",
  "FIRST",
  "unsigned_integer",
  "ROWS",
  "ONLY",
  "OFFSET",
  "NEXT",
  "comma",
  "built_in_function",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "asterisk",
  "DISTINCT",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "fetch_only_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_name",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "select_list",
  "table_expression",
  "distinct_select_list",
  "select_sublist",
  "derived_column",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "column_reference",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "general_literal",
  "qualifier",
  "general_set_function",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1], val[2]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 22)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(0, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_9(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(val[1], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 26)
  def _reduce_10(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 11 omitted

module_eval(<<'.,.,', 'parser.racc', 30)
  def _reduce_12(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.racc', 34)
  def _reduce_14(val, _values, result)
     result = SQLParser::Statement::BuiltInFunction.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 35)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_24(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 25 omitted

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_27(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 74)
  def _reduce_32(val, _values, result)
     result = SQLParser::Statement::Distinct.new(SQLParser::Statement::SelectList.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_33(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 34 omitted

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_38(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_39(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_40(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_41(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_49(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 112)
  def _reduce_50(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 113)
  def _reduce_51(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_53(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_54(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 57 omitted

# reduce 58 omitted

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

module_eval(<<'.,.,', 'parser.racc', 135)
  def _reduce_63(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 64 omitted

module_eval(<<'.,.,', 'parser.racc', 139)
  def _reduce_65(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_66(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 150)
  def _reduce_70(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 71 omitted

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_72(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_73(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_74(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_75(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 76 omitted

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_77(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 169)
  def _reduce_78(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 79 omitted

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 180)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_84(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_86(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 87 omitted

# reduce 88 omitted

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_89(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 90 omitted

module_eval(<<'.,.,', 'parser.racc', 201)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 204)
  def _reduce_92(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

module_eval(<<'.,.,', 'parser.racc', 212)
  def _reduce_96(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

module_eval(<<'.,.,', 'parser.racc', 223)
  def _reduce_103(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 224)
  def _reduce_104(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 225)
  def _reduce_105(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 226)
  def _reduce_106(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_107(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_108(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

module_eval(<<'.,.,', 'parser.racc', 238)
  def _reduce_112(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 239)
  def _reduce_113(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 114 omitted

module_eval(<<'.,.,', 'parser.racc', 243)
  def _reduce_115(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_116(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 117 omitted

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_118(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_123(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_128(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 269)
  def _reduce_129(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 130 omitted

# reduce 131 omitted

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_132(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 133 omitted

module_eval(<<'.,.,', 'parser.racc', 280)
  def _reduce_134(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_135(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_136(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_138(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_139(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_140(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_142(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 294)
  def _reduce_143(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_144(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_145(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_146(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_147(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 148 omitted

# reduce 149 omitted

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_150(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
