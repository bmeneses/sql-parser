#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 322)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    43,    68,    88,    88,   215,   100,    26,    63,    93,   164,
   226,    91,   123,    58,     7,    92,   227,     8,    43,   135,
    94,   136,    96,    97,   220,    98,    99,    65,   217,    65,
   218,   219,   137,   184,    69,    18,    43,    65,    65,   128,
   129,   138,   220,    46,    47,   139,    31,    44,    35,    37,
    38,    39,    40,    18,    48,    46,    47,    66,    67,    82,
    81,    46,    47,    65,    31,    44,    35,    37,    38,    39,
    40,    18,    48,   142,    92,   126,   163,   133,   165,    46,
    47,   166,    31,    44,    35,    37,    38,    39,    40,    43,
    48,    93,   167,   168,   169,    26,   170,   125,   172,   173,
     8,   124,    58,    94,    58,    96,    97,    43,    98,    99,
   208,   209,   179,    26,   180,   119,   184,    65,   196,    14,
   199,   111,   201,    65,    18,   203,   204,    58,   103,    18,
   214,    83,    46,    47,   111,    31,    44,    35,    37,    38,
    39,    40,    18,    48,    80,    79,    78,   222,  -142,    77,
    46,    47,    76,    31,    44,    35,    37,    38,    39,    40,
    43,    48,    93,    75,    74,    73,    26,    72,   -81,     8,
    62,     8,    61,    58,    94,   237,    96,    97,    43,    98,
    99,   184,   238,   199,   220,    52,   222,    51,    49,   242,
    12,   244,   184,    65,    18,    18,    43,   249,    11,   251,
   252,   253,   220,    46,    47,     9,    31,    44,    35,    37,
    38,    39,    40,    18,    48,    65,   nil,   nil,   nil,   nil,
   nil,    46,    47,   nil,    31,    44,    35,    37,    38,    39,
    40,    18,    48,   nil,   nil,    43,   nil,   nil,   nil,    46,
    47,   143,    31,    44,    35,    37,    38,    39,    40,   nil,
    48,   nil,   nil,    43,   nil,   nil,   nil,   nil,   nil,    26,
   nil,   nil,   150,   nil,   nil,   nil,   nil,   nil,   nil,   147,
    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    46,    47,
   nil,    31,    44,    35,    37,    38,    39,    40,    18,    48,
   nil,   nil,    43,   nil,   nil,   nil,    46,    47,   143,    31,
    44,    35,    37,    38,    39,    40,   nil,    48,   nil,   nil,
    43,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,   150,
   nil,   nil,   nil,   nil,   nil,   nil,   147,    18,    43,   nil,
   nil,   nil,   nil,   nil,   220,    46,    47,   nil,    31,    44,
    35,    37,    38,    39,    40,    18,    48,   nil,   nil,   nil,
   nil,   nil,   nil,    46,    47,   nil,    31,    44,    35,    37,
    38,    39,    40,    18,    48,   nil,   nil,    43,   nil,   nil,
   nil,    46,    47,   143,    31,    44,    35,    37,    38,    39,
    40,   nil,    48,   nil,   nil,    43,   nil,   nil,   nil,   nil,
   nil,    26,   nil,   nil,   150,   nil,   nil,   nil,   nil,   nil,
   nil,   147,    18,    43,   nil,   nil,   nil,   nil,   nil,    26,
    46,    47,   nil,    31,    44,    35,    37,    38,    39,    40,
    18,    48,   nil,   nil,    43,   nil,   nil,   nil,    46,    47,
    26,    31,    44,    35,    37,    38,    39,    40,    18,    48,
   nil,   nil,    43,   nil,   nil,   nil,   nil,   nil,   220,    31,
    44,    35,    37,    38,    39,    40,   nil,    48,   nil,    18,
    43,   nil,   nil,   nil,   nil,   nil,   220,    46,    47,   nil,
    31,    44,    35,    37,    38,    39,    40,    18,    48,   nil,
   nil,    43,   nil,   nil,   nil,    46,    47,   220,    31,    44,
    35,    37,    38,    39,    40,    18,    48,   nil,   nil,    43,
   nil,   nil,   nil,    46,    47,    26,    31,    44,    35,    37,
    38,    39,    40,   nil,    48,   nil,    18,    43,   nil,   nil,
   nil,   nil,   nil,   220,    46,    47,   nil,    31,    44,    35,
    37,    38,    39,    40,    18,    48,   nil,   nil,   nil,   nil,
   nil,   nil,    46,    47,   nil,    31,    44,    35,    37,    38,
    39,    40,    18,    48,   nil,   nil,   nil,   nil,   nil,   nil,
    46,    47,   nil,    31,    44,    35,    37,    38,    39,    40,
    43,    48,   nil,   nil,   nil,   nil,   143,   nil,   nil,   nil,
   nil,     8,   nil,   nil,   nil,   nil,   nil,   nil,    43,   nil,
   nil,   nil,   nil,   nil,   220,   nil,   nil,   150,   nil,   nil,
   nil,   nil,   nil,   nil,   147,    18,    43,   nil,   nil,   nil,
   nil,   nil,   220,    46,    47,   nil,    31,    44,    35,    37,
    38,    39,    40,    18,    48,   nil,   nil,    43,   nil,   nil,
   nil,    46,    47,   143,    31,    44,    35,    37,    38,    39,
    40,    18,    48,   nil,   nil,   nil,   nil,   nil,   nil,    46,
    47,   nil,    31,    44,    35,    37,    38,    39,    40,    43,
    48,   147,    18,   nil,   nil,   143,   nil,   nil,   nil,   nil,
    46,    47,   nil,    31,    44,    35,    37,    38,    39,    40,
   nil,    48,    43,   nil,   nil,   nil,   150,   nil,    26,   nil,
   nil,   nil,   nil,   147,    18,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    46,    47,   nil,    31,    44,    35,    37,    38,
    39,    40,    43,    48,   nil,   nil,   nil,    18,    26,   nil,
   nil,   nil,   nil,   nil,   nil,    46,    47,   nil,    31,    44,
    35,    37,    38,    39,    40,    43,    48,   nil,   nil,   185,
   186,    26,   187,   188,   189,   nil,   nil,    18,   nil,   190,
   191,   192,   193,   194,   195,    46,    47,   nil,    31,    44,
    35,    37,    38,    39,    40,    43,    48,   nil,   nil,   nil,
    18,    26,   nil,   nil,   nil,   nil,   nil,   nil,    46,    47,
   nil,    31,    44,    35,    37,    38,    39,    40,    43,    48,
   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,
    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    46,    47,
   nil,    31,    44,    35,    37,    38,    39,    40,    43,    48,
   nil,   nil,   nil,    18,   143,   nil,   nil,   nil,   nil,   nil,
   nil,    46,    47,   nil,    31,    44,    35,    37,    38,    39,
    40,   nil,    48,    43,   nil,   150,   nil,   nil,   nil,    26,
   nil,   nil,   147,    18,   nil,   113,   nil,   nil,   nil,   nil,
   nil,    46,    47,   nil,    31,    44,    35,    37,    38,    39,
    40,    43,    48,   nil,   nil,   nil,   nil,    26,    18,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    46,    47,   nil,    31,
    44,    35,    37,    38,    39,    40,    43,    48,   nil,   nil,
   nil,   nil,    26,   nil,   nil,   nil,    18,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    46,    47,   nil,    31,    44,    35,
    37,    38,    39,    40,    43,    48,   nil,   nil,   nil,   nil,
    26,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    46,
    47,   nil,    31,    44,    35,    37,    38,    39,    40,    43,
    48,   nil,   nil,   nil,   nil,   220,   nil,   nil,   nil,    18,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    46,    47,   nil,
    31,    44,    35,    37,    38,    39,    40,   nil,    48,   nil,
   nil,   nil,   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    46,    47,   nil,    31,    44,    35,    37,    38,
    39,    40,   nil,    48 ]

racc_action_check = [
    91,    20,    52,   126,   182,    54,    91,    17,    53,   114,
   189,    53,    80,    93,     0,    53,   189,     0,   249,    94,
    53,    95,    53,    53,   249,    53,    53,    54,   185,    17,
   185,   185,    97,   182,    20,    91,   242,    52,   126,    86,
    86,    98,   242,    91,    91,    99,    91,    91,    91,    91,
    91,    91,    91,   249,    91,    80,    80,    19,    19,    48,
    48,   249,   249,   100,   249,   249,   249,   249,   249,   249,
   249,   242,   249,   102,    90,    84,   113,    92,   115,   242,
   242,   116,   242,   242,   242,   242,   242,   242,   242,   222,
   242,   177,   117,   118,   122,   222,   125,    83,   131,   132,
   222,    81,   135,   177,   136,   177,   177,     8,   177,   177,
   177,   177,   141,     8,   142,    78,   144,    72,   147,     8,
   148,    71,   170,    63,   222,   174,   175,    61,    60,   180,
   181,    51,   222,   222,   183,   222,   222,   222,   222,   222,
   222,   222,     8,   222,    45,    44,    43,   187,    41,    40,
     8,     8,    39,     8,     8,     8,     8,     8,     8,     8,
   220,     8,   104,    38,    37,    35,   220,    32,    18,   196,
    16,   220,    13,    12,   104,   209,   104,   104,   219,   104,
   104,   210,   211,   216,   219,    11,   218,    10,     9,   221,
     7,   226,   236,   237,   238,   220,   217,   239,     5,   243,
   245,   246,   217,   220,   220,     1,   220,   220,   220,   220,
   220,   220,   220,   219,   220,   253,   nil,   nil,   nil,   nil,
   nil,   219,   219,   nil,   219,   219,   219,   219,   219,   219,
   219,   217,   219,   nil,   nil,   208,   nil,   nil,   nil,   217,
   217,   208,   217,   217,   217,   217,   217,   217,   217,   nil,
   217,   nil,   nil,   204,   nil,   nil,   nil,   nil,   nil,   204,
   nil,   nil,   208,   nil,   nil,   nil,   nil,   nil,   nil,   208,
   208,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   208,   208,
   nil,   208,   208,   208,   208,   208,   208,   208,   204,   208,
   nil,   nil,   199,   nil,   nil,   nil,   204,   204,   199,   204,
   204,   204,   204,   204,   204,   204,   nil,   204,   nil,   nil,
   133,   nil,   nil,   nil,   nil,   nil,   133,   nil,   nil,   199,
   nil,   nil,   nil,   nil,   nil,   nil,   199,   199,   195,   nil,
   nil,   nil,   nil,   nil,   195,   199,   199,   nil,   199,   199,
   199,   199,   199,   199,   199,   133,   199,   nil,   nil,   nil,
   nil,   nil,   nil,   133,   133,   nil,   133,   133,   133,   133,
   133,   133,   133,   195,   133,   nil,   nil,   103,   nil,   nil,
   nil,   195,   195,   103,   195,   195,   195,   195,   195,   195,
   195,   nil,   195,   nil,   nil,    69,   nil,   nil,   nil,   nil,
   nil,    69,   nil,   nil,   103,   nil,   nil,   nil,   nil,   nil,
   nil,   103,   103,    21,   nil,   nil,   nil,   nil,   nil,    21,
   103,   103,   nil,   103,   103,   103,   103,   103,   103,   103,
    69,   103,   nil,   nil,    26,   nil,   nil,   nil,    69,    69,
    26,    69,    69,    69,    69,    69,    69,    69,    21,    69,
   nil,   nil,   194,   nil,   nil,   nil,   nil,   nil,   194,    21,
    21,    21,    21,    21,    21,    21,   nil,    21,   nil,    26,
   193,   nil,   nil,   nil,   nil,   nil,   193,    26,    26,   nil,
    26,    26,    26,    26,    26,    26,    26,   194,    26,   nil,
   nil,   192,   nil,   nil,   nil,   194,   194,   192,   194,   194,
   194,   194,   194,   194,   194,   193,   194,   nil,   nil,    67,
   nil,   nil,   nil,   193,   193,    67,   193,   193,   193,   193,
   193,   193,   193,   nil,   193,   nil,   192,   190,   nil,   nil,
   nil,   nil,   nil,   190,   192,   192,   nil,   192,   192,   192,
   192,   192,   192,   192,    67,   192,   nil,   nil,   nil,   nil,
   nil,   nil,    67,    67,   nil,    67,    67,    67,    67,    67,
    67,    67,   190,    67,   nil,   nil,   nil,   nil,   nil,   nil,
   190,   190,   nil,   190,   190,   190,   190,   190,   190,   190,
   143,   190,   nil,   nil,   nil,   nil,   143,   nil,   nil,   nil,
   nil,   143,   nil,   nil,   nil,   nil,   nil,   nil,   188,   nil,
   nil,   nil,   nil,   nil,   188,   nil,   nil,   143,   nil,   nil,
   nil,   nil,   nil,   nil,   143,   143,   186,   nil,   nil,   nil,
   nil,   nil,   186,   143,   143,   nil,   143,   143,   143,   143,
   143,   143,   143,   188,   143,   nil,   nil,   150,   nil,   nil,
   nil,   188,   188,   150,   188,   188,   188,   188,   188,   188,
   188,   186,   188,   nil,   nil,   nil,   nil,   nil,   nil,   186,
   186,   nil,   186,   186,   186,   186,   186,   186,   186,   184,
   186,   150,   150,   nil,   nil,   184,   nil,   nil,   nil,   nil,
   150,   150,   nil,   150,   150,   150,   150,   150,   150,   150,
   nil,   150,    77,   nil,   nil,   nil,   184,   nil,    77,   nil,
   nil,   nil,   nil,   184,   184,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   184,   184,   nil,   184,   184,   184,   184,   184,
   184,   184,    76,   184,   nil,   nil,   nil,    77,    76,   nil,
   nil,   nil,   nil,   nil,   nil,    77,    77,   nil,    77,    77,
    77,    77,    77,    77,    77,    68,    77,   nil,   nil,   146,
   146,    68,   146,   146,   146,   nil,   nil,    76,   nil,   146,
   146,   146,   146,   146,   146,    76,    76,   nil,    76,    76,
    76,    76,    76,    76,    76,    75,    76,   nil,   nil,   nil,
    68,    75,   nil,   nil,   nil,   nil,   nil,   nil,    68,    68,
   nil,    68,    68,    68,    68,    68,    68,    68,    74,    68,
   nil,   nil,   nil,   nil,    74,   nil,   nil,   nil,   nil,   nil,
    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    75,    75,
   nil,    75,    75,    75,    75,    75,    75,    75,   179,    75,
   nil,   nil,   nil,    74,   179,   nil,   nil,   nil,   nil,   nil,
   nil,    74,    74,   nil,    74,    74,    74,    74,    74,    74,
    74,   nil,    74,    73,   nil,   179,   nil,   nil,   nil,    73,
   nil,   nil,   179,   179,   nil,    73,   nil,   nil,   nil,   nil,
   nil,   179,   179,   nil,   179,   179,   179,   179,   179,   179,
   179,    62,   179,   nil,   nil,   nil,   nil,    62,    73,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    73,    73,   nil,    73,
    73,    73,    73,    73,    73,    73,   173,    73,   nil,   nil,
   nil,   nil,   173,   nil,   nil,   nil,    62,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    62,    62,   nil,    62,    62,    62,
    62,    62,    62,    62,    66,    62,   nil,   nil,   nil,   nil,
    66,   173,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   173,
   173,   nil,   173,   173,   173,   173,   173,   173,   173,   191,
   173,   nil,   nil,   nil,   nil,   191,   nil,   nil,   nil,    66,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    66,    66,   nil,
    66,    66,    66,    66,    66,    66,    66,   nil,    66,   nil,
   nil,   nil,   nil,   nil,   191,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   191,   191,   nil,   191,   191,   191,   191,   191,
   191,   191,   nil,   191 ]

racc_action_pointer = [
     0,   205,   nil,   nil,   nil,   196,   nil,   175,   101,   188,
   183,   182,   132,   152,   nil,   nil,   161,   -12,   115,     8,
   -17,   397,   nil,   nil,   nil,   nil,   418,   nil,   nil,   nil,
   nil,   nil,   114,   nil,   nil,   153,   nil,   152,   151,   140,
   137,    89,   nil,    93,   139,    85,   nil,   nil,    -1,   nil,
   nil,   126,    -4,    -1,   -14,   nil,   nil,   nil,   nil,   nil,
    98,    86,   865,    82,   nil,   nil,   918,   493,   729,   379,
   nil,   108,    76,   837,   782,   759,   706,   676,   109,   nil,
     6,    41,   nil,    91,    66,   nil,    29,   nil,   nil,   nil,
    58,    -6,    65,   -28,    -3,    -1,   nil,     7,    16,    20,
    22,   nil,    42,   361,   153,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    63,    -4,    65,    68,    79,    80,   nil,
   nil,   nil,    88,   nil,   nil,    89,    -3,   nil,   nil,   nil,
   nil,    85,    90,   304,   nil,    61,    63,   nil,   nil,   nil,
   nil,    80,   111,   564,    74,   nil,   706,   106,    85,   nil,
   621,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   114,   nil,   nil,   890,   112,   117,   nil,    82,   nil,   812,
    88,   117,    -9,   121,   653,    -6,   600,   135,   582,   -23,
   511,   943,   475,   454,   436,   322,   152,   nil,   nil,   286,
   nil,   nil,   nil,   nil,   247,   nil,   nil,   nil,   229,   163,
   139,   173,   nil,   nil,   nil,   nil,   148,   190,   174,   172,
   154,   154,    83,   nil,   nil,   nil,   152,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   150,   152,   153,   162,
   nil,   nil,    30,   186,   nil,   187,   192,   nil,   nil,    12,
   nil,   nil,   nil,   174,   nil,   nil ]

racc_action_default = [
  -151,  -151,    -1,    -2,    -3,    -5,   -18,  -151,  -151,  -151,
    -7,  -151,  -151,   -26,   -27,   -28,   -30,   -33,  -148,  -110,
  -113,  -151,  -115,  -116,  -117,  -118,  -151,  -120,  -121,  -122,
  -123,  -124,  -151,  -126,  -127,  -151,  -129,  -151,  -151,  -151,
  -151,  -135,  -136,  -140,  -151,  -151,  -146,  -147,  -151,   256,
    -4,  -151,  -151,  -151,   -38,   -39,   -41,   -42,   -81,   -25,
   -58,  -151,  -151,  -151,   -32,  -148,  -151,  -151,  -151,  -151,
  -114,  -151,  -151,  -151,  -151,  -151,  -151,  -151,  -138,  -139,
  -151,  -151,  -150,  -151,    -6,   -10,   -14,   -12,   -13,   -19,
  -151,  -151,  -151,  -151,  -151,  -151,   -46,   -48,   -50,   -51,
  -151,   -37,   -60,  -151,   -35,   -29,   -31,  -108,  -109,  -111,
  -112,  -119,  -125,  -151,  -151,  -151,  -151,  -151,  -151,  -137,
  -141,  -143,  -151,  -145,  -149,  -151,  -151,   -11,   -15,   -16,
   -20,  -151,   -23,  -151,   -43,  -151,  -151,   -47,   -49,   -52,
   -36,   -65,  -151,  -151,   -59,   -67,  -151,  -151,   -84,   -86,
  -151,   -89,   -90,   -91,   -93,   -94,   -95,   -96,   -97,   -98,
  -105,  -106,  -107,  -128,  -130,  -131,  -132,  -133,  -134,  -144,
  -151,    -9,   -21,  -151,  -151,   -75,   -44,  -151,   -34,  -151,
  -151,  -151,  -151,  -107,  -151,  -151,  -151,  -151,  -151,  -151,
  -151,  -151,  -151,  -151,  -151,  -151,  -151,   -40,   -80,  -151,
   -88,    -8,   -22,   -24,  -151,   -45,   -53,   -54,  -151,  -151,
   -66,   -61,   -63,   -64,   -17,   -92,   -85,  -151,  -151,  -151,
  -151,  -151,  -151,   -71,   -72,   -77,  -151,   -79,   -99,  -100,
  -101,  -102,  -103,  -104,   -87,   -74,   -55,  -151,  -151,  -151,
   -70,   -76,  -151,  -151,   -78,  -151,   -57,   -83,   -62,  -151,
   -69,   -73,   -56,  -151,   -68,   -82 ]

racc_goto_table = [
    64,    53,    17,   144,   174,    54,   131,    85,   213,   197,
    15,    89,   141,   223,   212,   109,   110,   127,    13,    59,
    71,     1,    60,   102,    90,   178,    84,   198,   205,   206,
   207,    50,   245,   246,   211,    87,    10,   101,     5,     4,
     3,   216,   234,   182,   240,   200,   106,     2,   130,   197,
   104,   122,    70,   120,    54,   112,    17,   121,   nil,   nil,
   107,   108,   nil,   nil,   105,   nil,   213,   114,   115,   116,
   117,   118,   248,   nil,   nil,   235,   nil,   nil,   nil,   210,
   197,   171,   nil,   140,   nil,   132,   134,   nil,   202,   nil,
   221,   nil,   225,   243,   228,   229,   230,   231,   232,   233,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   236,    87,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   239,   nil,   241,   nil,   177,   nil,   175,   176,    54,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   183,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   250,   nil,   nil,   nil,
   nil,   nil,   nil,   254,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   132,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   175,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    71,   nil,   175,   nil,   nil,   nil,
   247,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   255 ]

racc_goto_check = [
    12,    15,    19,    38,    20,    29,    18,     9,    43,    13,
    23,    16,    27,    48,    42,    59,    59,    11,    21,    22,
    19,     1,    25,    26,    17,    28,     8,    31,    35,    36,
    37,     7,    39,    40,    41,    12,     6,    12,     5,     4,
     3,    52,    53,    38,    48,    54,    12,     2,    16,    13,
    15,    61,    62,    74,    29,    12,    19,    75,   nil,   nil,
    19,    19,   nil,   nil,    23,   nil,    43,    19,    19,    19,
    19,    19,    42,   nil,   nil,    20,   nil,   nil,   nil,    38,
    13,     9,   nil,    12,   nil,    19,    29,   nil,    18,   nil,
    46,   nil,    46,    20,    46,    46,    46,    46,    46,    46,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    38,    12,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    46,   nil,    46,   nil,    15,   nil,    19,    29,    29,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    46,   nil,   nil,   nil,
   nil,   nil,   nil,    46,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    19,   nil,    19,   nil,   nil,   nil,
    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    12 ]

racc_goto_pointer = [
   nil,    21,    47,    40,    39,    38,    31,    21,   -26,   -45,
   nil,   -69,   -17,  -138,   nil,   -11,   -42,   -29,   -85,    -6,
  -129,    10,     6,     2,   nil,     9,   -37,   -90,  -116,    -7,
   nil,  -120,   nil,   nil,   nil,  -149,  -148,  -147,  -100,  -205,
  -204,  -146,  -166,  -172,   nil,   nil,   -96,   nil,  -174,   nil,
   nil,   nil,  -143,  -157,  -105,   nil,   nil,   nil,   nil,   -53,
   nil,   -29,    31,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   -27,   -23 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   181,   nil,   nil,   nil,   nil,
    86,   nil,    33,   145,     6,   nil,   nil,   nil,   nil,   162,
   nil,   nil,   nil,   nil,    16,   nil,   nil,   nil,   nil,    34,
    55,   224,    56,    57,    95,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    24,   161,   155,   146,   156,   nil,   157,
   158,   159,   148,   149,   151,   152,   153,   154,   160,    19,
    20,    21,    22,    23,    25,    27,    28,    29,    30,    32,
    36,    41,    42,    45,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 63, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  3, 65, :_reduce_4,
  0, 68, :_reduce_none,
  3, 68, :_reduce_6,
  0, 69, :_reduce_none,
  5, 69, :_reduce_8,
  3, 70, :_reduce_9,
  1, 70, :_reduce_none,
  2, 71, :_reduce_11,
  1, 72, :_reduce_none,
  1, 72, :_reduce_13,
  0, 73, :_reduce_14,
  1, 73, :_reduce_15,
  1, 73, :_reduce_16,
  3, 75, :_reduce_17,
  1, 67, :_reduce_none,
  4, 66, :_reduce_19,
  5, 66, :_reduce_20,
  3, 79, :_reduce_21,
  3, 80, :_reduce_22,
  1, 80, :_reduce_none,
  4, 78, :_reduce_24,
  3, 76, :_reduce_25,
  2, 76, :_reduce_26,
  1, 83, :_reduce_27,
  1, 83, :_reduce_28,
  3, 85, :_reduce_29,
  1, 85, :_reduce_none,
  3, 86, :_reduce_31,
  2, 86, :_reduce_32,
  1, 86, :_reduce_none,
  4, 84, :_reduce_34,
  2, 87, :_reduce_35,
  3, 77, :_reduce_36,
  2, 77, :_reduce_37,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 93, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  3, 94, :_reduce_43,
  4, 94, :_reduce_44,
  5, 95, :_reduce_45,
  1, 96, :_reduce_46,
  2, 96, :_reduce_47,
  1, 96, :_reduce_48,
  2, 96, :_reduce_49,
  1, 96, :_reduce_50,
  1, 96, :_reduce_51,
  2, 96, :_reduce_52,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  2, 98, :_reduce_55,
  4, 99, :_reduce_56,
  1, 101, :_reduce_none,
  0, 88, :_reduce_none,
  2, 88, :_reduce_59,
  0, 89, :_reduce_none,
  3, 89, :_reduce_61,
  3, 103, :_reduce_62,
  1, 103, :_reduce_none,
  1, 104, :_reduce_none,
  0, 90, :_reduce_none,
  2, 90, :_reduce_66,
  1, 106, :_reduce_none,
  6, 107, :_reduce_68,
  5, 107, :_reduce_69,
  4, 109, :_reduce_70,
  3, 109, :_reduce_71,
  1, 110, :_reduce_none,
  3, 110, :_reduce_73,
  3, 82, :_reduce_74,
  1, 82, :_reduce_none,
  4, 111, :_reduce_76,
  3, 111, :_reduce_77,
  4, 112, :_reduce_78,
  3, 112, :_reduce_79,
  2, 113, :_reduce_80,
  1, 91, :_reduce_81,
  3, 102, :_reduce_82,
  1, 102, :_reduce_none,
  1, 100, :_reduce_none,
  3, 100, :_reduce_85,
  1, 114, :_reduce_none,
  3, 114, :_reduce_87,
  2, 115, :_reduce_88,
  1, 115, :_reduce_none,
  1, 116, :_reduce_none,
  1, 117, :_reduce_none,
  3, 117, :_reduce_92,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  3, 119, :_reduce_99,
  3, 119, :_reduce_100,
  3, 119, :_reduce_101,
  3, 119, :_reduce_102,
  3, 119, :_reduce_103,
  3, 119, :_reduce_104,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 120, :_reduce_none,
  3, 81, :_reduce_108,
  3, 81, :_reduce_109,
  1, 81, :_reduce_none,
  3, 121, :_reduce_111,
  3, 121, :_reduce_112,
  1, 121, :_reduce_none,
  2, 122, :_reduce_114,
  1, 122, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  3, 124, :_reduce_119,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 128, :_reduce_124,
  3, 105, :_reduce_125,
  1, 105, :_reduce_none,
  1, 131, :_reduce_none,
  4, 126, :_reduce_128,
  1, 126, :_reduce_none,
  4, 132, :_reduce_130,
  4, 132, :_reduce_131,
  4, 132, :_reduce_132,
  4, 132, :_reduce_133,
  4, 132, :_reduce_134,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  3, 133, :_reduce_137,
  2, 133, :_reduce_138,
  2, 133, :_reduce_139,
  1, 133, :_reduce_140,
  3, 134, :_reduce_141,
  1, 135, :_reduce_none,
  1, 136, :_reduce_none,
  2, 137, :_reduce_144,
  1, 137, :_reduce_145,
  1, 123, :_reduce_146,
  1, 123, :_reduce_147,
  1, 74, :_reduce_148,
  3, 130, :_reduce_149,
  2, 130, :_reduce_150 ]

racc_reduce_n = 151

racc_shift_n = 256

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :FETCH => 4,
  :FIRST => 5,
  :unsigned_integer => 6,
  :ROWS => 7,
  :ONLY => 8,
  :comma => 9,
  :ASC => 10,
  :DESC => 11,
  :left_paren => 12,
  :right_paren => 13,
  :INSERT => 14,
  :INTO => 15,
  :VALUES => 16,
  :SELECT => 17,
  :asterisk => 18,
  :AS => 19,
  :FROM => 20,
  :CROSS => 21,
  :JOIN => 22,
  :INNER => 23,
  :LEFT => 24,
  :OUTER => 25,
  :RIGHT => 26,
  :FULL => 27,
  :ON => 28,
  :USING => 29,
  :WHERE => 30,
  :GROUP => 31,
  :HAVING => 32,
  :NOT => 33,
  :BETWEEN => 34,
  :AND => 35,
  :IN => 36,
  :LIKE => 37,
  :IS => 38,
  :NULL => 39,
  :EXISTS => 40,
  :identifier => 41,
  :OR => 42,
  :equals_operator => 43,
  :not_equals_operator => 44,
  :less_than_operator => 45,
  :greater_than_operator => 46,
  :less_than_or_equals_operator => 47,
  :greater_than_or_equals_operator => 48,
  :plus_sign => 49,
  :minus_sign => 50,
  :solidus => 51,
  :CURRENT_USER => 52,
  :period => 53,
  :COUNT => 54,
  :AVG => 55,
  :MAX => 56,
  :MIN => 57,
  :SUM => 58,
  :E => 59,
  :quote => 60,
  :character_string_literal => 61 }

racc_nt_base = 62

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "FETCH",
  "FIRST",
  "unsigned_integer",
  "ROWS",
  "ONLY",
  "comma",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "asterisk",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "E",
  "quote",
  "character_string_literal",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "fetch_only_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_name",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "select_list",
  "table_expression",
  "select_sublist",
  "derived_column",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "column_reference",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "general_literal",
  "qualifier",
  "general_set_function",
  "exact_numeric_literal",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1], val[2]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 22)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 25)
  def _reduce_9(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.racc', 29)
  def _reduce_11(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.racc', 33)
  def _reduce_13(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_14(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 43)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 18 omitted

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_20(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_22(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_27(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_29(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_32(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 33 omitted

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_37(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

module_eval(<<'.,.,', 'parser.racc', 99)
  def _reduce_43(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 100)
  def _reduce_44(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 103)
  def _reduce_45(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_46(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_49(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_50(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 111)
  def _reduce_51(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 112)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 53 omitted

# reduce 54 omitted

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 57 omitted

# reduce 58 omitted

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 60 omitted

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 136)
  def _reduce_62(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_66(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 67 omitted

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_68(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 152)
  def _reduce_69(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 155)
  def _reduce_70(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 156)
  def _reduce_71(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 72 omitted

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_73(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 163)
  def _reduce_74(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 75 omitted

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_76(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_77(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 174)
  def _reduce_78(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 175)
  def _reduce_79(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_82(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 83 omitted

# reduce 84 omitted

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 86 omitted

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_87(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 198)
  def _reduce_88(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

module_eval(<<'.,.,', 'parser.racc', 206)
  def _reduce_92(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_99(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_100(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 219)
  def _reduce_101(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 220)
  def _reduce_102(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_103(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 222)
  def _reduce_104(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_108(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 233)
  def _reduce_109(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 110 omitted

module_eval(<<'.,.,', 'parser.racc', 237)
  def _reduce_111(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 238)
  def _reduce_112(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 113 omitted

module_eval(<<'.,.,', 'parser.racc', 242)
  def _reduce_114(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_119(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_124(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_125(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 126 omitted

# reduce 127 omitted

module_eval(<<'.,.,', 'parser.racc', 270)
  def _reduce_128(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 129 omitted

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_130(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_131(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_132(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_133(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_134(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

# reduce 135 omitted

# reduce 136 omitted

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_138(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_139(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_140(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_144(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_145(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_146(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_147(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_148(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_149(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_150(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
