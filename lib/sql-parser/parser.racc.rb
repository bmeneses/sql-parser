#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.16
# from Racc grammar file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 364)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    45,   258,   103,   207,    75,    73,    83,   235,   102,    30,
   209,    75,    20,   245,    75,   302,    75,    45,    75,   246,
    20,   210,     7,   284,    59,     8,    30,    75,    76,    60,
   236,     9,   237,   238,    45,    76,    76,   209,    76,    20,
    76,    75,    76,    30,    76,    84,    11,    21,   -85,    12,
   -85,    76,    47,    48,    57,    35,    20,    39,    41,    42,
    43,    44,    46,    49,    50,    76,    53,    54,    56,    47,
    48,    61,    35,    20,    39,    41,    42,    43,    44,    46,
    49,    50,   115,    53,    54,    56,    47,    48,    67,    35,
    45,    39,    41,    42,    43,    44,    46,    49,    50,    30,
    53,    54,    56,    70,    75,    14,    16,   186,   187,   126,
   122,   123,    79,   169,   170,    72,    45,    94,    93,   108,
    81,    82,   -85,    87,    88,   239,   103,    89,    76,    20,
    90,    91,   102,   109,    92,   111,   112,    21,   113,   114,
   267,   268,    47,    48,    95,    35,    96,    39,    41,    42,
    43,    44,    46,    49,    50,   211,    53,    54,    56,    97,
   118,    45,    67,    21,   126,    75,   156,   164,    47,    48,
   239,    35,   165,    39,    41,    42,    43,    44,    46,    49,
    50,   166,    53,    54,    56,   108,   167,    45,   107,    76,
   174,    67,   176,   177,   178,   179,   239,   180,   183,   109,
   211,   111,   112,   204,   113,   114,   208,   213,    21,   214,
   215,   216,   217,    47,    48,   218,    35,   219,    39,    41,
    42,    43,    44,    46,    49,    50,   211,    53,    54,    56,
   220,   222,    45,   223,    21,    67,    67,   229,   230,    47,
    48,   239,    35,   209,    39,    41,    42,    43,    44,    46,
    49,    50,   231,    53,    54,    56,   108,   233,    45,   234,
   106,   156,   241,     8,   107,   259,   260,   239,   262,   263,
   109,   211,   111,   112,   273,   113,   114,   241,   278,    21,
   280,   281,   282,   208,    47,    48,   287,    35,   209,    39,
    41,    42,    43,    44,    46,    49,    50,   211,    53,    54,
    56,   288,   289,    45,   291,    21,   293,   294,   209,   300,
    47,    48,    30,    35,   301,    39,    41,    42,    43,    44,
    46,    49,    50,   nil,    53,    54,    56,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,   nil,   nil,
   nil,   nil,    20,   nil,   nil,   nil,   128,   nil,   nil,   nil,
    21,   nil,   nil,   nil,   nil,    47,    48,   nil,    35,   nil,
    39,    41,    42,    43,    44,    46,    49,    50,   136,    53,
    54,    56,   nil,   nil,   nil,   131,   132,    45,   nil,   nil,
   nil,   nil,   nil,   nil,    21,   nil,   128,   nil,   nil,    47,
    48,   nil,    35,   nil,    39,    41,    42,    43,    44,    46,
    49,    50,   nil,    53,    54,    56,   nil,   nil,   136,    45,
   nil,   nil,   nil,   nil,   nil,   131,   132,   nil,    30,   nil,
   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,
    48,   nil,    35,   nil,    39,    41,    42,    43,    44,    46,
    49,    50,    45,    53,    54,    56,   nil,   nil,    20,   nil,
   nil,    30,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,
   nil,    47,    48,   nil,    35,   nil,    39,    41,    42,    43,
    44,    46,    49,    50,   nil,    53,    54,    56,    45,   nil,
   nil,    20,   nil,   nil,   nil,   nil,   nil,    30,   nil,    21,
   nil,   nil,   nil,    14,    47,    48,   nil,    35,   nil,    39,
    41,    42,    43,    44,    46,    49,    50,   nil,    53,    54,
    56,   nil,    45,   nil,   nil,   nil,   nil,    20,   nil,   nil,
   nil,   128,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
    47,    48,   nil,    35,   nil,    39,    41,    42,    43,    44,
    46,    49,    50,   136,    53,    54,    56,    45,   nil,   nil,
   131,   132,   nil,   nil,   nil,   nil,    30,   nil,   nil,    21,
   nil,   nil,   nil,   nil,    47,    48,   nil,    35,   nil,    39,
    41,    42,    43,    44,    46,    49,    50,   nil,    53,    54,
    56,    45,   nil,   nil,   nil,   nil,    20,   nil,   nil,   nil,
    30,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,
    48,   nil,    35,   nil,    39,    41,    42,    43,    44,    46,
    49,    50,    45,    53,    54,    56,   nil,   nil,   nil,   nil,
    20,   239,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,
   nil,   nil,   nil,    47,    48,   nil,    35,   nil,    39,    41,
    42,    43,    44,    46,    49,    50,    45,    53,    54,    56,
   nil,   211,   nil,   nil,   nil,   239,   nil,   nil,   nil,    21,
   nil,   nil,   nil,   nil,    47,    48,   nil,    35,   nil,    39,
    41,    42,    43,    44,    46,    49,    50,    45,    53,    54,
    56,   nil,   nil,   nil,   nil,   211,    30,   nil,   nil,   nil,
   nil,     8,   nil,    21,   nil,   nil,   nil,   nil,    47,    48,
   nil,    35,   nil,    39,    41,    42,    43,    44,    46,    49,
    50,    45,    53,    54,    56,   nil,    20,   nil,   nil,   nil,
    30,   nil,   nil,   nil,    21,     8,   nil,   nil,   nil,    47,
    48,   nil,    35,   nil,    39,    41,    42,    43,    44,    46,
    49,    50,   nil,    53,    54,    56,   nil,   nil,   nil,   nil,
    20,    45,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,
   128,   nil,   nil,    47,    48,   nil,    35,   nil,    39,    41,
    42,    43,    44,    46,    49,    50,   nil,    53,    54,    56,
   nil,   nil,   136,    45,   nil,   nil,   nil,   nil,   nil,   131,
   132,   nil,    30,   nil,   nil,   nil,   nil,   nil,    21,   nil,
   nil,   nil,   nil,    47,    48,   nil,    35,   nil,    39,    41,
    42,    43,    44,    46,    49,    50,    45,    53,    54,    56,
   nil,   nil,    20,   nil,   nil,    30,   nil,   nil,   nil,   nil,
    21,   nil,   nil,   nil,   nil,    47,    48,   nil,    35,   nil,
    39,    41,    42,    43,    44,    46,    49,    50,    45,    53,
    54,    56,   nil,   nil,   nil,    20,   nil,    30,   nil,   nil,
   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,    48,
   nil,    35,   nil,    39,    41,    42,    43,    44,    46,    49,
    50,   nil,    53,    54,    56,   nil,   nil,    20,    45,   nil,
   nil,   nil,   nil,   nil,   nil,    21,   nil,   128,   nil,   nil,
    47,    48,   nil,    35,   nil,    39,    41,    42,    43,    44,
    46,    49,    50,   nil,    53,    54,    56,   nil,   nil,   136,
    45,   nil,   nil,   nil,   nil,   nil,   131,   132,   nil,    30,
   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
    47,    48,   nil,    35,   nil,    39,    41,    42,    43,    44,
    46,    49,    50,   nil,    53,    54,    56,   nil,   nil,    20,
    45,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,   128,
   nil,   nil,    47,    48,     8,    35,   nil,    39,    41,    42,
    43,    44,    46,    49,    50,   nil,    53,    54,    56,   nil,
   nil,   136,    45,   nil,   nil,   nil,   nil,   nil,   131,   132,
   nil,   239,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,
   nil,   nil,    47,    48,   nil,    35,   nil,    39,    41,    42,
    43,    44,    46,    49,    50,    45,    53,    54,    56,   nil,
   nil,   211,   nil,   nil,    30,   nil,   nil,   nil,   nil,    21,
   nil,   nil,   nil,   nil,    47,    48,   nil,    35,   nil,    39,
    41,    42,    43,    44,    46,    49,    50,    45,    53,    54,
    56,   nil,   nil,   nil,    20,   nil,   128,   nil,   nil,   nil,
   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,    48,   nil,
    35,   nil,    39,    41,    42,    43,    44,    46,    49,    50,
    45,    53,    54,    56,   nil,   131,   211,   nil,   nil,   239,
   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,
    48,   nil,    35,   nil,    39,    41,    42,    43,    44,    46,
    49,    50,   nil,    53,    54,    56,   nil,   nil,   nil,   211,
    45,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,   128,
   nil,   nil,    47,    48,   nil,    35,   nil,    39,    41,    42,
    43,    44,    46,    49,    50,   nil,    53,    54,    56,   nil,
   nil,   136,    45,   nil,   nil,   nil,   nil,   nil,   131,   132,
   nil,    30,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,
   nil,   nil,    47,    48,   nil,    35,   nil,    39,    41,    42,
    43,    44,    46,    49,    50,    45,    53,    54,    56,   nil,
   nil,    20,   nil,   nil,    30,   nil,   nil,   nil,   nil,    21,
   158,   nil,   nil,   nil,    47,    48,   nil,    35,   nil,    39,
    41,    42,    43,    44,    46,    49,    50,    45,    53,    54,
    56,   nil,   nil,   nil,    20,   nil,    30,   nil,   nil,   nil,
   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,    48,   nil,
    35,   nil,    39,    41,    42,    43,    44,    46,    49,    50,
    45,    53,    54,    56,   nil,   nil,    20,   nil,   nil,    30,
   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,
    48,   nil,    35,   nil,    39,    41,    42,    43,    44,    46,
    49,    50,    45,    53,    54,    56,   nil,   nil,   nil,    20,
   nil,    30,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,
   nil,   nil,    47,    48,   nil,    35,   nil,    39,    41,    42,
    43,    44,    46,    49,    50,    45,    53,    54,    56,   nil,
   nil,    20,   nil,   nil,    30,   nil,   nil,   nil,   nil,    21,
   nil,   nil,   nil,   nil,    47,    48,   nil,    35,   nil,    39,
    41,    42,    43,    44,    46,    49,    50,    45,    53,    54,
    56,   nil,   nil,   nil,    20,   nil,    30,   nil,   nil,   nil,
   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,    48,   nil,
    35,   nil,    39,    41,    42,    43,    44,    46,    49,    50,
    45,    53,    54,    56,   nil,   nil,    20,   nil,   nil,    30,
   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,
    48,   nil,    35,   nil,    39,    41,    42,    43,    44,    46,
    49,    50,    45,    53,    54,    56,   nil,   nil,   nil,    20,
   nil,    30,   nil,   nil,   nil,   nil,   nil,    45,   nil,   nil,
    79,   nil,    47,    48,   nil,    35,    30,    39,    41,    42,
    43,    44,    46,    49,    50,   nil,    53,    54,    56,   nil,
   nil,    20,   nil,    45,   nil,   nil,   nil,   nil,   nil,    21,
   nil,   nil,    30,   nil,    47,    48,    20,    35,   nil,    39,
    41,    42,    43,    44,    46,    49,    50,   nil,    53,    54,
    56,   nil,    35,   nil,    39,    41,    42,    43,    44,    46,
    49,    50,    20,    53,    54,    56,   nil,   nil,    45,   nil,
    21,   nil,   nil,   nil,   nil,    47,    48,   239,    35,   nil,
    39,    41,    42,    43,    44,    46,    49,    50,   nil,    53,
    54,    56,   nil,   nil,    45,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    30,   nil,   nil,   nil,   211,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
    47,    48,   nil,    35,   nil,    39,    41,    42,    43,    44,
    46,    49,    50,    20,    53,    54,    56,   nil,   nil,    45,
   nil,    21,   nil,   nil,   nil,   nil,    47,    48,   239,    35,
   nil,    39,    41,    42,    43,    44,    46,    49,    50,   nil,
    53,    54,    56,   nil,   nil,    45,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   239,   nil,   nil,   nil,   211,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,
   nil,    47,    48,   nil,    35,   nil,    39,    41,    42,    43,
    44,    46,    49,    50,   211,    53,    54,    56,   nil,   nil,
   nil,   nil,    21,   nil,   nil,   nil,   nil,    47,    48,  -166,
    35,   nil,    39,    41,    42,    43,    44,    46,    49,    50,
   nil,    53,    54,    56,   nil,  -166,  -166,   nil,  -166,  -166,
  -166,   nil,   nil,   nil,   nil,  -166,  -166,  -166,  -166,  -166,
  -166,   nil,   nil,   nil,   nil,   nil,  -166,  -166,  -166,   193,
   194,   nil,   195,   196,   197,   nil,   nil,   nil,   nil,   198,
   199,   200,   201,   202,   203,  -153,  -153,   nil,  -153,  -153,
  -153,   nil,   nil,   nil,   nil,  -153,  -153,  -153,  -153,  -153,
  -153 ]

racc_action_check = [
   106,   211,   167,   132,    87,    19,    24,   191,   167,   106,
   134,   302,   230,   197,   287,   296,   115,    83,    73,   197,
   288,   134,     0,   260,    10,     0,    83,    19,    87,    10,
   193,     1,   193,   193,    84,   302,   230,   191,   287,   106,
   115,   167,    73,    84,   288,    24,     5,   106,   211,     7,
   132,    19,   106,   106,     9,   106,    83,   106,   106,   106,
   106,   106,   106,   106,   106,   167,   106,   106,   106,    83,
    83,    11,    83,    84,    83,    83,    83,    83,    83,    83,
    83,    83,    63,    83,    83,    83,    84,    84,    12,    84,
     8,    84,    84,    84,    84,    84,    84,    84,    84,     8,
    84,    84,    84,    13,    63,     8,     8,   125,   125,   125,
    77,    77,    77,   100,   100,    18,   199,    50,    50,   227,
    22,    22,    20,    36,    39,   199,    61,    41,    63,     8,
    42,    43,    61,   227,    44,   227,   227,     8,   227,   227,
   227,   227,     8,     8,    56,     8,    59,     8,     8,     8,
     8,     8,     8,     8,     8,   199,     8,     8,     8,    60,
    69,   200,    70,   199,    78,    61,    86,    93,   199,   199,
   200,   199,    96,   199,   199,   199,   199,   199,   199,   199,
   199,    97,   199,   199,   199,   119,    98,   201,   105,    61,
   107,   108,   109,   110,   112,   113,   201,   114,   117,   119,
   200,   119,   119,   131,   119,   119,   133,   158,   200,   159,
   160,   161,   162,   200,   200,   163,   200,   165,   200,   200,
   200,   200,   200,   200,   200,   200,   201,   200,   200,   200,
   166,   172,   202,   173,   201,   176,   177,   182,   183,   201,
   201,   202,   201,   184,   201,   201,   201,   201,   201,   201,
   201,   201,   185,   201,   201,   201,    62,   189,   203,   190,
    62,   192,   195,   204,    62,   219,   220,   203,   224,   225,
    62,   202,    62,    62,   232,    62,    62,   237,   240,   202,
   245,   253,   254,   256,   202,   202,   268,   202,   269,   202,
   202,   202,   202,   202,   202,   202,   202,   203,   202,   202,
   202,   270,   275,   207,   279,   203,   283,   284,   286,   294,
   203,   203,   207,   203,   295,   203,   203,   203,   203,   203,
   203,   203,   203,   nil,   203,   203,   203,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   208,   nil,   nil,
   nil,   nil,   207,   nil,   nil,   nil,   208,   nil,   nil,   nil,
   207,   nil,   nil,   nil,   nil,   207,   207,   nil,   207,   nil,
   207,   207,   207,   207,   207,   207,   207,   207,   208,   207,
   207,   207,   nil,   nil,   nil,   208,   208,   209,   nil,   nil,
   nil,   nil,   nil,   nil,   208,   nil,   209,   nil,   nil,   208,
   208,   nil,   208,   nil,   208,   208,   208,   208,   208,   208,
   208,   208,   nil,   208,   208,   208,   nil,   nil,   209,   210,
   nil,   nil,   nil,   nil,   nil,   209,   209,   nil,   210,   nil,
   nil,   nil,   nil,   nil,   209,   nil,   nil,   nil,   nil,   209,
   209,   nil,   209,   nil,   209,   209,   209,   209,   209,   209,
   209,   209,   223,   209,   209,   209,   nil,   nil,   210,   nil,
   nil,   223,   nil,   nil,   nil,   nil,   210,   nil,   nil,   nil,
   nil,   210,   210,   nil,   210,   nil,   210,   210,   210,   210,
   210,   210,   210,   210,   nil,   210,   210,   210,    16,   nil,
   nil,   223,   nil,   nil,   nil,   nil,   nil,    16,   nil,   223,
   nil,   nil,   nil,    16,   223,   223,   nil,   223,   nil,   223,
   223,   223,   223,   223,   223,   223,   223,   nil,   223,   223,
   223,   nil,   229,   nil,   nil,   nil,   nil,    16,   nil,   nil,
   nil,   229,   nil,   nil,   nil,    16,   nil,   nil,   nil,   nil,
    16,    16,   nil,    16,   nil,    16,    16,    16,    16,    16,
    16,    16,    16,   229,    16,    16,    16,    72,   nil,   nil,
   229,   229,   nil,   nil,   nil,   nil,    72,   nil,   nil,   229,
   nil,   nil,   nil,   nil,   229,   229,   nil,   229,   nil,   229,
   229,   229,   229,   229,   229,   229,   229,   nil,   229,   229,
   229,   233,   nil,   nil,   nil,   nil,    72,   nil,   nil,   nil,
   233,   nil,   nil,   nil,    72,   nil,   nil,   nil,   nil,    72,
    72,   nil,    72,   nil,    72,    72,    72,    72,    72,    72,
    72,    72,   236,    72,    72,    72,   nil,   nil,   nil,   nil,
   233,   236,   nil,   nil,   nil,   nil,   nil,   nil,   233,   nil,
   nil,   nil,   nil,   233,   233,   nil,   233,   nil,   233,   233,
   233,   233,   233,   233,   233,   233,   238,   233,   233,   233,
   nil,   236,   nil,   nil,   nil,   238,   nil,   nil,   nil,   236,
   nil,   nil,   nil,   nil,   236,   236,   nil,   236,   nil,   236,
   236,   236,   236,   236,   236,   236,   236,   239,   236,   236,
   236,   nil,   nil,   nil,   nil,   238,   239,   nil,   nil,   nil,
   nil,   239,   nil,   238,   nil,   nil,   nil,   nil,   238,   238,
   nil,   238,   nil,   238,   238,   238,   238,   238,   238,   238,
   238,   241,   238,   238,   238,   nil,   239,   nil,   nil,   nil,
   241,   nil,   nil,   nil,   239,   241,   nil,   nil,   nil,   239,
   239,   nil,   239,   nil,   239,   239,   239,   239,   239,   239,
   239,   239,   nil,   239,   239,   239,   nil,   nil,   nil,   nil,
   241,   118,   nil,   nil,   nil,   nil,   nil,   nil,   241,   nil,
   118,   nil,   nil,   241,   241,   nil,   241,   nil,   241,   241,
   241,   241,   241,   241,   241,   241,   nil,   241,   241,   241,
   nil,   nil,   118,   123,   nil,   nil,   nil,   nil,   nil,   118,
   118,   nil,   123,   nil,   nil,   nil,   nil,   nil,   118,   nil,
   nil,   nil,   nil,   118,   118,   nil,   118,   nil,   118,   118,
   118,   118,   118,   118,   118,   118,   258,   118,   118,   118,
   nil,   nil,   123,   nil,   nil,   258,   nil,   nil,   nil,   nil,
   123,   nil,   nil,   nil,   nil,   123,   123,   nil,   123,   nil,
   123,   123,   123,   123,   123,   123,   123,   123,   263,   123,
   123,   123,   nil,   nil,   nil,   258,   nil,   263,   nil,   nil,
   nil,   nil,   nil,   258,   nil,   nil,   nil,   nil,   258,   258,
   nil,   258,   nil,   258,   258,   258,   258,   258,   258,   258,
   258,   nil,   258,   258,   258,   nil,   nil,   263,   267,   nil,
   nil,   nil,   nil,   nil,   nil,   263,   nil,   267,   nil,   nil,
   263,   263,   nil,   263,   nil,   263,   263,   263,   263,   263,
   263,   263,   263,   nil,   263,   263,   263,   nil,   nil,   267,
   126,   nil,   nil,   nil,   nil,   nil,   267,   267,   nil,   126,
   nil,   nil,   nil,   nil,   nil,   267,   nil,   nil,   nil,   nil,
   267,   267,   nil,   267,   nil,   267,   267,   267,   267,   267,
   267,   267,   267,   nil,   267,   267,   267,   nil,   nil,   126,
   128,   nil,   nil,   nil,   nil,   nil,   nil,   126,   nil,   128,
   nil,   nil,   126,   126,   128,   126,   nil,   126,   126,   126,
   126,   126,   126,   126,   126,   nil,   126,   126,   126,   nil,
   nil,   128,   278,   nil,   nil,   nil,   nil,   nil,   128,   128,
   nil,   278,   nil,   nil,   nil,   nil,   nil,   128,   nil,   nil,
   nil,   nil,   128,   128,   nil,   128,   nil,   128,   128,   128,
   128,   128,   128,   128,   128,   282,   128,   128,   128,   nil,
   nil,   278,   nil,   nil,   282,   nil,   nil,   nil,   nil,   278,
   nil,   nil,   nil,   nil,   278,   278,   nil,   278,   nil,   278,
   278,   278,   278,   278,   278,   278,   278,   136,   278,   278,
   278,   nil,   nil,   nil,   282,   nil,   136,   nil,   nil,   nil,
   nil,   nil,   282,   nil,   nil,   nil,   nil,   282,   282,   nil,
   282,   nil,   282,   282,   282,   282,   282,   282,   282,   282,
   289,   282,   282,   282,   nil,   136,   136,   nil,   nil,   289,
   nil,   nil,   nil,   nil,   136,   nil,   nil,   nil,   nil,   136,
   136,   nil,   136,   nil,   136,   136,   136,   136,   136,   136,
   136,   136,   nil,   136,   136,   136,   nil,   nil,   nil,   289,
    79,   nil,   nil,   nil,   nil,   nil,   nil,   289,   nil,    79,
   nil,   nil,   289,   289,   nil,   289,   nil,   289,   289,   289,
   289,   289,   289,   289,   289,   nil,   289,   289,   289,   nil,
   nil,    79,    81,   nil,   nil,   nil,   nil,   nil,    79,    79,
   nil,    81,   nil,   nil,   nil,   nil,   nil,    79,   nil,   nil,
   nil,   nil,    79,    79,   nil,    79,   nil,    79,    79,    79,
    79,    79,    79,    79,    79,    88,    79,    79,    79,   nil,
   nil,    81,   nil,   nil,    88,   nil,   nil,   nil,   nil,    81,
    88,   nil,   nil,   nil,    81,    81,   nil,    81,   nil,    81,
    81,    81,    81,    81,    81,    81,    81,    89,    81,    81,
    81,   nil,   nil,   nil,    88,   nil,    89,   nil,   nil,   nil,
   nil,   nil,    88,   nil,   nil,   nil,   nil,    88,    88,   nil,
    88,   nil,    88,    88,    88,    88,    88,    88,    88,    88,
    90,    88,    88,    88,   nil,   nil,    89,   nil,   nil,    90,
   nil,   nil,   nil,   nil,    89,   nil,   nil,   nil,   nil,    89,
    89,   nil,    89,   nil,    89,    89,    89,    89,    89,    89,
    89,    89,   174,    89,    89,    89,   nil,   nil,   nil,    90,
   nil,   174,   nil,   nil,   nil,   nil,   nil,    90,   nil,   nil,
   nil,   nil,    90,    90,   nil,    90,   nil,    90,    90,    90,
    90,    90,    90,    90,    90,    91,    90,    90,    90,   nil,
   nil,   174,   nil,   nil,    91,   nil,   nil,   nil,   nil,   174,
   nil,   nil,   nil,   nil,   174,   174,   nil,   174,   nil,   174,
   174,   174,   174,   174,   174,   174,   174,    92,   174,   174,
   174,   nil,   nil,   nil,    91,   nil,    92,   nil,   nil,   nil,
   nil,   nil,    91,   nil,   nil,   nil,   nil,    91,    91,   nil,
    91,   nil,    91,    91,    91,    91,    91,    91,    91,    91,
    21,    91,    91,    91,   nil,   nil,    92,   nil,   nil,    21,
   nil,   nil,   nil,   nil,    92,   nil,   nil,   nil,   nil,    92,
    92,   nil,    92,   nil,    92,    92,    92,    92,    92,    92,
    92,    92,   187,    92,    92,    92,   nil,   nil,   nil,    21,
   nil,   187,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,
    21,   nil,    21,    21,   nil,    21,    25,    21,    21,    21,
    21,    21,    21,    21,    21,   nil,    21,    21,    21,   nil,
   nil,   187,   nil,    82,   nil,   nil,   nil,   nil,   nil,   187,
   nil,   nil,    82,   nil,   187,   187,    25,   187,   nil,   187,
   187,   187,   187,   187,   187,   187,   187,   nil,   187,   187,
   187,   nil,    25,   nil,    25,    25,    25,    25,    25,    25,
    25,    25,    82,    25,    25,    25,   nil,   nil,   194,   nil,
    82,   nil,   nil,   nil,   nil,    82,    82,   194,    82,   nil,
    82,    82,    82,    82,    82,    82,    82,    82,   nil,    82,
    82,    82,   nil,   nil,    30,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    30,   nil,   nil,   nil,   194,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   194,   nil,   nil,   nil,   nil,
   194,   194,   nil,   194,   nil,   194,   194,   194,   194,   194,
   194,   194,   194,    30,   194,   194,   194,   nil,   nil,   196,
   nil,    30,   nil,   nil,   nil,   nil,    30,    30,   196,    30,
   nil,    30,    30,    30,    30,    30,    30,    30,    30,   nil,
    30,    30,    30,   nil,   nil,   198,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   198,   nil,   nil,   nil,   196,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   196,   nil,   nil,   nil,
   nil,   196,   196,   nil,   196,   nil,   196,   196,   196,   196,
   196,   196,   196,   196,   198,   196,   196,   196,   nil,   nil,
   nil,   nil,   198,   nil,   nil,   nil,   nil,   198,   198,   141,
   198,   nil,   198,   198,   198,   198,   198,   198,   198,   198,
   nil,   198,   198,   198,   nil,   141,   141,   nil,   141,   141,
   141,   nil,   nil,   nil,   nil,   141,   141,   141,   141,   141,
   141,   nil,   nil,   nil,   nil,   nil,   141,   141,   141,   130,
   130,   nil,   130,   130,   130,   nil,   nil,   nil,   nil,   130,
   130,   130,   130,   130,   130,   281,   281,   nil,   281,   281,
   281,   nil,   nil,   nil,   nil,   281,   281,   281,   281,   281,
   281 ]

racc_action_pointer = [
     5,    31,   nil,   nil,   nil,    44,   nil,    31,    84,    54,
    20,    68,    43,    79,   nil,   nil,   472,   nil,   104,   -18,
    60,  1384,    62,   nil,   -15,  1431,   nil,   nil,   nil,   nil,
  1528,   nil,   nil,   nil,   nil,   nil,    61,   nil,   nil,   109,
   nil,   112,   115,   116,   119,   nil,   nil,   nil,   nil,   nil,
    47,   nil,   nil,   nil,   nil,   nil,    69,   nil,   nil,   141,
   153,   120,   245,    59,   nil,   nil,   nil,   nil,   nil,   126,
   117,   nil,   541,   -27,   nil,   nil,   nil,    56,   108,  1124,
   nil,  1156,  1457,    11,    28,   nil,   150,   -41,  1189,  1221,
  1254,  1319,  1351,    97,   nil,   nil,   166,   174,   175,   nil,
   100,   nil,   nil,   nil,   nil,   169,    -6,   175,   146,   166,
   167,   nil,   165,   166,   168,   -29,   nil,   163,   745,   174,
   nil,   nil,   nil,   777,   nil,    53,   914,   nil,   954,   nil,
  1662,   188,   -12,   167,   -36,   nil,  1051,   nil,   nil,   nil,
   nil,  1638,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   191,   193,
   194,   195,   196,   199,   nil,   210,   226,    -4,   nil,   nil,
   nil,   nil,   215,   222,  1286,   nil,   190,   191,   nil,   nil,
   nil,   nil,   201,   235,   197,   198,   nil,  1416,   nil,   200,
   243,    -9,   245,    -8,  1502,   247,  1573,   -24,  1599,   110,
   155,   181,   226,   252,   243,   nil,   nil,   297,   331,   371,
   403,   -14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   257,
   256,   nil,   nil,   436,   252,   258,   nil,   108,   nil,   506,
   -33,   nil,   220,   575,   nil,   nil,   606,   262,   640,   671,
   239,   705,   nil,   nil,   nil,   237,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   265,   271,   nil,   244,   nil,   810,   nil,
    17,   nil,   nil,   842,   nil,   nil,   nil,   882,   271,   242,
   290,   nil,   nil,   nil,   nil,   263,   nil,   nil,   986,   288,
   nil,  1678,  1019,   290,   300,   nil,   262,   -31,   -25,  1084,
   nil,   nil,   nil,   nil,   301,   298,     4,   nil,   nil,   nil,
   nil,   nil,   -34,   nil ]

racc_action_default = [
  -172,  -172,    -1,    -2,    -3,    -5,   -20,  -172,  -172,  -172,
    -7,  -172,  -172,   -28,   -29,   -30,  -172,   -32,   -34,   -37,
  -161,  -172,  -127,  -128,  -131,  -172,  -133,  -134,  -135,  -136,
  -172,  -138,  -139,  -140,  -141,  -142,  -172,  -144,  -145,  -172,
  -147,  -172,  -172,  -172,  -172,  -157,  -158,  -159,  -160,  -162,
  -172,  -165,  -166,  -168,  -169,  -170,  -172,   304,    -4,  -172,
  -172,  -172,  -172,   -42,   -43,   -45,   -46,   -85,   -27,   -62,
  -172,   -31,  -172,  -172,   -36,  -161,  -162,  -172,  -172,  -172,
  -123,  -172,  -172,  -172,  -172,  -132,  -172,  -172,  -172,  -172,
  -172,  -172,  -172,  -172,  -164,  -171,  -172,  -172,    -6,   -11,
   -16,   -13,   -14,   -15,   -21,  -172,  -172,  -172,  -172,  -172,
  -172,   -50,   -52,   -54,   -55,  -172,   -41,   -64,  -172,   -39,
   -33,   -35,  -115,  -172,  -124,  -172,  -172,  -120,  -172,   -71,
  -172,  -172,  -161,   -88,  -172,   -90,  -172,   -93,   -94,   -95,
   -96,   -98,   -99,  -100,  -101,  -102,  -103,  -104,  -111,  -112,
  -113,  -114,  -125,  -126,  -129,  -130,  -137,  -143,  -172,  -172,
  -172,  -172,  -172,  -172,  -163,  -172,  -172,  -172,   -12,   -17,
   -18,   -22,  -172,   -25,  -172,   -47,  -172,  -172,   -51,   -53,
   -56,   -40,   -69,  -172,   -63,  -172,  -117,  -172,  -121,  -172,
  -172,  -172,  -113,  -172,  -172,  -172,  -172,  -172,  -172,  -172,
  -172,  -172,  -172,  -172,  -172,   -44,   -84,  -172,  -172,  -172,
  -172,  -161,   -92,  -146,  -148,  -149,  -150,  -151,  -152,  -172,
  -172,   -10,   -23,  -172,  -172,   -79,   -48,  -172,   -38,  -172,
  -172,  -116,  -172,  -172,   -19,   -97,  -172,  -172,  -172,  -172,
  -172,  -172,   -75,   -76,   -81,  -172,   -83,  -105,  -106,  -107,
  -108,  -109,  -110,  -172,  -155,   -91,   -89,  -122,  -172,    -8,
  -172,   -24,   -26,  -172,   -49,   -57,   -58,  -172,  -172,   -70,
   -65,   -67,   -68,  -118,  -119,  -172,   -74,   -80,  -172,  -172,
   -82,  -154,  -172,  -172,  -172,   -78,   -59,  -172,  -172,  -172,
   -73,   -77,  -156,  -153,  -172,  -172,   -61,   -87,   -66,   -72,
    -9,   -60,  -172,   -86 ]

racc_goto_table = [
    74,    19,   134,   172,   141,    62,   205,    99,    63,    19,
    78,   224,   127,   240,   242,   244,   253,   247,   248,   249,
   250,   251,   252,    86,    80,    17,   104,   266,   272,   271,
   295,   296,   270,    71,   256,   255,   212,    77,   125,    85,
   228,   184,   101,   141,   116,     2,     3,     4,     5,    10,
    58,   191,    98,   141,   121,   275,   276,   277,   168,   188,
   105,   141,    13,   119,    68,    19,    63,   283,   157,   171,
   205,   120,   154,   155,   152,   153,    69,   117,   279,   182,
   124,   159,   160,   161,   162,   163,   272,   298,     1,   206,
   264,   292,   265,   nil,   nil,   nil,   181,   290,   nil,   173,
   285,   nil,   nil,   nil,   175,   nil,   nil,   nil,   299,   nil,
   nil,   nil,   205,   221,   nil,   nil,   185,   nil,   nil,   189,
   261,   192,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   141,   141,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   101,   nil,
   nil,   nil,   269,   nil,   141,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   225,   nil,   nil,
   227,   nil,   226,    63,   nil,   nil,   nil,   nil,   nil,   nil,
   232,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   286,   nil,   141,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   254,   nil,   nil,   257,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   173,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   274,   nil,   nil,   nil,
   nil,   nil,    86,   nil,   225,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   254,   nil,   nil,   nil,   nil,   225,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   297,   nil,
   nil,   nil,   nil,   nil,   nil,   254,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   303 ]

racc_goto_check = [
    12,    19,    39,    18,    59,    15,    13,     9,    30,    19,
    65,    20,    67,    47,    49,    47,    80,    47,    47,    47,
    47,    47,    47,    19,    68,    23,    16,    38,    44,    43,
    40,    41,    42,    23,    53,    54,    55,    64,    66,    71,
    29,    39,    12,    59,    12,     2,     3,     4,     5,     6,
     7,    39,     8,    59,    12,    47,    49,    47,    11,    67,
    17,    59,    21,    15,    22,    19,    30,    80,    12,    16,
    13,    24,    65,    65,    19,    19,    26,    27,    20,    28,
    68,    19,    19,    19,    19,    19,    44,    43,     1,    32,
    36,    80,    37,   nil,   nil,   nil,    12,    47,   nil,    19,
    20,   nil,   nil,   nil,    30,   nil,   nil,   nil,    47,   nil,
   nil,   nil,    13,     9,   nil,   nil,    19,   nil,   nil,    19,
    18,    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    59,    59,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,
   nil,   nil,    39,   nil,    59,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,   nil,
    15,   nil,    30,    30,   nil,   nil,   nil,   nil,   nil,   nil,
    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    39,   nil,    59,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    19,   nil,   nil,    19,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,   nil,   nil,
   nil,   nil,    19,   nil,    19,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    19,   nil,   nil,   nil,   nil,    19,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,
   nil,   nil,   nil,   nil,   nil,    19,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    12 ]

racc_goto_pointer = [
   nil,    88,    45,    46,    47,    48,    44,    40,    -9,   -54,
   nil,   -42,   -19,  -125,   nil,    -7,   -36,    -2,  -103,    -7,
  -163,    54,    51,    17,    -1,   nil,    63,     8,   -38,  -142,
    -4,   nil,   -42,   nil,   nil,   nil,  -137,  -135,  -200,   -77,
  -257,  -256,  -198,  -201,  -202,   nil,   nil,  -181,   nil,  -181,
   nil,   nil,   nil,  -175,  -173,  -100,   nil,   nil,   nil,   -75,
   nil,   nil,   nil,   nil,    16,   -11,   -40,   -66,     3,   nil,
   nil,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  -191,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   190,   nil,   nil,   nil,   nil,
   100,   nil,    37,   129,     6,   nil,   nil,   nil,   nil,   150,
   nil,   nil,   nil,   nil,    15,    18,   nil,   nil,   nil,   nil,
    38,    64,   243,    65,    66,   110,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    28,   149,   143,   130,   144,   nil,
   145,   146,   147,   133,   135,   137,   138,   139,   140,    52,
   142,   148,   151,    23,   nil,    22,   nil,   nil,   nil,    24,
    25,    26,    27,    29,    31,    32,    33,    34,    36,    40,
   nil,    51,    55 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 77, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  3, 79, :_reduce_4,
  0, 82, :_reduce_none,
  3, 82, :_reduce_6,
  0, 83, :_reduce_none,
  5, 83, :_reduce_8,
  8, 83, :_reduce_9,
  3, 84, :_reduce_10,
  1, 84, :_reduce_none,
  2, 85, :_reduce_12,
  1, 86, :_reduce_none,
  1, 86, :_reduce_14,
  1, 86, :_reduce_15,
  0, 87, :_reduce_16,
  1, 87, :_reduce_17,
  1, 87, :_reduce_18,
  3, 89, :_reduce_19,
  1, 81, :_reduce_none,
  4, 80, :_reduce_21,
  5, 80, :_reduce_22,
  3, 93, :_reduce_23,
  3, 94, :_reduce_24,
  1, 94, :_reduce_none,
  4, 92, :_reduce_26,
  3, 90, :_reduce_27,
  2, 90, :_reduce_28,
  1, 99, :_reduce_29,
  1, 99, :_reduce_30,
  2, 97, :_reduce_31,
  1, 97, :_reduce_32,
  3, 100, :_reduce_33,
  1, 100, :_reduce_none,
  3, 101, :_reduce_35,
  2, 101, :_reduce_36,
  1, 101, :_reduce_none,
  4, 98, :_reduce_38,
  2, 102, :_reduce_39,
  3, 91, :_reduce_40,
  2, 91, :_reduce_41,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 108, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  3, 109, :_reduce_47,
  4, 109, :_reduce_48,
  5, 110, :_reduce_49,
  1, 111, :_reduce_50,
  2, 111, :_reduce_51,
  1, 111, :_reduce_52,
  2, 111, :_reduce_53,
  1, 111, :_reduce_54,
  1, 111, :_reduce_55,
  2, 111, :_reduce_56,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  2, 113, :_reduce_59,
  4, 114, :_reduce_60,
  1, 116, :_reduce_none,
  0, 103, :_reduce_none,
  2, 103, :_reduce_63,
  0, 104, :_reduce_none,
  3, 104, :_reduce_65,
  3, 118, :_reduce_66,
  1, 118, :_reduce_none,
  1, 119, :_reduce_none,
  0, 105, :_reduce_none,
  2, 105, :_reduce_70,
  1, 121, :_reduce_none,
  6, 122, :_reduce_72,
  5, 122, :_reduce_73,
  4, 124, :_reduce_74,
  3, 124, :_reduce_75,
  1, 125, :_reduce_none,
  3, 125, :_reduce_77,
  3, 96, :_reduce_78,
  1, 96, :_reduce_none,
  4, 126, :_reduce_80,
  3, 126, :_reduce_81,
  4, 127, :_reduce_82,
  3, 127, :_reduce_83,
  2, 128, :_reduce_84,
  1, 106, :_reduce_85,
  3, 117, :_reduce_86,
  1, 117, :_reduce_none,
  1, 115, :_reduce_none,
  3, 115, :_reduce_89,
  1, 129, :_reduce_none,
  3, 129, :_reduce_91,
  2, 130, :_reduce_92,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 131, :_reduce_none,
  1, 133, :_reduce_none,
  3, 133, :_reduce_97,
  1, 133, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  3, 136, :_reduce_105,
  3, 136, :_reduce_106,
  3, 136, :_reduce_107,
  3, 136, :_reduce_108,
  3, 136, :_reduce_109,
  3, 136, :_reduce_110,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  3, 139, :_reduce_115,
  5, 139, :_reduce_116,
  4, 139, :_reduce_117,
  6, 139, :_reduce_118,
  4, 143, :_reduce_119,
  1, 142, :_reduce_120,
  2, 142, :_reduce_121,
  4, 144, :_reduce_122,
  1, 140, :_reduce_123,
  2, 140, :_reduce_124,
  3, 95, :_reduce_125,
  3, 95, :_reduce_126,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  3, 141, :_reduce_129,
  3, 141, :_reduce_130,
  1, 141, :_reduce_none,
  2, 145, :_reduce_132,
  1, 145, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  3, 147, :_reduce_137,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 151, :_reduce_142,
  3, 120, :_reduce_143,
  1, 120, :_reduce_none,
  1, 154, :_reduce_none,
  4, 149, :_reduce_146,
  1, 149, :_reduce_none,
  4, 155, :_reduce_148,
  4, 155, :_reduce_149,
  4, 155, :_reduce_150,
  4, 155, :_reduce_151,
  4, 155, :_reduce_152,
  4, 138, :_reduce_153,
  4, 132, :_reduce_154,
  1, 156, :_reduce_none,
  3, 156, :_reduce_156,
  1, 152, :_reduce_157,
  1, 152, :_reduce_158,
  1, 146, :_reduce_159,
  1, 146, :_reduce_160,
  1, 88, :_reduce_161,
  1, 88, :_reduce_162,
  3, 153, :_reduce_163,
  2, 153, :_reduce_164,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_167,
  1, 135, :_reduce_168,
  1, 135, :_reduce_169,
  1, 157, :_reduce_none,
  2, 158, :_reduce_171 ]

racc_reduce_n = 172

racc_shift_n = 304

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :FETCH => 4,
  :FIRST => 5,
  :unsigned_integer => 6,
  :ROWS => 7,
  :ONLY => 8,
  :OFFSET => 9,
  :NEXT => 10,
  :comma => 11,
  :built_in_function => 12,
  :ASC => 13,
  :DESC => 14,
  :left_paren => 15,
  :right_paren => 16,
  :INSERT => 17,
  :INTO => 18,
  :VALUES => 19,
  :SELECT => 20,
  :asterisk => 21,
  :DISTINCT => 22,
  :AS => 23,
  :FROM => 24,
  :CROSS => 25,
  :JOIN => 26,
  :INNER => 27,
  :LEFT => 28,
  :OUTER => 29,
  :RIGHT => 30,
  :FULL => 31,
  :ON => 32,
  :USING => 33,
  :WHERE => 34,
  :GROUP => 35,
  :HAVING => 36,
  :NOT => 37,
  :BETWEEN => 38,
  :AND => 39,
  :IN => 40,
  :LIKE => 41,
  :IS => 42,
  :NULL => 43,
  :EXISTS => 44,
  :identifier => 45,
  :OR => 46,
  :equals_operator => 47,
  :not_equals_operator => 48,
  :less_than_operator => 49,
  :greater_than_operator => 50,
  :less_than_or_equals_operator => 51,
  :greater_than_or_equals_operator => 52,
  :CASE => 53,
  :END => 54,
  :ELSE => 55,
  :WHEN => 56,
  :THEN => 57,
  :plus_sign => 58,
  :minus_sign => 59,
  :solidus => 60,
  :CURRENT_USER => 61,
  :period => 62,
  :COUNT => 63,
  :AVG => 64,
  :MAX => 65,
  :MIN => 66,
  :SUM => 67,
  :unsigned_float => 68,
  :variable => 69,
  :quote => 70,
  :character_string_literal => 71,
  :true_literal => 72,
  :false_literal => 73,
  :DATE => 74,
  :date_string => 75 }

racc_nt_base = 76

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "FETCH",
  "FIRST",
  "unsigned_integer",
  "ROWS",
  "ONLY",
  "OFFSET",
  "NEXT",
  "comma",
  "built_in_function",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "asterisk",
  "DISTINCT",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "CASE",
  "END",
  "ELSE",
  "WHEN",
  "THEN",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "unsigned_float",
  "variable",
  "quote",
  "character_string_literal",
  "true_literal",
  "false_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "fetch_only_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_name",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "distinct_select_list",
  "table_expression",
  "select_list",
  "select_sublist",
  "derived_column",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "column_reference",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_function",
  "boolean_primary",
  "predicate",
  "boolean_literal",
  "comparison_predicate",
  "row_value_constructor_element",
  "general_function",
  "case_expression",
  "when_expressions",
  "term",
  "when_value_expressions",
  "when_value_expression",
  "when_expression",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "general_literal",
  "qualifier",
  "general_set_function",
  "argument_list",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1], val[2])
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2])
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 22)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(0, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_9(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(val[1], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 26)
  def _reduce_10(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 11 omitted

module_eval(<<'.,.,', 'parser.racc', 30)
  def _reduce_12(val, _values, result)
     result = val[1].new(val[0])
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.racc', 34)
  def _reduce_14(val, _values, result)
     result = SQLParser::Statement::BuiltInFunction.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 35)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::Ascending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Ascending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Descending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1])
    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_24(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 25 omitted

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_27(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::All.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::Distinct.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 74)
  def _reduce_32(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_33(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 34 omitted

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1])
    result
  end
.,.,

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_38(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_39(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_40(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_41(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1])
    result
  end
.,.,

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_49(val, _values, result)
     result = val[1].new(val[0], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 112)
  def _reduce_50(val, _values, result)
     result = SQLParser::Statement::InnerJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 113)
  def _reduce_51(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::LeftJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_53(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_54(val, _values, result)
     result = SQLParser::Statement::RightJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::FullJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin
    result
  end
.,.,

# reduce 57 omitted

# reduce 58 omitted

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::On.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2])
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

module_eval(<<'.,.,', 'parser.racc', 135)
  def _reduce_63(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1])
    result
  end
.,.,

# reduce 64 omitted

module_eval(<<'.,.,', 'parser.racc', 139)
  def _reduce_65(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_66(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 150)
  def _reduce_70(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1])
    result
  end
.,.,

# reduce 71 omitted

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_72(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_73(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_74(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_75(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2])
    result
  end
.,.,

# reduce 76 omitted

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_77(val, _values, result)
     result = SQLParser::Statement::InValueList.new(Array(val[1]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 169)
  def _reduce_78(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 79 omitted

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 180)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_84(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_86(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 87 omitted

# reduce 88 omitted

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_89(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2])
    result
  end
.,.,

# reduce 90 omitted

module_eval(<<'.,.,', 'parser.racc', 202)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 205)
  def _reduce_92(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1])
    result
  end
.,.,

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

module_eval(<<'.,.,', 'parser.racc', 215)
  def _reduce_97(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_105(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 229)
  def _reduce_106(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_107(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_108(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_109(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 233)
  def _reduce_110(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2])
    result
  end
.,.,

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_115(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(nil,val[1], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_116(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(nil,val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_117(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(val[1], val[2], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_118(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(val[1], val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 252)
  def _reduce_119(val, _values, result)
     result = SQLParser::Statement::WhenClause.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_120(val, _values, result)
     result = [ val[0] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_121(val, _values, result)
     result = [ *val[0], val[1] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_122(val, _values, result)
     result = SQLParser::Statement::WhenClause.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_123(val, _values, result)
     result = [ val[0] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_124(val, _values, result)
     result = [ *val[0], val[1] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_125(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_126(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2])
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_129(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_130(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2])
    result
  end
.,.,

# reduce 131 omitted

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_132(val, _values, result)
     result = val[0].new(val[1])
    result
  end
.,.,

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_137(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_142(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 298)
  def _reduce_143(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2])
    result
  end
.,.,

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_146(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new)
    result
  end
.,.,

# reduce 147 omitted

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_148(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_149(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_150(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_151(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_152(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 317)
  def _reduce_153(val, _values, result)
     result = SQLParser::Statement::FunctionCall.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_154(val, _values, result)
     result = SQLParser::Statement::BooleanFunction.new(val[0], val[2])
    result
  end
.,.,

# reduce 155 omitted

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_156(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_157(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_158(val, _values, result)
    result = SQLParser::Statement::Float.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_159(val, _values, result)
     result = SQLParser::Statement::UnaryPlus
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 333)
  def _reduce_160(val, _values, result)
     result = SQLParser::Statement::UnaryMinus
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 337)
  def _reduce_161(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 338)
  def _reduce_162(val, _values, result)
     result = SQLParser::Statement::Variable.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 342)
  def _reduce_163(val, _values, result)
     result = SQLParser::Statement::String.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 343)
  def _reduce_164(val, _values, result)
     result = SQLParser::Statement::String.new('')
    result
  end
.,.,

# reduce 165 omitted

# reduce 166 omitted

module_eval(<<'.,.,', 'parser.racc', 346)
  def _reduce_167(val, _values, result)
     result = SQLParser::Statement::Variable.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 349)
  def _reduce_168(val, _values, result)
     result = SQLParser::Statement::True.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 350)
  def _reduce_169(val, _values, result)
     result = SQLParser::Statement::False.new
    result
  end
.,.,

# reduce 170 omitted

module_eval(<<'.,.,', 'parser.racc', 356)
  def _reduce_171(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module SQLParser
