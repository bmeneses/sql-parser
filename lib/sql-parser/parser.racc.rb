#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.16
# from Racc grammar file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 378)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    56,   279,   223,    99,   119,   257,   119,    75,    82,    41,
   118,    91,   118,   225,     9,   266,    10,   291,    11,    12,
   262,   267,    12,   226,    56,    76,   296,    78,    79,    84,
    80,    81,    84,    41,   135,   258,    70,   259,   260,   225,
   100,    71,   298,    31,   140,   141,    95,    84,    56,    84,
    32,   -92,   -92,   187,   188,    58,    59,    41,    46,   299,
    50,    52,    53,    54,    55,    57,    60,    31,    63,    64,
    65,    67,    97,    98,    32,   202,   203,   144,    75,    58,
    59,   300,    46,   224,    50,    52,    53,    54,    55,    57,
    60,    31,    63,    64,    65,    67,    76,   302,    78,    79,
   225,    80,    81,    58,    59,    84,    46,   225,    50,    52,
    53,    54,    55,    57,    60,    56,    63,    64,    65,    67,
   110,   109,  -172,   307,    41,  -172,   308,   310,   312,   313,
   314,   315,    31,   318,    84,   176,    13,    15,    16,    56,
  -172,  -172,    22,  -172,  -172,  -172,    23,    68,    41,    72,
  -172,  -172,  -172,  -172,  -172,    22,    22,    88,    31,    90,
  -172,  -172,  -172,    56,   -92,    32,   103,   104,   105,   106,
    58,    59,    41,    46,   107,    50,    52,    53,    54,    55,
    57,    60,    31,    63,    64,    65,    67,    56,   108,    32,
   111,   112,   113,    84,    58,    59,    41,    46,    22,    50,
    52,    53,    54,    55,    57,    60,    31,    63,    64,    65,
    67,    56,   128,    32,   129,   130,   131,   132,    58,    59,
   243,    46,    84,    50,    52,    53,    54,    55,    57,    60,
    31,    63,    64,    65,    67,    56,   135,    32,    22,    84,
   144,   174,    58,    59,   243,    46,    84,    50,    52,    53,
    54,    55,    57,    60,   227,    63,    64,    65,    67,    56,
   182,    32,   183,   184,   185,   123,    58,    59,    41,    46,
   192,    50,    52,    53,    54,    55,    57,    60,   227,    63,
    64,    65,    67,    56,   135,    32,   194,   195,    22,    22,
    58,    59,    41,    46,   200,    50,    52,    53,    54,    55,
    57,    60,    31,    63,    64,    65,    67,    56,   220,    32,
   224,   229,   230,   231,    58,    59,    41,    46,   232,    50,
    52,    53,    54,    55,    57,    60,    31,    63,    64,    65,
    67,    56,   233,    32,   234,   235,   236,   238,    58,    59,
    41,    46,   239,    50,    52,    53,    54,    55,    57,    60,
    31,    63,    64,    65,    67,    56,    84,   225,   251,   252,
   253,   255,   256,   174,    41,    46,   262,    50,    52,    53,
    54,    55,    57,    60,    31,    63,    64,    65,    67,    12,
   280,    32,   281,   283,   284,   286,    58,    59,    31,    46,
   nil,    50,    52,    53,    54,    55,    57,    60,    31,    63,
    64,    65,    67,   nil,   nil,    32,   nil,   nil,   nil,   nil,
    58,    59,    75,    46,   nil,    50,    52,    53,    54,    55,
    57,    60,    56,    63,    64,    65,    67,   nil,   nil,  -160,
    76,    41,    78,    79,   nil,    80,    81,   248,   249,   nil,
   nil,   nil,    25,    27,   nil,   nil,    56,  -160,  -160,   nil,
  -160,  -160,  -160,   nil,   nil,    41,   nil,  -160,  -160,  -160,
  -160,  -160,   nil,   nil,   nil,    31,   nil,   nil,   nil,   nil,
    56,   nil,    32,   nil,   nil,   nil,   nil,    58,    59,    41,
    46,   nil,    50,    52,    53,    54,    55,    57,    60,    31,
    63,    64,    65,    67,    56,   nil,   nil,   nil,   nil,   nil,
   nil,    58,    59,    41,    46,   nil,    50,    52,    53,    54,
    55,    57,    60,    31,    63,    64,    65,    67,   nil,   nil,
    32,   nil,   nil,   nil,   nil,    58,    59,   nil,    46,   nil,
    50,    52,    53,    54,    55,    57,    60,    31,    63,    64,
    65,    67,    56,   nil,    32,   nil,   nil,   nil,   nil,    58,
    59,   146,    46,   nil,    50,    52,    53,    54,    55,    57,
    60,   nil,    63,    64,    65,    67,    56,   nil,   nil,   nil,
    75,   nil,   nil,   nil,   nil,   243,   nil,   154,   nil,    74,
   nil,   nil,   nil,   nil,   149,   150,   nil,   nil,    76,   nil,
    78,    79,    32,    80,    81,   nil,   nil,    58,    59,   nil,
    46,   nil,    50,    52,    53,    54,    55,    57,    60,   227,
    63,    64,    65,    67,   nil,   nil,    32,   nil,   nil,   nil,
   nil,    58,    59,   nil,    46,   nil,    50,    52,    53,    54,
    55,    57,    60,    56,    63,    64,    65,    67,   nil,   nil,
   214,   nil,    41,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    25,   nil,   nil,   nil,    56,   209,   210,
   nil,   211,   212,   213,   nil,   nil,   243,   nil,   215,   216,
   217,   218,   219,   nil,   nil,   nil,    31,   nil,   nil,   nil,
   nil,    56,   nil,    32,   nil,   nil,   nil,   nil,    58,    59,
    41,    46,   nil,    50,    52,    53,    54,    55,    57,    60,
   227,    63,    64,    65,    67,    56,   nil,    32,   nil,   nil,
   nil,   nil,    58,    59,   243,    46,   nil,    50,    52,    53,
    54,    55,    57,    60,    31,    63,    64,    65,    67,    56,
   nil,    32,   nil,   nil,   nil,   nil,    58,    59,   243,    46,
   nil,    50,    52,    53,    54,    55,    57,    60,   227,    63,
    64,    65,    67,    56,   nil,    32,   nil,   nil,   nil,   nil,
    58,    59,   243,    46,   nil,    50,    52,    53,    54,    55,
    57,    60,   227,    63,    64,    65,    67,    56,   nil,    32,
   nil,   nil,   nil,   nil,    58,    59,   243,    46,   nil,    50,
    52,    53,    54,    55,    57,    60,   227,    63,    64,    65,
    67,    56,   nil,    32,   nil,   nil,   nil,   nil,    58,    59,
   243,    46,   nil,    50,    52,    53,    54,    55,    57,    60,
   227,    63,    64,    65,    67,    56,   nil,    32,   nil,   nil,
   nil,   nil,    58,    59,   243,    46,   nil,    50,    52,    53,
    54,    55,    57,    60,   227,    63,    64,    65,    67,    56,
   nil,    32,   nil,   nil,   nil,   nil,    58,    59,    41,    46,
   nil,    50,    52,    53,    54,    55,    57,    60,   227,    63,
    64,    65,    67,    56,   nil,    32,   nil,   nil,   nil,   nil,
    58,    59,    41,    46,   nil,    50,    52,    53,    54,    55,
    57,    60,    31,    63,    64,    65,    67,   nil,   nil,    32,
   nil,   nil,   nil,   nil,    58,    59,   nil,    46,   nil,    50,
    52,    53,    54,    55,    57,    60,    31,    63,    64,    65,
    67,    56,   nil,    32,   nil,   nil,   nil,   nil,    58,    59,
   146,    46,   nil,    50,    52,    53,    54,    55,    57,    60,
   nil,    63,    64,    65,    67,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    56,   nil,   nil,   154,   nil,   nil,   nil,
   nil,   nil,   146,   149,   150,   nil,   nil,   nil,   nil,   nil,
   nil,    32,   nil,   nil,   nil,   nil,    58,    59,   nil,    46,
   nil,    50,    52,    53,    54,    55,    57,    60,   154,    63,
    64,    65,    67,    56,   nil,   149,   150,   nil,   nil,   nil,
   nil,   nil,    41,    32,   nil,   nil,   nil,   nil,    58,    59,
   nil,    46,   nil,    50,    52,    53,    54,    55,    57,    60,
   nil,    63,    64,    65,    67,    56,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   146,   nil,    31,   nil,   nil,   nil,
   nil,   nil,   nil,    32,    12,   nil,   nil,   nil,    58,    59,
   nil,    46,   nil,    50,    52,    53,    54,    55,    57,    60,
   154,    63,    64,    65,    67,    56,   nil,   149,   150,   nil,
   nil,   nil,   nil,   nil,    41,    32,   nil,   nil,   nil,   nil,
    58,    59,   nil,    46,   nil,    50,    52,    53,    54,    55,
    57,    60,   nil,    63,    64,    65,    67,    56,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   243,   nil,    31,   nil,
   nil,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,
    58,    59,   nil,    46,   nil,    50,    52,    53,    54,    55,
    57,    60,    56,    63,    64,    65,    67,   nil,   nil,   nil,
   227,   146,   nil,   nil,   nil,   nil,   nil,    32,   nil,   nil,
   nil,   nil,    58,    59,   nil,    46,   nil,    50,    52,    53,
    54,    55,    57,    60,    56,    63,    64,    65,    67,   nil,
   nil,   nil,   nil,    41,   149,   227,   nil,   nil,   nil,   nil,
   nil,   nil,    32,   nil,   nil,   nil,   nil,    58,    59,   nil,
    46,   nil,    50,    52,    53,    54,    55,    57,    60,    56,
    63,    64,    65,    67,   nil,   nil,   nil,    31,    41,   nil,
   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,    58,
    59,   nil,    46,   nil,    50,    52,    53,    54,    55,    57,
    60,    56,    63,    64,    65,    67,   nil,   nil,   nil,   nil,
    41,   nil,    31,   nil,   nil,   nil,   nil,   nil,   nil,    32,
    12,   nil,   nil,   nil,    58,    59,   nil,    46,   nil,    50,
    52,    53,    54,    55,    57,    60,   nil,    63,    64,    65,
    67,    56,   nil,   nil,    31,   nil,   nil,   nil,   nil,   nil,
   146,    32,   nil,   nil,   nil,   nil,    58,    59,   nil,    46,
   nil,    50,    52,    53,    54,    55,    57,    60,   nil,    63,
    64,    65,    67,    56,   nil,   nil,   154,   nil,   nil,   nil,
   nil,   nil,    41,   149,   150,   nil,   nil,   nil,   nil,   nil,
   nil,    32,   nil,   nil,   nil,   nil,    58,    59,   nil,    46,
   nil,    50,    52,    53,    54,    55,    57,    60,   nil,    63,
    64,    65,    67,    56,   nil,   nil,    31,   nil,   nil,   nil,
   nil,   nil,   146,    32,   nil,   nil,   nil,   nil,    58,    59,
   nil,    46,   nil,    50,    52,    53,    54,    55,    57,    60,
   nil,    63,    64,    65,    67,    56,   nil,   nil,   154,   nil,
   nil,   nil,   nil,   nil,    41,   149,   150,   nil,   nil,   nil,
   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,    58,    59,
   nil,    46,   nil,    50,    52,    53,    54,    55,    57,    60,
   nil,    63,    64,    65,    67,    56,   nil,   nil,    31,   nil,
   nil,   nil,   nil,   nil,   146,   nil,   nil,   nil,    95,   nil,
    58,    59,   nil,    46,   nil,    50,    52,    53,    54,    55,
    57,    60,   nil,    63,    64,    65,    67,    56,   nil,   nil,
   154,   nil,   nil,   nil,   nil,   nil,    41,   149,   150,   nil,
   nil,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,
    58,    59,   nil,    46,   nil,    50,    52,    53,    54,    55,
    57,    60,    56,    63,    64,    65,    67,   nil,   nil,   nil,
    31,   243,   nil,   nil,   nil,   nil,   nil,    32,   nil,   nil,
   nil,   nil,    58,    59,   nil,    46,   nil,    50,    52,    53,
    54,    55,    57,    60,    56,    63,    64,    65,    67,   nil,
   nil,   nil,   nil,    41,   nil,   227,   nil,   nil,   nil,   nil,
   nil,   nil,    32,   nil,   nil,   nil,   nil,    58,    59,   nil,
    46,   nil,    50,    52,    53,    54,    55,    57,    60,    56,
    63,    64,    65,    67,   nil,   nil,   nil,    31,   243,   nil,
   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,    58,
    59,   nil,    46,   nil,    50,    52,    53,    54,    55,    57,
    60,   nil,    63,    64,    65,    67,   nil,   nil,   nil,   nil,
   nil,   nil,   227,   nil,   nil,   nil,   nil,   nil,   nil,    32,
   nil,   nil,   nil,   nil,    58,    59,   nil,    46,   nil,    50,
    52,    53,    54,    55,    57,    60,   nil,    63,    64,    65,
    67,    75,   nil,   nil,   nil,   122,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   123,   nil,   nil,   nil,   nil,    76,
   nil,    78,    79,   nil,    80,    81 ]

racc_action_check = [
   262,   227,   150,    35,    72,   207,   185,    85,    18,   262,
    72,    30,   185,   152,     0,   213,     0,   254,     0,   262,
   259,   213,     0,   152,   144,    85,   261,    85,    85,    18,
    85,    85,    30,   144,    85,   209,    14,   209,   209,   207,
    35,    14,   266,   262,    93,    93,    93,    72,   100,   185,
   262,   227,   150,   116,   116,   262,   262,   100,   262,   274,
   262,   262,   262,   262,   262,   262,   262,   144,   262,   262,
   262,   262,    33,    33,   144,   143,   143,   143,   137,   144,
   144,   275,   144,   277,   144,   144,   144,   144,   144,   144,
   144,   100,   144,   144,   144,   144,   137,   281,   137,   137,
   285,   137,   137,   100,   100,   286,   100,   287,   100,   100,
   100,   100,   100,   100,   100,   104,   100,   100,   100,   100,
    60,    60,   159,   288,   104,   159,   293,   297,   301,   302,
   304,   305,   307,   313,   315,   104,     1,     7,     9,   105,
   159,   159,    10,   159,   159,   159,    11,    13,   105,    15,
   159,   159,   159,   159,   159,    16,    23,    24,   104,    29,
   159,   159,   159,   192,    31,   104,    47,    50,    52,    53,
   104,   104,   192,   104,    54,   104,   104,   104,   104,   104,
   104,   104,   105,   104,   104,   104,   104,   106,    55,   105,
    67,    70,    71,    74,   105,   105,   106,   105,    75,   105,
   105,   105,   105,   105,   105,   105,   192,   105,   105,   105,
   105,   195,    76,   192,    77,    79,    80,    81,   192,   192,
   195,   192,    82,   192,   192,   192,   192,   192,   192,   192,
   106,   192,   192,   192,   192,   308,    87,   106,    88,    91,
    94,   102,   106,   106,   308,   106,   103,   106,   106,   106,
   106,   106,   106,   106,   195,   106,   106,   106,   106,   107,
   109,   195,   112,   113,   114,   121,   195,   195,   107,   195,
   123,   195,   195,   195,   195,   195,   195,   195,   308,   195,
   195,   195,   195,   108,   124,   308,   125,   126,   128,   129,
   308,   308,   108,   308,   136,   308,   308,   308,   308,   308,
   308,   308,   107,   308,   308,   308,   308,    36,   149,   107,
   151,   176,   177,   178,   107,   107,    36,   107,   179,   107,
   107,   107,   107,   107,   107,   107,   108,   107,   107,   107,
   107,    41,   180,   108,   181,   183,   184,   190,   108,   108,
    41,   108,   191,   108,   108,   108,   108,   108,   108,   108,
    36,   108,   108,   108,   108,   203,   194,   198,   199,   200,
   201,   205,   206,   208,   203,    36,   211,    36,    36,    36,
    36,    36,    36,    36,    41,    36,    36,    36,    36,   220,
   235,    41,   236,   240,   241,   249,    41,    41,   252,    41,
   nil,    41,    41,    41,    41,    41,    41,    41,   203,    41,
    41,    41,    41,   nil,   nil,   203,   nil,   nil,   nil,   nil,
   203,   203,   197,   203,   nil,   203,   203,   203,   203,   203,
   203,   203,    12,   203,   203,   203,   203,   nil,   nil,   299,
   197,    12,   197,   197,   nil,   197,   197,   197,   197,   nil,
   nil,   nil,    12,    12,   nil,   nil,    99,   299,   299,   nil,
   299,   299,   299,   nil,   nil,    99,   nil,   299,   299,   299,
   299,   299,   nil,   nil,   nil,    12,   nil,   nil,   nil,   nil,
    98,   nil,    12,   nil,   nil,   nil,   nil,    12,    12,    98,
    12,   nil,    12,    12,    12,    12,    12,    12,    12,    99,
    12,    12,    12,    12,    97,   nil,   nil,   nil,   nil,   nil,
   nil,    99,    99,    97,    99,   nil,    99,    99,    99,    99,
    99,    99,    99,    98,    99,    99,    99,    99,   nil,   nil,
    98,   nil,   nil,   nil,   nil,    98,    98,   nil,    98,   nil,
    98,    98,    98,    98,    98,    98,    98,    97,    98,    98,
    98,    98,    95,   nil,    97,   nil,   nil,   nil,   nil,    97,
    97,    95,    97,   nil,    97,    97,    97,    97,    97,    97,
    97,   nil,    97,    97,    97,    97,   210,   nil,   nil,   nil,
    17,   nil,   nil,   nil,   nil,   210,   nil,    95,   nil,    17,
   nil,   nil,   nil,   nil,    95,    95,   nil,   nil,    17,   nil,
    17,    17,    95,    17,    17,   nil,   nil,    95,    95,   nil,
    95,   nil,    95,    95,    95,    95,    95,    95,    95,   210,
    95,    95,    95,    95,   nil,   nil,   210,   nil,   nil,   nil,
   nil,   210,   210,   nil,   210,   nil,   210,   210,   210,   210,
   210,   210,   210,    27,   210,   210,   210,   210,   nil,   nil,
   148,   nil,    27,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    27,   nil,   nil,   nil,   212,   148,   148,
   nil,   148,   148,   148,   nil,   nil,   212,   nil,   148,   148,
   148,   148,   148,   nil,   nil,   nil,    27,   nil,   nil,   nil,
   nil,   300,   nil,    27,   nil,   nil,   nil,   nil,    27,    27,
   300,    27,   nil,    27,    27,    27,    27,    27,    27,    27,
   212,    27,    27,    27,    27,   214,   nil,   212,   nil,   nil,
   nil,   nil,   212,   212,   214,   212,   nil,   212,   212,   212,
   212,   212,   212,   212,   300,   212,   212,   212,   212,   215,
   nil,   300,   nil,   nil,   nil,   nil,   300,   300,   215,   300,
   nil,   300,   300,   300,   300,   300,   300,   300,   214,   300,
   300,   300,   300,   216,   nil,   214,   nil,   nil,   nil,   nil,
   214,   214,   216,   214,   nil,   214,   214,   214,   214,   214,
   214,   214,   215,   214,   214,   214,   214,   217,   nil,   215,
   nil,   nil,   nil,   nil,   215,   215,   217,   215,   nil,   215,
   215,   215,   215,   215,   215,   215,   216,   215,   215,   215,
   215,   218,   nil,   216,   nil,   nil,   nil,   nil,   216,   216,
   218,   216,   nil,   216,   216,   216,   216,   216,   216,   216,
   217,   216,   216,   216,   216,   219,   nil,   217,   nil,   nil,
   nil,   nil,   217,   217,   219,   217,   nil,   217,   217,   217,
   217,   217,   217,   217,   218,   217,   217,   217,   217,   122,
   nil,   218,   nil,   nil,   nil,   nil,   218,   218,   122,   218,
   nil,   218,   218,   218,   218,   218,   218,   218,   219,   218,
   218,   218,   218,   223,   nil,   219,   nil,   nil,   nil,   nil,
   219,   219,   223,   219,   nil,   219,   219,   219,   219,   219,
   219,   219,   122,   219,   219,   219,   219,   nil,   nil,   122,
   nil,   nil,   nil,   nil,   122,   122,   nil,   122,   nil,   122,
   122,   122,   122,   122,   122,   122,   223,   122,   122,   122,
   122,   224,   nil,   223,   nil,   nil,   nil,   nil,   223,   223,
   224,   223,   nil,   223,   223,   223,   223,   223,   223,   223,
   nil,   223,   223,   223,   223,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   225,   nil,   nil,   224,   nil,   nil,   nil,
   nil,   nil,   225,   224,   224,   nil,   nil,   nil,   nil,   nil,
   nil,   224,   nil,   nil,   nil,   nil,   224,   224,   nil,   224,
   nil,   224,   224,   224,   224,   224,   224,   224,   225,   224,
   224,   224,   224,   226,   nil,   225,   225,   nil,   nil,   nil,
   nil,   nil,   226,   225,   nil,   nil,   nil,   nil,   225,   225,
   nil,   225,   nil,   225,   225,   225,   225,   225,   225,   225,
   nil,   225,   225,   225,   225,   146,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   146,   nil,   226,   nil,   nil,   nil,
   nil,   nil,   nil,   226,   146,   nil,   nil,   nil,   226,   226,
   nil,   226,   nil,   226,   226,   226,   226,   226,   226,   226,
   146,   226,   226,   226,   226,   141,   nil,   146,   146,   nil,
   nil,   nil,   nil,   nil,   141,   146,   nil,   nil,   nil,   nil,
   146,   146,   nil,   146,   nil,   146,   146,   146,   146,   146,
   146,   146,   nil,   146,   146,   146,   146,   296,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   296,   nil,   141,   nil,
   nil,   nil,   nil,   nil,   nil,   141,   nil,   nil,   nil,   nil,
   141,   141,   nil,   141,   nil,   141,   141,   141,   141,   141,
   141,   141,   154,   141,   141,   141,   141,   nil,   nil,   nil,
   296,   154,   nil,   nil,   nil,   nil,   nil,   296,   nil,   nil,
   nil,   nil,   296,   296,   nil,   296,   nil,   296,   296,   296,
   296,   296,   296,   296,   239,   296,   296,   296,   296,   nil,
   nil,   nil,   nil,   239,   154,   154,   nil,   nil,   nil,   nil,
   nil,   nil,   154,   nil,   nil,   nil,   nil,   154,   154,   nil,
   154,   nil,   154,   154,   154,   154,   154,   154,   154,   284,
   154,   154,   154,   154,   nil,   nil,   nil,   239,   284,   nil,
   nil,   nil,   nil,   nil,   239,   nil,   nil,   nil,   nil,   239,
   239,   nil,   239,   nil,   239,   239,   239,   239,   239,   239,
   239,   243,   239,   239,   239,   239,   nil,   nil,   nil,   nil,
   243,   nil,   284,   nil,   nil,   nil,   nil,   nil,   nil,   284,
   243,   nil,   nil,   nil,   284,   284,   nil,   284,   nil,   284,
   284,   284,   284,   284,   284,   284,   nil,   284,   284,   284,
   284,   248,   nil,   nil,   243,   nil,   nil,   nil,   nil,   nil,
   248,   243,   nil,   nil,   nil,   nil,   243,   243,   nil,   243,
   nil,   243,   243,   243,   243,   243,   243,   243,   nil,   243,
   243,   243,   243,   279,   nil,   nil,   248,   nil,   nil,   nil,
   nil,   nil,   279,   248,   248,   nil,   nil,   nil,   nil,   nil,
   nil,   248,   nil,   nil,   nil,   nil,   248,   248,   nil,   248,
   nil,   248,   248,   248,   248,   248,   248,   248,   nil,   248,
   248,   248,   248,   251,   nil,   nil,   279,   nil,   nil,   nil,
   nil,   nil,   251,   279,   nil,   nil,   nil,   nil,   279,   279,
   nil,   279,   nil,   279,   279,   279,   279,   279,   279,   279,
   nil,   279,   279,   279,   279,    32,   nil,   nil,   251,   nil,
   nil,   nil,   nil,   nil,    32,   251,   251,   nil,   nil,   nil,
   nil,   nil,   nil,   251,   nil,   nil,   nil,   nil,   251,   251,
   nil,   251,   nil,   251,   251,   251,   251,   251,   251,   251,
   nil,   251,   251,   251,   251,   135,   nil,   nil,    32,   nil,
   nil,   nil,   nil,   nil,   135,   nil,   nil,   nil,    32,   nil,
    32,    32,   nil,    32,   nil,    32,    32,    32,    32,    32,
    32,    32,   nil,    32,    32,    32,    32,   255,   nil,   nil,
   135,   nil,   nil,   nil,   nil,   nil,   255,   135,   135,   nil,
   nil,   nil,   nil,   nil,   nil,   135,   nil,   nil,   nil,   nil,
   135,   135,   nil,   135,   nil,   135,   135,   135,   135,   135,
   135,   135,   258,   135,   135,   135,   135,   nil,   nil,   nil,
   255,   258,   nil,   nil,   nil,   nil,   nil,   255,   nil,   nil,
   nil,   nil,   255,   255,   nil,   255,   nil,   255,   255,   255,
   255,   255,   255,   255,    90,   255,   255,   255,   255,   nil,
   nil,   nil,   nil,    90,   nil,   258,   nil,   nil,   nil,   nil,
   nil,   nil,   258,   nil,   nil,   nil,   nil,   258,   258,   nil,
   258,   nil,   258,   258,   258,   258,   258,   258,   258,   260,
   258,   258,   258,   258,   nil,   nil,   nil,    90,   260,   nil,
   nil,   nil,   nil,   nil,    90,   nil,   nil,   nil,   nil,    90,
    90,   nil,    90,   nil,    90,    90,    90,    90,    90,    90,
    90,   nil,    90,    90,    90,    90,   nil,   nil,   nil,   nil,
   nil,   nil,   260,   nil,   nil,   nil,   nil,   nil,   nil,   260,
   nil,   nil,   nil,   nil,   260,   260,   nil,   260,   nil,   260,
   260,   260,   260,   260,   260,   260,   nil,   260,   260,   260,
   260,    73,   nil,   nil,   nil,    73,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    73,   nil,   nil,   nil,   nil,    73,
   nil,    73,    73,   nil,    73,    73 ]

racc_action_pointer = [
    -3,   136,   nil,   nil,   nil,   nil,   nil,   135,   nil,   120,
    93,   124,   416,   147,    32,   146,   106,   559,   -20,   nil,
   nil,   nil,   nil,   107,   135,   nil,   nil,   627,   nil,   148,
   -17,    99,  1369,    11,   nil,   -23,   301,   nil,   nil,   nil,
   nil,   325,   nil,   nil,   nil,   nil,   nil,   101,   nil,   nil,
   152,   nil,   153,   154,   159,   173,   nil,   nil,   nil,   nil,
    48,   nil,   nil,   nil,   nil,   nil,   nil,   112,   nil,   nil,
   186,   186,    -2,  1610,   144,   149,   182,   184,   nil,   182,
   183,   184,   173,   nil,   nil,    -4,   nil,   198,   189,   nil,
  1508,   190,   nil,   -13,   181,   536,   nil,   488,   464,   440,
    42,   nil,   225,   197,   109,   133,   181,   253,   277,   188,
   nil,   nil,   256,   256,   253,   nil,    40,   nil,   nil,   nil,
   nil,   241,   843,   255,   246,   275,   264,   nil,   239,   240,
   nil,   nil,   nil,   nil,   nil,  1409,   255,    67,   nil,   nil,
   nil,  1059,   nil,    18,    18,   nil,  1019,   nil,   617,   293,
   -13,   267,   -37,   nil,  1126,   nil,   nil,   nil,   nil,    99,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   295,   296,   297,   302,
   316,   318,   nil,   328,   332,     0,   nil,   nil,   nil,   nil,
   321,   331,   157,   nil,   307,   205,   nil,   401,   307,   318,
   356,   303,   nil,   349,   nil,   301,   346,   -11,   347,    -7,
   560,   351,   651,   -26,   699,   723,   747,   771,   795,   819,
   354,   nil,   nil,   867,   915,   947,   987,   -14,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   372,   372,   nil,   nil,  1158,
   367,   373,   nil,  1225,   nil,   nil,   nil,   nil,  1265,   370,
   nil,  1337,   339,   nil,   -40,  1441,   nil,   nil,  1476,     5,
  1543,   -17,    -6,   nil,   nil,   nil,    -5,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    43,    70,   nil,    40,   nil,  1297,
   nil,    91,   nil,   nil,  1193,    50,    56,    57,   112,   nil,
   nil,   nil,   nil,    83,   nil,   nil,  1091,   111,   nil,   406,
   675,   112,   122,   nil,   114,   120,   nil,    83,   229,   nil,
   nil,   nil,   nil,   125,   nil,    85,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -178,  -178,    -1,    -2,    -3,    -4,    -5,    -7,   -22,  -178,
  -178,  -178,  -178,  -178,    -9,  -178,  -178,  -178,   -49,   -50,
   -52,   -53,   -92,  -178,   -35,   -36,   -37,  -178,   -39,   -41,
   -44,  -168,  -178,  -134,  -135,  -138,  -178,  -140,  -141,  -142,
  -143,  -178,  -145,  -146,  -147,  -148,  -149,  -178,  -151,  -152,
  -178,  -154,  -178,  -178,  -178,  -178,  -164,  -165,  -166,  -167,
  -178,  -171,  -172,  -173,  -174,  -175,  -176,  -178,   320,    -6,
  -178,  -178,  -178,  -178,  -178,  -178,  -178,  -178,   -57,   -59,
   -61,   -62,  -178,   -48,  -168,   -69,   -34,   -69,  -178,   -38,
  -178,  -178,   -43,  -178,  -178,  -178,  -130,  -178,  -178,  -178,
  -178,  -139,  -178,  -178,  -178,  -178,  -178,  -178,  -178,  -178,
  -170,  -177,  -178,  -178,    -8,   -13,   -18,   -15,   -16,   -17,
   -23,  -178,  -178,  -178,   -69,   -28,  -178,   -54,  -178,  -178,
   -58,   -60,   -63,   -47,   -26,  -178,   -71,   -46,   -40,   -42,
  -122,  -178,  -131,  -178,  -178,  -127,  -178,   -78,  -178,  -178,
  -168,   -95,  -178,   -97,  -178,  -100,  -101,  -102,  -103,  -105,
  -106,  -107,  -108,  -109,  -110,  -111,  -118,  -119,  -120,  -121,
  -132,  -133,  -136,  -137,  -144,  -150,  -178,  -178,  -178,  -178,
  -178,  -178,  -169,  -178,  -178,  -178,   -14,   -19,   -20,   -24,
  -178,   -32,  -178,   -25,  -178,  -178,   -55,  -178,   -70,   -76,
  -178,  -178,  -124,  -178,  -128,  -178,  -178,  -178,  -120,  -178,
  -178,  -178,  -178,  -178,  -178,  -178,  -178,  -178,  -178,  -178,
  -178,   -51,   -91,  -178,  -178,  -178,  -178,  -168,   -99,  -153,
  -155,  -156,  -157,  -158,  -159,  -178,  -178,   -12,   -30,  -178,
  -178,   -86,   -27,  -178,   -29,   -56,   -64,   -65,  -178,  -178,
   -45,  -178,  -178,  -123,  -178,  -178,   -21,  -104,  -178,  -178,
  -178,  -178,  -178,   -82,   -83,   -88,  -178,   -90,  -112,  -113,
  -114,  -115,  -116,  -117,  -178,  -162,   -98,   -96,  -129,  -178,
   -10,  -178,   -31,   -33,  -178,   -66,  -178,   -77,   -72,   -74,
   -75,  -125,  -126,  -178,   -81,   -87,  -178,  -178,   -89,  -161,
  -178,  -178,  -178,   -85,  -178,   -68,   -94,  -178,  -178,   -80,
   -84,  -163,  -160,  -178,   -67,  -178,   -73,   -79,   -11,   -93 ]

racc_goto_table = [
    83,   152,    30,   124,   190,    17,   115,   221,   159,    96,
   290,    73,    92,   244,    18,   120,   240,    30,    85,   289,
    18,   304,    94,   145,    28,   274,   305,    18,   261,   263,
   265,   102,   268,   269,   270,   271,   272,   273,   288,    89,
   277,   198,   276,   134,   228,   136,    93,   143,   159,   101,
   245,     2,   207,     3,   117,     4,   126,     5,     6,   159,
     7,    14,    69,   189,   133,   290,   114,   159,   186,   221,
   142,   121,   204,   139,   316,    24,   293,   294,   295,   127,
    30,   301,   193,   137,    86,   175,   297,   170,   171,   172,
   173,   138,    18,    87,   177,   178,   179,   180,   181,   199,
   250,   222,   311,     1,   246,   247,   nil,   nil,   303,   nil,
   nil,   nil,   191,   nil,   309,   nil,   nil,   221,   nil,   237,
   nil,   282,   nil,   242,   197,   nil,   317,   nil,   nil,   nil,
   nil,   201,   196,    18,   205,   nil,   208,   159,   159,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   285,   nil,   nil,   287,   nil,   nil,
   nil,   159,   nil,   nil,   159,   nil,   nil,   117,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   126,   nil,   nil,   nil,
   nil,   nil,   241,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   254,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   275,   nil,   nil,   278,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   191,
   nil,   nil,   nil,   102,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   292,   nil,   nil,   nil,   nil,
   nil,   nil,   241,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   306,   275,
   nil,   nil,   nil,   nil,   241,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   275,   nil,   nil,   nil,   nil,   nil,   nil,   319 ]

racc_goto_check = [
    14,    44,    25,    20,    24,    17,    11,    15,    63,    72,
    49,    17,    14,    23,    35,    18,    26,    25,    17,    48,
    35,    45,    69,    71,    29,    84,    46,    35,    23,    53,
    23,    25,    23,    23,    23,    23,    23,    23,    47,    29,
    57,    44,    58,    21,    59,    21,    68,    70,    63,    75,
    41,     2,    44,     3,    14,     4,    14,     5,     6,    63,
     7,     8,     9,    18,    14,    49,    10,    63,    13,    15,
    72,    19,    71,    14,    48,    27,    23,    53,    23,    35,
    25,    84,    21,    17,    28,    14,    26,    25,    25,    69,
    69,    30,    35,    32,    25,    25,    25,    25,    25,    33,
    34,    37,    84,     1,    42,    43,   nil,   nil,    26,   nil,
   nil,   nil,    25,   nil,    23,   nil,   nil,    15,   nil,    11,
   nil,    24,   nil,    20,    17,   nil,    23,   nil,   nil,   nil,
   nil,    25,    35,    35,    25,   nil,    25,    63,    63,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    44,   nil,   nil,    44,   nil,   nil,
   nil,    63,   nil,   nil,    63,   nil,   nil,    14,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    14,   nil,   nil,   nil,
   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    25,   nil,   nil,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,
   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,
   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    14,    25,
   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    25,   nil,   nil,   nil,   nil,   nil,   nil,    14 ]

racc_goto_pointer = [
   nil,   103,    51,    53,    55,    57,    58,    60,    54,    48,
    -6,   -66,   nil,   -48,   -18,  -142,   nil,    -5,   -58,    -2,
   -71,   -42,   nil,  -182,  -118,   -10,  -176,    63,    60,    12,
     1,   nil,    69,   -37,   -99,     4,   nil,   -48,   nil,   nil,
   nil,  -147,   -93,   -92,   -94,  -265,  -260,  -214,  -233,  -242,
   nil,   nil,   nil,  -182,   nil,   nil,   nil,  -185,  -182,  -110,
   nil,   nil,   nil,   -87,   nil,   nil,   nil,   nil,    14,   -10,
   -47,   -71,   -23,   nil,   nil,    13,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  -198,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   206,   nil,   nil,
   nil,   nil,   116,   nil,    48,   147,     8,   nil,   nil,   nil,
   nil,   nil,   125,   148,   nil,   168,   nil,   nil,   nil,   nil,
    26,    29,   nil,   nil,   nil,    49,    19,   264,    20,    21,
    77,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,
   167,   161,   162,   nil,   163,   164,   165,   151,   153,   155,
   156,   157,   158,    62,   160,   166,   169,    34,   nil,    33,
   nil,   nil,   nil,    35,    36,    37,    38,    40,    42,    43,
    44,    45,    47,    51,   nil,    61,    66 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 80, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  3, 82, :_reduce_6,
  0, 87, :_reduce_none,
  3, 87, :_reduce_8,
  0, 88, :_reduce_none,
  5, 88, :_reduce_10,
  8, 88, :_reduce_11,
  3, 89, :_reduce_12,
  1, 89, :_reduce_none,
  2, 90, :_reduce_14,
  1, 91, :_reduce_none,
  1, 91, :_reduce_16,
  1, 91, :_reduce_17,
  0, 92, :_reduce_18,
  1, 92, :_reduce_19,
  1, 92, :_reduce_20,
  3, 94, :_reduce_21,
  1, 86, :_reduce_none,
  4, 83, :_reduce_23,
  5, 83, :_reduce_24,
  5, 84, :_reduce_25,
  4, 85, :_reduce_26,
  3, 99, :_reduce_27,
  1, 99, :_reduce_28,
  3, 101, :_reduce_29,
  3, 98, :_reduce_30,
  3, 103, :_reduce_31,
  1, 103, :_reduce_none,
  4, 97, :_reduce_33,
  3, 95, :_reduce_34,
  2, 95, :_reduce_35,
  1, 108, :_reduce_36,
  1, 108, :_reduce_37,
  2, 106, :_reduce_38,
  1, 106, :_reduce_39,
  3, 109, :_reduce_40,
  1, 109, :_reduce_none,
  3, 110, :_reduce_42,
  2, 110, :_reduce_43,
  1, 110, :_reduce_none,
  4, 107, :_reduce_45,
  2, 111, :_reduce_46,
  3, 96, :_reduce_47,
  2, 96, :_reduce_48,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 116, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  3, 117, :_reduce_54,
  4, 117, :_reduce_55,
  5, 118, :_reduce_56,
  1, 119, :_reduce_57,
  2, 119, :_reduce_58,
  1, 119, :_reduce_59,
  2, 119, :_reduce_60,
  1, 119, :_reduce_61,
  1, 119, :_reduce_62,
  2, 119, :_reduce_63,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  2, 121, :_reduce_66,
  4, 122, :_reduce_67,
  1, 124, :_reduce_none,
  0, 100, :_reduce_none,
  2, 100, :_reduce_70,
  0, 112, :_reduce_none,
  3, 112, :_reduce_72,
  3, 126, :_reduce_73,
  1, 126, :_reduce_none,
  1, 127, :_reduce_none,
  0, 113, :_reduce_none,
  2, 113, :_reduce_77,
  1, 129, :_reduce_none,
  6, 130, :_reduce_79,
  5, 130, :_reduce_80,
  4, 131, :_reduce_81,
  3, 131, :_reduce_82,
  1, 132, :_reduce_none,
  3, 132, :_reduce_84,
  3, 105, :_reduce_85,
  1, 105, :_reduce_none,
  4, 133, :_reduce_87,
  3, 133, :_reduce_88,
  4, 134, :_reduce_89,
  3, 134, :_reduce_90,
  2, 135, :_reduce_91,
  1, 114, :_reduce_92,
  3, 125, :_reduce_93,
  1, 125, :_reduce_none,
  1, 123, :_reduce_none,
  3, 123, :_reduce_96,
  1, 136, :_reduce_none,
  3, 136, :_reduce_98,
  2, 137, :_reduce_99,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 138, :_reduce_none,
  1, 140, :_reduce_none,
  3, 140, :_reduce_104,
  1, 140, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  3, 143, :_reduce_112,
  3, 143, :_reduce_113,
  3, 143, :_reduce_114,
  3, 143, :_reduce_115,
  3, 143, :_reduce_116,
  3, 143, :_reduce_117,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  1, 144, :_reduce_none,
  1, 144, :_reduce_none,
  3, 146, :_reduce_122,
  5, 146, :_reduce_123,
  4, 146, :_reduce_124,
  6, 146, :_reduce_125,
  4, 150, :_reduce_126,
  1, 149, :_reduce_127,
  2, 149, :_reduce_128,
  4, 151, :_reduce_129,
  1, 147, :_reduce_130,
  2, 147, :_reduce_131,
  3, 104, :_reduce_132,
  3, 104, :_reduce_133,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  3, 148, :_reduce_136,
  3, 148, :_reduce_137,
  1, 148, :_reduce_none,
  2, 152, :_reduce_139,
  1, 152, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  3, 154, :_reduce_144,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 158, :_reduce_149,
  3, 128, :_reduce_150,
  1, 128, :_reduce_none,
  1, 161, :_reduce_none,
  4, 156, :_reduce_153,
  1, 156, :_reduce_none,
  4, 162, :_reduce_155,
  4, 162, :_reduce_156,
  4, 162, :_reduce_157,
  4, 162, :_reduce_158,
  4, 162, :_reduce_159,
  4, 145, :_reduce_160,
  4, 139, :_reduce_161,
  1, 163, :_reduce_none,
  3, 163, :_reduce_163,
  1, 159, :_reduce_164,
  1, 159, :_reduce_165,
  1, 153, :_reduce_166,
  1, 153, :_reduce_167,
  1, 93, :_reduce_168,
  3, 160, :_reduce_169,
  2, 160, :_reduce_170,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_173,
  1, 142, :_reduce_174,
  1, 142, :_reduce_175,
  1, 164, :_reduce_none,
  2, 165, :_reduce_177 ]

racc_reduce_n = 178

racc_shift_n = 320

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :FETCH => 4,
  :FIRST => 5,
  :unsigned_integer => 6,
  :ROWS => 7,
  :ONLY => 8,
  :OFFSET => 9,
  :NEXT => 10,
  :comma => 11,
  :built_in_function => 12,
  :ASC => 13,
  :DESC => 14,
  :left_paren => 15,
  :right_paren => 16,
  :INSERT => 17,
  :INTO => 18,
  :UPDATE => 19,
  :SET => 20,
  :DELETE => 21,
  :FROM => 22,
  :equals_operator => 23,
  :VALUES => 24,
  :SELECT => 25,
  :asterisk => 26,
  :DISTINCT => 27,
  :AS => 28,
  :CROSS => 29,
  :JOIN => 30,
  :INNER => 31,
  :LEFT => 32,
  :OUTER => 33,
  :RIGHT => 34,
  :FULL => 35,
  :ON => 36,
  :USING => 37,
  :WHERE => 38,
  :GROUP => 39,
  :HAVING => 40,
  :NOT => 41,
  :BETWEEN => 42,
  :AND => 43,
  :IN => 44,
  :LIKE => 45,
  :IS => 46,
  :NULL => 47,
  :EXISTS => 48,
  :identifier => 49,
  :OR => 50,
  :not_equals_operator => 51,
  :less_than_operator => 52,
  :greater_than_operator => 53,
  :less_than_or_equals_operator => 54,
  :greater_than_or_equals_operator => 55,
  :CASE => 56,
  :END => 57,
  :ELSE => 58,
  :WHEN => 59,
  :THEN => 60,
  :plus_sign => 61,
  :minus_sign => 62,
  :solidus => 63,
  :CURRENT_USER => 64,
  :period => 65,
  :COUNT => 66,
  :AVG => 67,
  :MAX => 68,
  :MIN => 69,
  :SUM => 70,
  :unsigned_float => 71,
  :quote => 72,
  :character_string_literal => 73,
  :variable => 74,
  :true_literal => 75,
  :false_literal => 76,
  :DATE => 77,
  :date_string => 78 }

racc_nt_base = 79

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "FETCH",
  "FIRST",
  "unsigned_integer",
  "ROWS",
  "ONLY",
  "OFFSET",
  "NEXT",
  "comma",
  "built_in_function",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "UPDATE",
  "SET",
  "DELETE",
  "FROM",
  "equals_operator",
  "VALUES",
  "SELECT",
  "asterisk",
  "DISTINCT",
  "AS",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "CASE",
  "END",
  "ELSE",
  "WHEN",
  "THEN",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "unsigned_float",
  "quote",
  "character_string_literal",
  "variable",
  "true_literal",
  "false_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "update_specification",
  "delete_specification",
  "query_expression",
  "order_by_clause",
  "fetch_only_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_name",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "assign_list",
  "where_clause",
  "assign_column",
  "row_value_constructor",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "distinct_select_list",
  "table_expression",
  "select_list",
  "select_sublist",
  "derived_column",
  "from_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "column_reference",
  "row_subquery",
  "between_predicate",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_function",
  "boolean_primary",
  "predicate",
  "boolean_literal",
  "comparison_predicate",
  "row_value_constructor_element",
  "general_function",
  "case_expression",
  "when_expressions",
  "term",
  "when_value_expressions",
  "when_value_expression",
  "when_expression",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "general_literal",
  "qualifier",
  "general_set_function",
  "argument_list",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 15)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1], val[2])
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 20)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2])
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'parser.racc', 24)
  def _reduce_10(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(0, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 25)
  def _reduce_11(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(val[1], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 28)
  def _reduce_12(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.racc', 32)
  def _reduce_14(val, _values, result)
     result = val[1].new(val[0])
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::BuiltInFunction.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Ascending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Ascending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 42)
  def _reduce_20(val, _values, result)
     result = SQLParser::Statement::Descending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1])
    result
  end
.,.,

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::Update.new(val[1], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::Delete.new(val[2], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_27(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_28(val, _values, result)
     result = Array(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::AssignColumn.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_31(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 32 omitted

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::All.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_37(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_38(val, _values, result)
     result = SQLParser::Statement::Distinct.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_39(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_40(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 41 omitted

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_42(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_43(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1])
    result
  end
.,.,

# reduce 44 omitted

module_eval(<<'.,.,', 'parser.racc', 101)
  def _reduce_45(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_46(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1])
    result
  end
.,.,

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_54(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_56(val, _values, result)
     result = val[1].new(val[0], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 127)
  def _reduce_57(val, _values, result)
     result = SQLParser::Statement::InnerJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_58(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::LeftJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::RightJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_62(val, _values, result)
     result = SQLParser::Statement::FullJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_63(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin
    result
  end
.,.,

# reduce 64 omitted

# reduce 65 omitted

module_eval(<<'.,.,', 'parser.racc', 140)
  def _reduce_66(val, _values, result)
     result = SQLParser::Statement::On.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 143)
  def _reduce_67(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2])
    result
  end
.,.,

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 150)
  def _reduce_70(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1])
    result
  end
.,.,

# reduce 71 omitted

module_eval(<<'.,.,', 'parser.racc', 154)
  def _reduce_72(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_73(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

module_eval(<<'.,.,', 'parser.racc', 165)
  def _reduce_77(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1])
    result
  end
.,.,

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_79(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2])
    result
  end
.,.,

# reduce 83 omitted

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_84(val, _values, result)
     result = SQLParser::Statement::InValueList.new(Array(val[1]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_85(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 86 omitted

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_87(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 192)
  def _reduce_88(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_89(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 196)
  def _reduce_90(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 199)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 203)
  def _reduce_92(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 206)
  def _reduce_93(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

module_eval(<<'.,.,', 'parser.racc', 212)
  def _reduce_96(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2])
    result
  end
.,.,

# reduce 97 omitted

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_98(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 220)
  def _reduce_99(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1])
    result
  end
.,.,

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_104(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

module_eval(<<'.,.,', 'parser.racc', 243)
  def _reduce_112(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_113(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_114(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_115(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_116(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_117(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2])
    result
  end
.,.,

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_122(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(nil,val[1], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_123(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(nil,val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_124(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(val[1], val[2], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_125(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(val[1], val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_126(val, _values, result)
     result = SQLParser::Statement::WhenClause.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 270)
  def _reduce_127(val, _values, result)
     result = [ val[0] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 271)
  def _reduce_128(val, _values, result)
     result = [ *val[0], val[1] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_129(val, _values, result)
     result = SQLParser::Statement::WhenClause.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_130(val, _values, result)
     result = [ val[0] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_131(val, _values, result)
     result = [ *val[0], val[1] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_132(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_133(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2])
    result
  end
.,.,

# reduce 134 omitted

# reduce 135 omitted

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_136(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2])
    result
  end
.,.,

# reduce 138 omitted

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_139(val, _values, result)
     result = val[0].new(val[1])
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_144(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_149(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_150(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2])
    result
  end
.,.,

# reduce 151 omitted

# reduce 152 omitted

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_153(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new)
    result
  end
.,.,

# reduce 154 omitted

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_155(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_156(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_157(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_158(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_159(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_160(val, _values, result)
     result = SQLParser::Statement::FunctionCall.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 335)
  def _reduce_161(val, _values, result)
     result = SQLParser::Statement::BooleanFunction.new(val[0], val[2])
    result
  end
.,.,

# reduce 162 omitted

module_eval(<<'.,.,', 'parser.racc', 339)
  def _reduce_163(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 343)
  def _reduce_164(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 344)
  def _reduce_165(val, _values, result)
    result = SQLParser::Statement::Float.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 347)
  def _reduce_166(val, _values, result)
     result = SQLParser::Statement::UnaryPlus
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 348)
  def _reduce_167(val, _values, result)
     result = SQLParser::Statement::UnaryMinus
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 352)
  def _reduce_168(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 356)
  def _reduce_169(val, _values, result)
     result = SQLParser::Statement::String.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 357)
  def _reduce_170(val, _values, result)
     result = SQLParser::Statement::String.new('')
    result
  end
.,.,

# reduce 171 omitted

# reduce 172 omitted

module_eval(<<'.,.,', 'parser.racc', 360)
  def _reduce_173(val, _values, result)
     result = SQLParser::Statement::Variable.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 363)
  def _reduce_174(val, _values, result)
     result = SQLParser::Statement::True.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 364)
  def _reduce_175(val, _values, result)
     result = SQLParser::Statement::False.new
    result
  end
.,.,

# reduce 176 omitted

module_eval(<<'.,.,', 'parser.racc', 370)
  def _reduce_177(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module SQLParser
