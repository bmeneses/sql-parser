#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 341)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    43,   206,   247,    75,   225,   107,    95,    95,    70,    28,
   236,    67,    94,    94,    56,     7,   237,   170,     8,    57,
    43,   227,   171,   228,   229,    86,    85,    72,   172,   230,
    72,    73,    74,   173,   191,   131,   132,    76,   174,    20,
    43,   175,   176,   -85,   -85,    72,    72,    45,    46,    28,
    33,   177,    37,    39,    40,    41,    42,    44,    47,   208,
    50,    51,    53,   138,   179,   180,    64,    45,    46,    64,
    33,    64,    37,    39,    40,    41,    42,    44,    47,    20,
    50,    51,    53,   186,   187,   136,   191,    45,    46,    99,
    33,   203,    37,    39,    40,    41,    42,    44,    47,    43,
    50,    51,    53,   142,   100,   207,   129,   128,    28,   210,
   211,   127,   213,   100,   214,   126,    72,    20,   101,    43,
   103,   104,   224,   105,   106,   218,   219,   101,    28,   103,
   104,   118,   105,   106,    14,    16,   118,   141,    20,    43,
   140,    72,   232,    64,   110,    89,    45,    46,   230,    33,
    88,    37,    39,    40,    41,    42,    44,    47,    20,    50,
    51,    53,    87,   145,    84,    83,    45,    46,     8,    33,
    82,    37,    39,    40,    41,    42,    44,    47,   208,    50,
    51,    53,    81,    80,   248,    79,    45,    46,    72,    33,
   251,    37,    39,    40,    41,    42,    44,    47,    43,    50,
    51,    53,   191,   252,   207,   100,   -85,   146,   232,    98,
    69,   139,     8,    99,   256,    64,   258,   259,    43,   101,
   260,   103,   104,    58,   105,   106,   262,    28,   191,   154,
    72,    20,   267,    54,   269,    12,   150,   151,    11,   271,
   272,   273,   274,     9,    72,    45,    46,   nil,    33,   nil,
    37,    39,    40,    41,    42,    44,    47,    20,    50,    51,
    53,   nil,   nil,   nil,   nil,    45,    46,   nil,    33,   nil,
    37,    39,    40,    41,    42,    44,    47,    43,    50,    51,
    53,   nil,   nil,   nil,   nil,   nil,    28,   nil,   nil,  -142,
  -142,     8,  -142,  -142,  -142,   nil,   nil,    43,   nil,  -142,
  -142,  -142,  -142,  -142,  -142,   nil,    28,   nil,   nil,   nil,
   nil,     8,   nil,   nil,   nil,   nil,    20,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    45,    46,   nil,    33,   nil,    37,
    39,    40,    41,    42,    44,    47,    20,    50,    51,    53,
   nil,   nil,   nil,   nil,    45,    46,   nil,    33,   nil,    37,
    39,    40,    41,    42,    44,    47,    43,    50,    51,    53,
   nil,   nil,   nil,   nil,   nil,    28,   nil,   nil,   nil,   192,
   193,    14,   194,   195,   196,   nil,    43,   nil,   nil,   197,
   198,   199,   200,   201,   202,   230,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    20,    43,   nil,   nil,   nil,
   nil,   nil,   nil,    45,    46,    28,    33,   nil,    37,    39,
    40,    41,    42,    44,    47,   208,    50,    51,    53,   nil,
   nil,   nil,   nil,    45,    46,   nil,    33,   nil,    37,    39,
    40,    41,    42,    44,    47,    20,    50,    51,    53,   nil,
   nil,   nil,   nil,    45,    46,   nil,    33,   nil,    37,    39,
    40,    41,    42,    44,    47,    43,    50,    51,    53,   nil,
   nil,   nil,   nil,   nil,   230,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   146,   nil,   208,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    45,    46,   nil,    33,   nil,    37,    39,    40,
    41,    42,    44,    47,   154,    50,    51,    53,    43,   nil,
   nil,   150,   151,   nil,   nil,   nil,   nil,   146,   nil,   nil,
    45,    46,   nil,    33,   nil,    37,    39,    40,    41,    42,
    44,    47,    43,    50,    51,    53,   nil,   nil,   nil,   nil,
   nil,    28,   nil,   nil,   nil,   nil,   150,   208,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    45,    46,   nil,    33,   nil,
    37,    39,    40,    41,    42,    44,    47,    43,    50,    51,
    53,    20,   nil,   nil,   nil,   nil,    28,   nil,   nil,   nil,
   nil,   nil,    33,   nil,    37,    39,    40,    41,    42,    44,
    47,    43,    50,    51,    53,   nil,   nil,   nil,   nil,   nil,
    28,   nil,   nil,   nil,   nil,   nil,    20,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    45,    46,   nil,    33,   nil,    37,
    39,    40,    41,    42,    44,    47,    43,    50,    51,    53,
    20,   nil,   nil,   nil,   nil,    28,   nil,   nil,    45,    46,
   nil,    33,   nil,    37,    39,    40,    41,    42,    44,    47,
   nil,    50,    51,    53,    43,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   146,   nil,    20,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    45,    46,   nil,    33,   nil,    37,    39,
    40,    41,    42,    44,    47,   154,    50,    51,    53,    43,
   nil,   nil,   150,   151,   nil,   nil,   nil,   nil,    28,   nil,
   nil,    45,    46,   nil,    33,   nil,    37,    39,    40,    41,
    42,    44,    47,    43,    50,    51,    53,   nil,   nil,   nil,
   nil,   nil,   230,   nil,   nil,   nil,   nil,   nil,    20,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,   nil,    33,
   nil,    37,    39,    40,    41,    42,    44,    47,    43,    50,
    51,    53,   208,   nil,   nil,   nil,   nil,   230,   nil,   nil,
    45,    46,   nil,    33,   nil,    37,    39,    40,    41,    42,
    44,    47,    43,    50,    51,    53,   nil,   nil,   nil,   nil,
   nil,   230,   nil,   nil,   nil,   nil,   nil,   208,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    45,    46,   nil,    33,   nil,
    37,    39,    40,    41,    42,    44,    47,    43,    50,    51,
    53,   208,   nil,   nil,   nil,   nil,   230,   nil,   nil,    45,
    46,   nil,    33,   nil,    37,    39,    40,    41,    42,    44,
    47,    43,    50,    51,    53,   nil,   nil,   nil,   nil,   nil,
   230,   nil,   nil,   nil,   nil,   nil,   208,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    45,    46,   nil,    33,   nil,    37,
    39,    40,    41,    42,    44,    47,    43,    50,    51,    53,
   208,   nil,   nil,   nil,   nil,   230,   nil,   nil,    45,    46,
   nil,    33,   nil,    37,    39,    40,    41,    42,    44,    47,
    43,    50,    51,    53,   nil,   nil,   nil,   nil,   nil,    28,
   nil,   nil,   nil,   nil,   nil,   208,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    45,    46,   nil,    33,   nil,    37,    39,
    40,    41,    42,    44,    47,   nil,    50,    51,    53,    20,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,   nil,
    33,   nil,    37,    39,    40,    41,    42,    44,    47,    43,
    50,    51,    53,   nil,   nil,   nil,   nil,   nil,    28,   nil,
   nil,   nil,   nil,   nil,   120,   nil,   nil,   nil,   nil,    43,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    28,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    20,    43,
   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,    28,    33,
   nil,    37,    39,    40,    41,    42,    44,    47,    20,    50,
    51,    53,   nil,   nil,   nil,   nil,    45,    46,   nil,    33,
   nil,    37,    39,    40,    41,    42,    44,    47,    20,    50,
    51,    53,   nil,   nil,   nil,   nil,    45,    46,   nil,    33,
   nil,    37,    39,    40,    41,    42,    44,    47,    43,    50,
    51,    53,   nil,   nil,   nil,   nil,   nil,   230,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    28,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   208,    43,   nil,
   nil,   nil,   nil,   nil,   nil,    45,    46,   230,    33,   nil,
    37,    39,    40,    41,    42,    44,    47,    20,    50,    51,
    53,   nil,   nil,   nil,   nil,    45,    46,   nil,    33,   nil,
    37,    39,    40,    41,    42,    44,    47,   208,    50,    51,
    53,   nil,   nil,   nil,   nil,    45,    46,   nil,    33,   nil,
    37,    39,    40,    41,    42,    44,    47,    43,    50,    51,
    53,   nil,   nil,   nil,   nil,   nil,    28,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    43,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   146,   nil,    20,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    45,    46,   nil,    33,   nil,    37,
    39,    40,    41,    42,    44,    47,   154,    50,    51,    53,
    43,   nil,   nil,   150,   151,   nil,   nil,   nil,   nil,    28,
   nil,   nil,    45,    46,   nil,    33,   nil,    37,    39,    40,
    41,    42,    44,    47,    43,    50,    51,    53,   nil,   nil,
   nil,   nil,   nil,    28,   nil,   nil,   nil,   nil,   nil,    20,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,   nil,
    33,   nil,    37,    39,    40,    41,    42,    44,    47,    43,
    50,    51,    53,    20,   nil,   nil,   nil,   nil,    28,   nil,
   nil,    45,    46,   nil,    33,   nil,    37,    39,    40,    41,
    42,    44,    47,   nil,    50,    51,    53,    43,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   146,   nil,    20,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,   nil,    33,
   nil,    37,    39,    40,    41,    42,    44,    47,   154,    50,
    51,    53,    43,   nil,   nil,   150,   151,   nil,   nil,   nil,
   nil,   146,   nil,   nil,    45,    46,   nil,    33,   nil,    37,
    39,    40,    41,    42,    44,    47,   nil,    50,    51,    53,
   nil,   nil,   nil,   154,   nil,   nil,   nil,   nil,   nil,   nil,
   150,   151,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,
    46,  -154,    33,   nil,    37,    39,    40,    41,    42,    44,
    47,   nil,    50,    51,    53,   nil,   nil,  -154,  -154,   nil,
  -154,  -154,  -154,   nil,   nil,   nil,   nil,  -154,  -154,  -154,
  -154,  -154,  -154,  -154,  -154,  -154 ]

racc_action_check = [
    74,   151,   208,    22,   189,    60,    58,   129,    19,    74,
   196,    13,    58,   129,    10,     0,   196,   120,     0,    10,
   267,   192,   121,   192,   192,    47,    47,    60,   122,   267,
    19,    21,    21,   123,   189,    92,    92,    22,   124,    74,
   260,   125,   127,   151,   208,    58,   129,    74,    74,   260,
    74,   128,    74,    74,    74,    74,    74,    74,    74,   267,
    74,    74,    74,   101,   134,   135,   100,   267,   267,   138,
   267,   139,   267,   267,   267,   267,   267,   267,   267,   260,
   267,   267,   267,   144,   145,    99,   147,   260,   260,    97,
   260,   150,   260,   260,   260,   260,   260,   260,   260,   136,
   260,   260,   260,   106,   184,   152,    90,    89,   136,   176,
   177,    88,   181,   111,   182,    85,    79,   187,   184,     8,
   184,   184,   188,   184,   184,   184,   184,   111,     8,   111,
   111,    78,   111,   111,     8,     8,   190,   105,   136,   256,
   104,    70,   194,    67,    66,    57,   136,   136,   256,   136,
    56,   136,   136,   136,   136,   136,   136,   136,     8,   136,
   136,   136,    53,   109,    42,    41,     8,     8,   203,     8,
    40,     8,     8,     8,     8,     8,     8,     8,   256,     8,
     8,     8,    39,    37,   211,    34,   256,   256,   107,   256,
   219,   256,   256,   256,   256,   256,   256,   256,   146,   256,
   256,   256,   220,   221,   226,    59,    20,   146,   228,    59,
    18,   102,   146,    59,   231,    12,   236,   244,   247,    59,
   245,    59,    59,    11,    59,    59,   248,   247,   250,   146,
   251,   252,   253,     9,   257,     7,   146,   146,     5,   261,
   262,   263,   264,     1,   274,   146,   146,   nil,   146,   nil,
   146,   146,   146,   146,   146,   146,   146,   247,   146,   146,
   146,   nil,   nil,   nil,   nil,   247,   247,   nil,   247,   nil,
   247,   247,   247,   247,   247,   247,   247,   232,   247,   247,
   247,   nil,   nil,   nil,   nil,   nil,   232,   nil,   nil,   259,
   259,   232,   259,   259,   259,   nil,   nil,   230,   nil,   259,
   259,   259,   259,   259,   259,   nil,   230,   nil,   nil,   nil,
   nil,   230,   nil,   nil,   nil,   nil,   232,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   232,   232,   nil,   232,   nil,   232,
   232,   232,   232,   232,   232,   232,   230,   232,   232,   232,
   nil,   nil,   nil,   nil,   230,   230,   nil,   230,   nil,   230,
   230,   230,   230,   230,   230,   230,    16,   230,   230,   230,
   nil,   nil,   nil,   nil,   nil,    16,   nil,   nil,   nil,   149,
   149,    16,   149,   149,   149,   nil,   229,   nil,   nil,   149,
   149,   149,   149,   149,   149,   229,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    16,    98,   nil,   nil,   nil,
   nil,   nil,   nil,    16,    16,    98,    16,   nil,    16,    16,
    16,    16,    16,    16,    16,   229,    16,    16,    16,   nil,
   nil,   nil,   nil,   229,   229,   nil,   229,   nil,   229,   229,
   229,   229,   229,   229,   229,    98,   229,   229,   229,   nil,
   nil,   nil,   nil,    98,    98,   nil,    98,   nil,    98,    98,
    98,    98,    98,    98,    98,   227,    98,    98,    98,   nil,
   nil,   nil,   nil,   nil,   227,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   218,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   218,   nil,   227,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   227,   227,   nil,   227,   nil,   227,   227,   227,
   227,   227,   227,   227,   218,   227,   227,   227,   154,   nil,
   nil,   218,   218,   nil,   nil,   nil,   nil,   154,   nil,   nil,
   218,   218,   nil,   218,   nil,   218,   218,   218,   218,   218,
   218,   218,    23,   218,   218,   218,   nil,   nil,   nil,   nil,
   nil,    23,   nil,   nil,   nil,   nil,   154,   154,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   154,   154,   nil,   154,   nil,
   154,   154,   154,   154,   154,   154,   154,    28,   154,   154,
   154,    23,   nil,   nil,   nil,   nil,    28,   nil,   nil,   nil,
   nil,   nil,    23,   nil,    23,    23,    23,    23,    23,    23,
    23,   214,    23,    23,    23,   nil,   nil,   nil,   nil,   nil,
   214,   nil,   nil,   nil,   nil,   nil,    28,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    28,    28,   nil,    28,   nil,    28,
    28,    28,    28,    28,    28,    28,   180,    28,    28,    28,
   214,   nil,   nil,   nil,   nil,   180,   nil,   nil,   214,   214,
   nil,   214,   nil,   214,   214,   214,   214,   214,   214,   214,
   nil,   214,   214,   214,   207,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   207,   nil,   180,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   180,   180,   nil,   180,   nil,   180,   180,
   180,   180,   180,   180,   180,   207,   180,   180,   180,   206,
   nil,   nil,   207,   207,   nil,   nil,   nil,   nil,   206,   nil,
   nil,   207,   207,   nil,   207,   nil,   207,   207,   207,   207,
   207,   207,   207,   202,   207,   207,   207,   nil,   nil,   nil,
   nil,   nil,   202,   nil,   nil,   nil,   nil,   nil,   206,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   206,   206,   nil,   206,
   nil,   206,   206,   206,   206,   206,   206,   206,   201,   206,
   206,   206,   202,   nil,   nil,   nil,   nil,   201,   nil,   nil,
   202,   202,   nil,   202,   nil,   202,   202,   202,   202,   202,
   202,   202,   200,   202,   202,   202,   nil,   nil,   nil,   nil,
   nil,   200,   nil,   nil,   nil,   nil,   nil,   201,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   201,   201,   nil,   201,   nil,
   201,   201,   201,   201,   201,   201,   201,   199,   201,   201,
   201,   200,   nil,   nil,   nil,   nil,   199,   nil,   nil,   200,
   200,   nil,   200,   nil,   200,   200,   200,   200,   200,   200,
   200,   198,   200,   200,   200,   nil,   nil,   nil,   nil,   nil,
   198,   nil,   nil,   nil,   nil,   nil,   199,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   199,   199,   nil,   199,   nil,   199,
   199,   199,   199,   199,   199,   199,   197,   199,   199,   199,
   198,   nil,   nil,   nil,   nil,   197,   nil,   nil,   198,   198,
   nil,   198,   nil,   198,   198,   198,   198,   198,   198,   198,
    84,   198,   198,   198,   nil,   nil,   nil,   nil,   nil,    84,
   nil,   nil,   nil,   nil,   nil,   197,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   197,   197,   nil,   197,   nil,   197,   197,
   197,   197,   197,   197,   197,   nil,   197,   197,   197,    84,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    84,    84,   nil,
    84,   nil,    84,    84,    84,    84,    84,    84,    84,    80,
    84,    84,    84,   nil,   nil,   nil,   nil,   nil,    80,   nil,
   nil,   nil,   nil,   nil,    80,   nil,   nil,   nil,   nil,    83,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    83,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    80,    82,
   nil,   nil,   nil,   nil,   nil,   nil,    80,    80,    82,    80,
   nil,    80,    80,    80,    80,    80,    80,    80,    83,    80,
    80,    80,   nil,   nil,   nil,   nil,    83,    83,   nil,    83,
   nil,    83,    83,    83,    83,    83,    83,    83,    82,    83,
    83,    83,   nil,   nil,   nil,   nil,    82,    82,   nil,    82,
   nil,    82,    82,    82,    82,    82,    82,    82,   195,    82,
    82,    82,   nil,   nil,   nil,   nil,   nil,   195,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    69,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    69,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   195,   193,   nil,
   nil,   nil,   nil,   nil,   nil,   195,   195,   193,   195,   nil,
   195,   195,   195,   195,   195,   195,   195,    69,   195,   195,
   195,   nil,   nil,   nil,   nil,    69,    69,   nil,    69,   nil,
    69,    69,    69,    69,    69,    69,    69,   193,    69,    69,
    69,   nil,   nil,   nil,   nil,   193,   193,   nil,   193,   nil,
   193,   193,   193,   193,   193,   193,   193,    73,   193,   193,
   193,   nil,   nil,   nil,   nil,   nil,    73,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   191,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   191,   nil,    73,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    73,    73,   nil,    73,   nil,    73,
    73,    73,    73,    73,    73,    73,   191,    73,    73,    73,
    75,   nil,   nil,   191,   191,   nil,   nil,   nil,   nil,    75,
   nil,   nil,   191,   191,   nil,   191,   nil,   191,   191,   191,
   191,   191,   191,   191,    76,   191,   191,   191,   nil,   nil,
   nil,   nil,   nil,    76,   nil,   nil,   nil,   nil,   nil,    75,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    75,    75,   nil,
    75,   nil,    75,    75,    75,    75,    75,    75,    75,    81,
    75,    75,    75,    76,   nil,   nil,   nil,   nil,    81,   nil,
   nil,    76,    76,   nil,    76,   nil,    76,    76,    76,    76,
    76,    76,    76,   nil,    76,    76,    76,   186,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   186,   nil,    81,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    81,    81,   nil,    81,
   nil,    81,    81,    81,    81,    81,    81,    81,   186,    81,
    81,    81,   110,   nil,   nil,   186,   186,   nil,   nil,   nil,
   nil,   110,   nil,   nil,   186,   186,   nil,   186,   nil,   186,
   186,   186,   186,   186,   186,   186,   nil,   186,   186,   186,
   nil,   nil,   nil,   110,   nil,   nil,   nil,   nil,   nil,   nil,
   110,   110,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   110,
   110,   159,   110,   nil,   110,   110,   110,   110,   110,   110,
   110,   nil,   110,   110,   110,   nil,   nil,   159,   159,   nil,
   159,   159,   159,   nil,   nil,   nil,   nil,   159,   159,   159,
   159,   159,   159,   159,   159,   159 ]

racc_action_pointer = [
    -2,   243,   nil,   nil,   nil,   236,   nil,   217,   113,   233,
    10,   220,   170,   -13,   nil,   nil,   350,   nil,   199,   -15,
   149,   -22,   -18,   536,   nil,   nil,   nil,   nil,   571,   nil,
   nil,   nil,   nil,   nil,   128,   nil,   nil,   168,   nil,   167,
   155,   150,   149,   nil,   nil,   nil,   nil,   -39,   nil,   nil,
   nil,   nil,   nil,    93,   nil,   nil,   145,   139,     0,   194,
   -18,   nil,   nil,   nil,   nil,   nil,   110,    98,   nil,  1072,
    96,   nil,   nil,  1151,    -6,  1214,  1238,   nil,   115,    71,
   953,  1273,   993,   973,   894,    51,   nil,   nil,   105,   100,
    95,   nil,    22,   nil,   nil,   nil,   nil,    70,   390,    70,
    21,    37,   185,   nil,   111,   108,    74,   143,   nil,   128,
  1336,   102,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     1,     6,    12,    17,    22,    25,   nil,    35,    47,     1,
   nil,   nil,   nil,   nil,    48,    54,    93,   nil,    24,    26,
   nil,   nil,   nil,   nil,    47,    81,   192,    40,   nil,   332,
    76,   -14,    66,   nil,   512,   nil,   nil,   nil,   nil,  1370,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   101,   100,   nil,   nil,
   630,    96,   103,   nil,    93,   nil,  1301,    72,   106,   -12,
   120,  1179,   -17,  1092,   127,  1052,   -27,   870,   835,   811,
   776,   752,   717,   148,   nil,   nil,   693,   658,   -13,   nil,
   nil,   178,   nil,   nil,   595,   nil,   nil,   nil,   477,   175,
   156,   192,   nil,   nil,   nil,   nil,   165,   449,   193,   370,
   291,   175,   271,   nil,   nil,   nil,   173,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   201,   209,   nil,   212,   219,   nil,
   182,   185,   186,   193,   nil,   nil,   133,   218,   nil,   252,
    34,   223,   232,   225,   231,   nil,   nil,    14,   nil,   nil,
   nil,   nil,   nil,   nil,   199,   nil,   nil ]

racc_action_default = [
  -159,  -159,    -1,    -2,    -3,    -5,   -20,  -159,  -159,  -159,
    -7,  -159,  -159,   -28,   -29,   -30,  -159,   -32,   -34,   -37,
  -150,  -117,  -120,  -159,  -122,  -123,  -124,  -125,  -159,  -127,
  -128,  -129,  -130,  -131,  -159,  -133,  -134,  -159,  -136,  -159,
  -159,  -159,  -159,  -146,  -147,  -148,  -149,  -159,  -153,  -154,
  -155,  -156,  -157,  -159,   277,    -4,  -159,  -159,  -159,  -159,
   -42,   -43,   -45,   -46,   -85,   -27,   -62,  -159,   -31,  -159,
  -159,   -36,  -150,  -159,  -159,  -159,  -159,  -121,  -159,  -159,
  -159,  -159,  -159,  -159,  -159,  -159,  -152,  -158,  -159,  -159,
    -6,   -11,   -16,   -13,   -14,   -15,   -21,  -159,  -159,  -159,
  -159,  -159,  -159,   -50,   -52,   -54,   -55,  -159,   -41,   -64,
  -159,   -39,   -33,   -35,  -115,  -116,  -118,  -119,  -126,  -132,
  -159,  -159,  -159,  -159,  -159,  -159,  -151,  -159,  -159,  -159,
   -12,   -17,   -18,   -22,  -159,   -25,  -159,   -47,  -159,  -159,
   -51,   -53,   -56,   -40,   -69,  -159,  -159,   -63,   -71,  -159,
  -159,  -150,   -88,   -90,  -159,   -93,   -94,   -95,   -96,   -98,
   -99,  -100,  -101,  -102,  -103,  -104,  -111,  -112,  -113,  -114,
  -135,  -137,  -138,  -139,  -140,  -141,  -159,  -159,   -10,   -23,
  -159,  -159,   -79,   -48,  -159,   -38,  -159,  -159,  -159,  -159,
  -113,  -159,  -159,  -159,  -159,  -159,  -159,  -159,  -159,  -159,
  -159,  -159,  -159,  -159,   -44,   -84,  -159,  -159,  -150,   -92,
    -8,  -159,   -24,   -26,  -159,   -49,   -57,   -58,  -159,  -159,
   -70,   -65,   -67,   -68,   -19,   -97,   -89,  -159,  -159,  -159,
  -159,  -159,  -159,   -75,   -76,   -81,  -159,   -83,  -105,  -106,
  -107,  -108,  -109,  -110,  -159,  -144,   -91,  -159,  -159,   -78,
   -59,  -159,  -159,  -159,   -74,   -80,  -159,  -159,   -82,  -143,
  -159,  -159,  -159,  -159,   -61,   -87,   -66,  -159,   -73,   -77,
  -145,  -142,    -9,   -60,  -159,   -72,   -86 ]

racc_goto_table = [
    71,    19,   181,   134,    60,   223,    59,   147,   159,    19,
    91,    96,   204,   222,   244,    17,   233,   116,   117,   109,
    65,    78,    97,    68,   112,    66,    13,   144,   185,   130,
   205,   215,   216,   217,    90,   263,   264,   221,    55,    93,
    10,   108,     5,   189,   159,     4,   226,   246,   209,   133,
   254,   113,   159,     3,     2,   261,   204,    77,     1,    60,
   119,   111,    19,   nil,   nil,   nil,   114,   115,   270,   nil,
   223,   nil,   nil,   121,   122,   123,   124,   125,   266,   nil,
   249,   178,   nil,   220,   159,   212,   nil,   nil,   143,   159,
   204,   135,   137,   nil,   nil,   nil,   nil,   nil,   257,   nil,
   nil,   nil,   nil,   nil,   nil,   159,   nil,   nil,   nil,   nil,
    93,   nil,   nil,   nil,   nil,   250,   159,   231,   nil,   235,
   nil,   238,   239,   240,   241,   242,   243,   nil,   nil,   182,
   183,    60,   nil,   184,   nil,   nil,   nil,   nil,   nil,   190,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   253,   nil,   255,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   135,   nil,   nil,   nil,   nil,   nil,   nil,
   268,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   275,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   245,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   182,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    78,   nil,   182,   nil,   nil,   nil,   nil,
   nil,   nil,   265,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   245,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   245,   nil,   276 ]

racc_goto_check = [
    12,    19,    20,    18,    30,    44,    15,    39,    59,    19,
     9,    16,    13,    43,    75,    23,    49,    63,    63,    27,
    22,    19,    17,    23,    24,    26,    21,    28,    29,    11,
    32,    36,    37,    38,     8,    40,    41,    42,     7,    12,
     6,    12,     5,    39,    59,     4,    53,    54,    55,    16,
    49,    12,    59,     3,     2,    75,    13,    66,     1,    30,
    12,    15,    19,   nil,   nil,   nil,    19,    19,    75,   nil,
    44,   nil,   nil,    19,    19,    19,    19,    19,    43,   nil,
    20,     9,   nil,    39,    59,    18,   nil,   nil,    12,    59,
    13,    19,    30,   nil,   nil,   nil,   nil,   nil,    20,   nil,
   nil,   nil,   nil,   nil,   nil,    59,   nil,   nil,   nil,   nil,
    12,   nil,   nil,   nil,   nil,    39,    59,    47,   nil,    47,
   nil,    47,    47,    47,    47,    47,    47,   nil,   nil,    19,
    30,    30,   nil,    15,   nil,   nil,   nil,   nil,   nil,    19,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    47,   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    19,   nil,   nil,   nil,   nil,   nil,   nil,
    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    19,   nil,    19,   nil,   nil,   nil,   nil,
   nil,   nil,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    19,   nil,    12 ]

racc_goto_pointer = [
   nil,    58,    54,    53,    45,    42,    35,    28,   -24,   -48,
   nil,   -63,   -19,  -138,   nil,    -6,   -48,   -37,   -95,    -7,
  -134,    18,     7,     7,   -45,   nil,    12,   -47,   -82,  -116,
    -8,   nil,  -120,   nil,   nil,   nil,  -153,  -152,  -151,  -103,
  -216,  -215,  -150,  -174,  -182,   nil,   nil,   -76,   nil,  -178,
   nil,   nil,   nil,  -145,  -160,  -106,   nil,   nil,   nil,  -102,
   nil,   nil,   nil,   -58,   nil,   nil,    34,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  -192,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   188,   nil,   nil,   nil,   nil,
    92,   nil,    35,   148,     6,   nil,   nil,   nil,   nil,   168,
   nil,   nil,   nil,   nil,    15,    18,   nil,   nil,   nil,   nil,
    36,    61,   234,    62,    63,   102,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    26,   167,   161,   149,   162,   nil,
   163,   164,   165,   152,   153,   155,   156,   157,   158,    49,
   160,   166,   169,    21,    22,    23,    24,    25,    27,    29,
    30,    31,    32,    34,    38,   nil,    48,    52 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 71, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  3, 73, :_reduce_4,
  0, 76, :_reduce_none,
  3, 76, :_reduce_6,
  0, 77, :_reduce_none,
  5, 77, :_reduce_8,
  8, 77, :_reduce_9,
  3, 78, :_reduce_10,
  1, 78, :_reduce_none,
  2, 79, :_reduce_12,
  1, 80, :_reduce_none,
  1, 80, :_reduce_14,
  1, 80, :_reduce_15,
  0, 81, :_reduce_16,
  1, 81, :_reduce_17,
  1, 81, :_reduce_18,
  3, 83, :_reduce_19,
  1, 75, :_reduce_none,
  4, 74, :_reduce_21,
  5, 74, :_reduce_22,
  3, 87, :_reduce_23,
  3, 88, :_reduce_24,
  1, 88, :_reduce_none,
  4, 86, :_reduce_26,
  3, 84, :_reduce_27,
  2, 84, :_reduce_28,
  1, 93, :_reduce_29,
  1, 93, :_reduce_30,
  2, 91, :_reduce_31,
  1, 91, :_reduce_32,
  3, 94, :_reduce_33,
  1, 94, :_reduce_none,
  3, 95, :_reduce_35,
  2, 95, :_reduce_36,
  1, 95, :_reduce_none,
  4, 92, :_reduce_38,
  2, 96, :_reduce_39,
  3, 85, :_reduce_40,
  2, 85, :_reduce_41,
  1, 85, :_reduce_none,
  1, 85, :_reduce_none,
  1, 102, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  3, 103, :_reduce_47,
  4, 103, :_reduce_48,
  5, 104, :_reduce_49,
  1, 105, :_reduce_50,
  2, 105, :_reduce_51,
  1, 105, :_reduce_52,
  2, 105, :_reduce_53,
  1, 105, :_reduce_54,
  1, 105, :_reduce_55,
  2, 105, :_reduce_56,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  2, 107, :_reduce_59,
  4, 108, :_reduce_60,
  1, 110, :_reduce_none,
  0, 97, :_reduce_none,
  2, 97, :_reduce_63,
  0, 98, :_reduce_none,
  3, 98, :_reduce_65,
  3, 112, :_reduce_66,
  1, 112, :_reduce_none,
  1, 113, :_reduce_none,
  0, 99, :_reduce_none,
  2, 99, :_reduce_70,
  1, 115, :_reduce_none,
  6, 116, :_reduce_72,
  5, 116, :_reduce_73,
  4, 118, :_reduce_74,
  3, 118, :_reduce_75,
  1, 119, :_reduce_none,
  3, 119, :_reduce_77,
  3, 90, :_reduce_78,
  1, 90, :_reduce_none,
  4, 120, :_reduce_80,
  3, 120, :_reduce_81,
  4, 121, :_reduce_82,
  3, 121, :_reduce_83,
  2, 122, :_reduce_84,
  1, 100, :_reduce_85,
  3, 111, :_reduce_86,
  1, 111, :_reduce_none,
  1, 109, :_reduce_none,
  3, 109, :_reduce_89,
  1, 123, :_reduce_none,
  3, 123, :_reduce_91,
  2, 124, :_reduce_92,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 125, :_reduce_none,
  1, 127, :_reduce_none,
  3, 127, :_reduce_97,
  1, 127, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  3, 130, :_reduce_105,
  3, 130, :_reduce_106,
  3, 130, :_reduce_107,
  3, 130, :_reduce_108,
  3, 130, :_reduce_109,
  3, 130, :_reduce_110,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  3, 89, :_reduce_115,
  3, 89, :_reduce_116,
  1, 89, :_reduce_none,
  3, 133, :_reduce_118,
  3, 133, :_reduce_119,
  1, 133, :_reduce_none,
  2, 134, :_reduce_121,
  1, 134, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  3, 136, :_reduce_126,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 140, :_reduce_131,
  3, 114, :_reduce_132,
  1, 114, :_reduce_none,
  1, 143, :_reduce_none,
  4, 138, :_reduce_135,
  1, 138, :_reduce_none,
  4, 144, :_reduce_137,
  4, 144, :_reduce_138,
  4, 144, :_reduce_139,
  4, 144, :_reduce_140,
  4, 144, :_reduce_141,
  4, 132, :_reduce_142,
  4, 126, :_reduce_143,
  1, 145, :_reduce_none,
  3, 145, :_reduce_145,
  1, 141, :_reduce_146,
  1, 141, :_reduce_147,
  1, 135, :_reduce_148,
  1, 135, :_reduce_149,
  1, 82, :_reduce_150,
  3, 142, :_reduce_151,
  2, 142, :_reduce_152,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 129, :_reduce_155,
  1, 129, :_reduce_156,
  1, 146, :_reduce_none,
  2, 147, :_reduce_158 ]

racc_reduce_n = 159

racc_shift_n = 277

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :FETCH => 4,
  :FIRST => 5,
  :unsigned_integer => 6,
  :ROWS => 7,
  :ONLY => 8,
  :OFFSET => 9,
  :NEXT => 10,
  :comma => 11,
  :built_in_function => 12,
  :ASC => 13,
  :DESC => 14,
  :left_paren => 15,
  :right_paren => 16,
  :INSERT => 17,
  :INTO => 18,
  :VALUES => 19,
  :SELECT => 20,
  :asterisk => 21,
  :DISTINCT => 22,
  :AS => 23,
  :FROM => 24,
  :CROSS => 25,
  :JOIN => 26,
  :INNER => 27,
  :LEFT => 28,
  :OUTER => 29,
  :RIGHT => 30,
  :FULL => 31,
  :ON => 32,
  :USING => 33,
  :WHERE => 34,
  :GROUP => 35,
  :HAVING => 36,
  :NOT => 37,
  :BETWEEN => 38,
  :AND => 39,
  :IN => 40,
  :LIKE => 41,
  :IS => 42,
  :NULL => 43,
  :EXISTS => 44,
  :identifier => 45,
  :OR => 46,
  :equals_operator => 47,
  :not_equals_operator => 48,
  :less_than_operator => 49,
  :greater_than_operator => 50,
  :less_than_or_equals_operator => 51,
  :greater_than_or_equals_operator => 52,
  :plus_sign => 53,
  :minus_sign => 54,
  :solidus => 55,
  :CURRENT_USER => 56,
  :period => 57,
  :COUNT => 58,
  :AVG => 59,
  :MAX => 60,
  :MIN => 61,
  :SUM => 62,
  :unsigned_float => 63,
  :quote => 64,
  :character_string_literal => 65,
  :true_literal => 66,
  :false_literal => 67,
  :DATE => 68,
  :date_string => 69 }

racc_nt_base = 70

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "FETCH",
  "FIRST",
  "unsigned_integer",
  "ROWS",
  "ONLY",
  "OFFSET",
  "NEXT",
  "comma",
  "built_in_function",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "asterisk",
  "DISTINCT",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "unsigned_float",
  "quote",
  "character_string_literal",
  "true_literal",
  "false_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "fetch_only_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_name",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "distinct_select_list",
  "table_expression",
  "select_list",
  "select_sublist",
  "derived_column",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "column_reference",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_function",
  "boolean_primary",
  "predicate",
  "boolean_literal",
  "comparison_predicate",
  "row_value_constructor_element",
  "general_function",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "general_literal",
  "qualifier",
  "general_set_function",
  "argument_list",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1], val[2]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 22)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(0, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_9(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(val[1], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 26)
  def _reduce_10(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 11 omitted

module_eval(<<'.,.,', 'parser.racc', 30)
  def _reduce_12(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.racc', 34)
  def _reduce_14(val, _values, result)
     result = SQLParser::Statement::BuiltInFunction.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 35)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_24(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 25 omitted

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_27(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::Distinct.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 74)
  def _reduce_32(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_33(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 34 omitted

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_38(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_39(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_40(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_41(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_49(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 112)
  def _reduce_50(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 113)
  def _reduce_51(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_53(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_54(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 57 omitted

# reduce 58 omitted

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

module_eval(<<'.,.,', 'parser.racc', 135)
  def _reduce_63(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 64 omitted

module_eval(<<'.,.,', 'parser.racc', 139)
  def _reduce_65(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_66(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 150)
  def _reduce_70(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 71 omitted

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_72(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_73(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_74(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_75(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 76 omitted

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_77(val, _values, result)
     result = SQLParser::Statement::InValueList.new(Array(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 169)
  def _reduce_78(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 79 omitted

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 180)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_84(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_86(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 87 omitted

# reduce 88 omitted

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_89(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 90 omitted

module_eval(<<'.,.,', 'parser.racc', 202)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 205)
  def _reduce_92(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

module_eval(<<'.,.,', 'parser.racc', 215)
  def _reduce_97(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_105(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 229)
  def _reduce_106(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_107(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_108(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_109(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 233)
  def _reduce_110(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_115(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_116(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 117 omitted

module_eval(<<'.,.,', 'parser.racc', 251)
  def _reduce_118(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 252)
  def _reduce_119(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 120 omitted

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_121(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_126(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_131(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_132(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_135(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 136 omitted

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_138(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_139(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_140(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_142(val, _values, result)
     result = SQLParser::Statement::FunctionCall.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_143(val, _values, result)
     result = SQLParser::Statement::BooleanFunction.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 144 omitted

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_145(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_146(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 308)
  def _reduce_147(val, _values, result)
    result = SQLParser::Statement::Float.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_148(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_149(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_150(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_151(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_152(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 153 omitted

# reduce 154 omitted

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_155(val, _values, result)
     result = SQLParser::Statement::True.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_156(val, _values, result)
     result = SQLParser::Statement::False.new 
    result
  end
.,.,

# reduce 157 omitted

module_eval(<<'.,.,', 'parser.racc', 333)
  def _reduce_158(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
